{"version":3,"file":"pages/api/search.js","mappings":"iFAAA,IASAA,EATAC,EAAA,oBAAAD,KAAAA,KAAA,KACAE,EAAA,WACA,SAAAC,GAAA,CACA,KAAAC,KAAA,IACA,KAAAC,YAAA,CAAAJ,EAAAI,YAAA,CAGA,OADAF,EAAAG,SAAA,CAAAL,EACA,IAAAE,CACA,IACAH,EAmhBCE,EAjhBD,SAAAK,CAAA,EAEA,IAAAC,EAAA,CACAC,aAAA,oBAAAT,EACAU,SAAA,WAAAV,GAAA,aAAAW,OACAC,KACA,eAAAZ,GACA,SAAAA,GACA,WACA,IAEA,OADA,IAAAa,KACA,EACA,CAAU,MAAAC,EAAA,CACV,QACA,CACA,IACAC,SAAA,aAAAf,EACAgB,YAAA,gBAAAhB,CACA,EAMA,GAAAQ,EAAAQ,WAAA,CACA,IAAAC,EAAA,CACA,qBACA,sBACA,6BACA,sBACA,uBACA,sBACA,uBACA,wBACA,wBACA,CAEAC,EACAC,YAAAC,MAAA,EACA,SAAAC,CAAA,EACA,OAAAA,GAAAJ,EAAAK,OAAA,CAAAC,OAAAjB,SAAA,CAAAkB,QAAA,CAAAC,IAAA,CAAAJ,IAAA,EACA,CACA,CAEA,SAAAK,EAAAC,CAAA,EAIA,GAHA,iBAAAA,GACAA,CAAAA,EAAAC,OAAAD,EAAA,EAEA,4BAAAE,IAAA,CAAAF,GACA,0DAEA,OAAAA,EAAAG,WAAA,EACA,CAEA,SAAAC,EAAAC,CAAA,EAIA,MAHA,iBAAAA,GACAA,CAAAA,EAAAJ,OAAAI,EAAA,EAEAA,CACA,CAGA,SAAAC,EAAAC,CAAA,EACA,IAAAC,EAAA,CACAC,KAAA,WACA,IAAAJ,EAAAE,EAAAG,KAAA,GACA,OAAgBC,KAAAN,KAAAO,IAAAP,EAAAA,MAAAA,CAAA,CAChB,CACA,EAQA,OANAxB,EAAAE,QAAA,EACAyB,CAAAA,CAAA,CAAAxB,OAAAwB,QAAA,aACA,OAAAA,CACA,GAGAA,CACA,CAEA,SAAAK,EAAAC,CAAA,EACA,KAAAC,GAAA,IAEAD,aAAAD,EACAC,EAAAE,OAAA,UAAAX,CAAA,CAAAL,CAAA,EACA,KAAAiB,MAAA,CAAAjB,EAAAK,EACA,EAAO,MACDa,MAAAC,OAAA,CAAAL,GACNA,EAAAE,OAAA,UAAAI,CAAA,EACA,KAAAH,MAAA,CAAAG,CAAA,IAAAA,CAAA,IACA,EAAO,MACDN,GACNlB,OAAAyB,mBAAA,CAAAP,GAAAE,OAAA,UAAAhB,CAAA,EACA,KAAAiB,MAAA,CAAAjB,EAAAc,CAAA,CAAAd,EAAA,CACA,EAAO,KAEP,CA8DA,SAAAsB,EAAAC,CAAA,EACA,GAAAA,EAAAC,QAAA,CACA,OAAAC,QAAAC,MAAA,2BACA,CACAH,EAAAC,QAAA,GACA,CAEA,SAAAG,EAAAC,CAAA,EACA,WAAAH,QAAA,SAAAI,CAAA,CAAAH,CAAA,EACAE,EAAAE,MAAA,YACAD,EAAAD,EAAAG,MAAA,CACA,EACAH,EAAAI,OAAA,YACAN,EAAAE,EAAAK,KAAA,CACA,CACA,EACA,CAEA,SAAAC,EAAAjD,CAAA,EACA,IAAA2C,EAAA,IAAAO,WACAC,EAAAT,EAAAC,GAEA,OADAA,EAAAS,iBAAA,CAAApD,GACAmD,CACA,CAmBA,SAAAE,EAAAC,CAAA,EACA,GAAAA,EAAAC,KAAA,CACA,OAAAD,EAAAC,KAAA,GAKA,CAHA,IAAAC,EAAA,IAAAC,WAAAH,EAAAI,UAAA,EAEA,OADAF,EAAAG,GAAA,KAAAF,WAAAH,IACAE,EAAAI,MAAA,CAIA,SAAAC,GAAA,CA0FA,OAzFA,KAAAtB,QAAA,IAEA,KAAAuB,SAAA,UAAAxB,CAAA,EAEA,GADA,KAAAyB,SAAA,CAAAzB,EACAA,GAEQ,oBAAAA,EACR,KAAA0B,SAAA,CAAA1B,OACQ,GAAA1C,EAAAI,IAAA,EAAAC,KAAAP,SAAA,CAAAuE,aAAA,CAAA3B,GACR,KAAA4B,SAAA,CAAA5B,OACQ,GAAA1C,EAAAO,QAAA,EAAAgE,SAAAzE,SAAA,CAAAuE,aAAA,CAAA3B,GACR,KAAA8B,aAAA,CAAA9B,OACQ,GAAA1C,EAAAC,YAAA,EAAAwE,gBAAA3E,SAAA,CAAAuE,aAAA,CAAA3B,GACR,KAAA0B,SAAA,CAAA1B,EAAA1B,QAAA,OACQ,KA5MRH,CA4MQb,CAAAA,EAAAQ,WAAA,EAAAR,EAAAI,IAAA,GA5MRS,EA4MQ6B,IA3MRgC,SAAA5E,SAAA,CAAAuE,aAAA,CAAAxD,IA4MA,KAAA8D,gBAAA,CAAAlB,EAAAf,EAAAsB,MAAA,EAEA,KAAAG,SAAA,KAAA9D,KAAA,MAAAsE,gBAAA,IACQ3E,EAAAQ,WAAA,EAAAG,CAAAA,YAAAb,SAAA,CAAAuE,aAAA,CAAA3B,IAAAhC,EAAAgC,EAAA,EACR,KAAAiC,gBAAA,CAAAlB,EAAAf,GAEA,KAAA0B,SAAA,CAAA1B,EAAA3B,OAAAjB,SAAA,CAAAkB,QAAA,CAAAC,IAAA,CAAAyB,EACA,OAjBA,KAAA0B,SAAA,GAiBA,EAEA,KAAAnC,OAAA,CAAA2C,GAAA,mBACA,iBAAAlC,EACA,KAAAT,OAAA,CAAA8B,GAAA,4CACU,KAAAO,SAAA,OAAAA,SAAA,CAAAO,IAAA,CACV,KAAA5C,OAAA,CAAA8B,GAAA,qBAAAO,SAAA,CAAAO,IAAA,EACU7E,EAAAC,YAAA,EAAAwE,gBAAA3E,SAAA,CAAAuE,aAAA,CAAA3B,IACV,KAAAT,OAAA,CAAA8B,GAAA,mEAGA,EAEA/D,EAAAI,IAAA,GACA,KAAAA,IAAA,YACA,IAAA0E,EAAArC,EAAA,MACA,GAAAqC,EACA,OAAAA,CACA,CAEA,QAAAR,SAAA,CACA,OAAA1B,QAAAI,OAAA,MAAAsB,SAAA,CAOA,CANU,QAAAK,gBAAA,CACV,OAAA/B,QAAAI,OAAA,KAAA3C,KAAA,MAAAsE,gBAAA,GAKA,CAJU,SAAAH,aAAA,CAGV,OAAA5B,QAAAI,OAAA,KAAA3C,KAAA,MAAA+D,SAAA,GACA,OAHA,+CAMA,KAAA5D,WAAA,mBACA,KAAAmE,gBAAA,CACAlC,EAAA,OAAAG,QAAAI,OAAA,MAAA2B,gBAAA,EAEA,KAAAvE,IAAA,GAAA2E,IAAA,CAAA1B,EACA,GAIA,KAAA2B,IAAA,YACA,IA3FA5E,EACA2C,EACAQ,EAyFAuB,EAAArC,EAAA,MACA,GAAAqC,EACA,OAAAA,CACA,CAEA,QAAAR,SAAA,CACA,OAjGAlE,EAiGA,KAAAkE,SAAA,CA/FAf,EAAAT,EADAC,EAAA,IAAAO,YAEAP,EAAAkC,UAAA,CAAA7E,GACAmD,CAoGA,CANQ,QAAAoB,gBAAA,CACR,OAAA/B,QAAAI,OAAA,CAAAkC,SA5FAxB,CAAA,EAIA,QAHAE,EAAA,IAAAC,WAAAH,GACAyB,EAAA,MAAAvB,EAAAwB,MAAA,EAEAC,EAAA,EAAoBA,EAAAzB,EAAAwB,MAAA,CAAiBC,IACrCF,CAAA,CAAAE,EAAA,CAAAjE,OAAAkE,YAAA,CAAA1B,CAAA,CAAAyB,EAAA,EAEA,OAAAF,EAAAI,IAAA,IACA,EAoFA,KAAAZ,gBAAA,EAKA,CAJQ,SAAAH,aAAA,CAGR,OAAA5B,QAAAI,OAAA,MAAAoB,SAAA,CACA,OAHA,+CAMApE,EAAAO,QAAA,EACA,MAAAA,QAAA,YACA,YAAAyE,IAAA,GAAAD,IAAA,CAAAS,EACA,GAGA,KAAAC,IAAA,YACA,YAAAT,IAAA,GAAAD,IAAA,CAAAW,KAAAC,KAAA,CACA,EAEA,KA1MA3D,EAAAlC,SAAA,CAAAsC,MAAA,UAAAjB,CAAA,CAAAK,CAAA,EACAL,EAAAD,EAAAC,GACAK,EAAAD,EAAAC,GACA,IAAAoE,EAAA,KAAA1D,GAAA,CAAAf,EAAA,CACA,KAAAe,GAAA,CAAAf,EAAA,CAAAyE,EAAAA,EAAA,KAAApE,EAAAA,CAAA,EAGAQ,EAAAlC,SAAA,iBAAAqB,CAAA,EACA,YAAAe,GAAA,CAAAhB,EAAAC,GAAA,EAGAa,EAAAlC,SAAA,CAAA8E,GAAA,UAAAzD,CAAA,EAEA,OADAA,EAAAD,EAAAC,GACA,KAAA0E,GAAA,CAAA1E,GAAA,KAAAe,GAAA,CAAAf,EAAA,OAGAa,EAAAlC,SAAA,CAAA+F,GAAA,UAAA1E,CAAA,EACA,YAAAe,GAAA,CAAA4D,cAAA,CAAA5E,EAAAC,GACA,EAEAa,EAAAlC,SAAA,CAAAiE,GAAA,UAAA5C,CAAA,CAAAK,CAAA,EACA,KAAAU,GAAA,CAAAhB,EAAAC,GAAA,CAAAI,EAAAC,EACA,EAEAQ,EAAAlC,SAAA,CAAAqC,OAAA,UAAA4D,CAAA,CAAAC,CAAA,EACA,QAAA7E,KAAA,KAAAe,GAAA,CACA,KAAAA,GAAA,CAAA4D,cAAA,CAAA3E,IACA4E,EAAA9E,IAAA,CAAA+E,EAAA,KAAA9D,GAAA,CAAAf,EAAA,CAAAA,EAAA,KAGA,EAEAa,EAAAlC,SAAA,CAAAmG,IAAA,YACA,IAAAvE,EAAA,GAIA,OAHA,KAAAS,OAAA,UAAAX,CAAA,CAAAL,CAAA,EACAO,EAAAwE,IAAA,CAAA/E,EACA,GACAM,EAAAC,EACA,EAEAM,EAAAlC,SAAA,CAAAqG,MAAA,YACA,IAAAzE,EAAA,GAIA,OAHA,KAAAS,OAAA,UAAAX,CAAA,EACAE,EAAAwE,IAAA,CAAA1E,EACA,GACAC,EAAAC,EACA,EAEAM,EAAAlC,SAAA,CAAAsG,OAAA,YACA,IAAA1E,EAAA,GAIA,OAHA,KAAAS,OAAA,UAAAX,CAAA,CAAAL,CAAA,EACAO,EAAAwE,IAAA,EAAA/E,EAAAK,EAAA,CACA,GACAC,EAAAC,EACA,EAEA1B,EAAAE,QAAA,EACA8B,CAAAA,EAAAlC,SAAA,CAAAK,OAAAwB,QAAA,EAAAK,EAAAlC,SAAA,CAAAsG,OAAA,EAqJA,IAAAC,EAAA,+CAOA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,EAEA,IAPAC,EACAC,EAMAhE,EAAA8D,CADAA,EAAAA,GAAA,IACA9D,IAAA,CAEA,GAAA6D,aAAAD,EAAA,CACA,GAAAC,EAAA5D,QAAA,CACA,gCAEA,KAAAgE,GAAA,CAAAJ,EAAAI,GAAA,CACA,KAAAC,WAAA,CAAAL,EAAAK,WAAA,CACAJ,EAAAvE,OAAA,EACA,MAAAA,OAAA,KAAAD,EAAAuE,EAAAtE,OAAA,GAEA,KAAAwE,MAAA,CAAAF,EAAAE,MAAA,CACA,KAAAI,IAAA,CAAAN,EAAAM,IAAA,CACA,KAAAC,MAAA,CAAAP,EAAAO,MAAA,CACApE,GAAA6D,IAAA,EAAAA,EAAApC,SAAA,GACAzB,EAAA6D,EAAApC,SAAA,CACAoC,EAAA5D,QAAA,IAEA,MACA,KAAAgE,GAAA,CAAAvF,OAAAmF,EACA,CAWA,GATA,KAAAK,WAAA,CAAAJ,EAAAI,WAAA,OAAAA,WAAA,gBACAJ,CAAAA,EAAAvE,OAAA,QAAAA,OAAA,GACA,MAAAA,OAAA,KAAAD,EAAAwE,EAAAvE,OAAA,GAEA,KAAAwE,MAAA,EAhCAC,EAAAD,CADAA,EAiCAD,EAAAC,MAAA,OAAAA,MAAA,SAhCAM,WAAA,GACAV,EAAAvF,OAAA,CAAA4F,GAAA,GAAAA,EAAAD,CAAA,EAgCA,KAAAI,IAAA,CAAAL,EAAAK,IAAA,OAAAA,IAAA,OACA,KAAAC,MAAA,CAAAN,EAAAM,MAAA,OAAAA,MAAA,CACA,KAAAE,QAAA,MAEA,cAAAP,MAAA,gBAAAA,MAAA,GAAA/D,EACA,6DAEA,KAAAwB,SAAA,CAAAxB,EACA,CAMA,SAAA8C,EAAA9C,CAAA,EACA,IAAAuE,EAAA,IAAA1C,SAYA,OAXA7B,EACAwE,IAAA,GACAC,KAAA,MACAhF,OAAA,UAAAiF,CAAA,EACA,GAAAA,EAAA,CACA,IAAAD,EAAAC,EAAAD,KAAA,MACAhG,EAAAgG,EAAAtF,KAAA,GAAAwF,OAAA,YACA7F,EAAA2F,EAAA5B,IAAA,MAAA8B,OAAA,YACAJ,EAAA7E,MAAA,CAAAkF,mBAAAnG,GAAAmG,mBAAA9F,GACA,IAEAyF,CACA,CAoBA,SAAAM,EAAAC,CAAA,CAAAhB,CAAA,EACAA,GACAA,CAAAA,EAAA,IAGA,KAAA3B,IAAA,WACA,KAAA4C,MAAA,CAAAjB,KAAAzE,IAAAyE,EAAAiB,MAAA,KAAAjB,EAAAiB,MAAA,CACA,KAAAC,EAAA,MAAAD,MAAA,YAAAA,MAAA,KACA,KAAAE,UAAA,gBAAAnB,EAAAA,EAAAmB,UAAA,MACA,KAAA1F,OAAA,KAAAD,EAAAwE,EAAAvE,OAAA,EACA,KAAA0E,GAAA,CAAAH,EAAAG,GAAA,KACA,KAAAzC,SAAA,CAAAsD,EACA,CAlDAlB,EAAAxG,SAAA,CAAA8H,KAAA,YACA,WAAAtB,EAAA,MAA8B5D,KAAA,KAAAyB,SAAA,EAC9B,EAkCAF,EAAAhD,IAAA,CAAAqF,EAAAxG,SAAA,EAgBAmE,EAAAhD,IAAA,CAAAsG,EAAAzH,SAAA,EAEAyH,EAAAzH,SAAA,CAAA8H,KAAA,YACA,WAAAL,EAAA,KAAApD,SAAA,EACAsD,OAAA,KAAAA,MAAA,CACAE,WAAA,KAAAA,UAAA,CACA1F,QAAA,IAAAD,EAAA,KAAAC,OAAA,EACA0E,IAAA,KAAAA,GAAA,EAEA,EAEAY,EAAAnE,KAAA,YACA,IAAAyE,EAAA,IAAAN,EAAA,MAAuCE,OAAA,EAAAE,WAAA,KAEvC,OADAE,EAAAhD,IAAA,SACAgD,CACA,EAEA,IAAAC,EAAA,sBAEAP,EAAAQ,QAAA,UAAApB,CAAA,CAAAc,CAAA,EACA,GAAAK,KAAAA,EAAAhH,OAAA,CAAA2G,GACA,wCAGA,WAAAF,EAAA,MAA+BE,OAAAA,EAAAxF,QAAA,CAA0B+F,SAAArB,CAAA,GACzD,EAEA5G,EAAAF,YAAA,CAAAL,EAAAK,YAAA,CACA,IACA,IAAAE,EAAAF,YAAA,CACI,MAAAoI,EAAA,CACJlI,EAAAF,YAAA,UAAAqI,CAAA,CAAA/G,CAAA,EACA,KAAA+G,OAAA,CAAAA,EACA,KAAA/G,IAAA,CAAAA,EACA,IAAAiC,EAAA+E,MAAAD,EACA,MAAAE,KAAA,CAAAhF,EAAAgF,KAAA,EAEArI,EAAAF,YAAA,CAAAC,SAAA,CAAAiB,OAAAsH,MAAA,CAAAF,MAAArI,SAAA,EACAC,EAAAF,YAAA,CAAAC,SAAA,CAAAwI,WAAA,CAAAvI,EAAAF,YAAA,CAGA,SAAAD,EAAA2G,CAAA,CAAAgC,CAAA,EACA,WAAA3F,QAAA,SAAAI,CAAA,CAAAH,CAAA,EACA,IAAA2F,EAAA,IAAAlC,EAAAC,EAAAgC,GAEA,GAAAC,EAAA1B,MAAA,EAAA0B,EAAA1B,MAAA,CAAA2B,OAAA,CACA,OAAA5F,EAAA,IAAA9C,EAAAF,YAAA,yBACA,CAEA,IAAA6I,EAAA,IAAAC,eAEA,SAAAC,GAAA,CACAF,EAAAG,KAAA,EACA,CAEAH,EAAAzF,MAAA,YACA,IAxFA6F,EACA7G,EAuFAuE,EAAA,CACAiB,OAAAiB,EAAAjB,MAAA,CACAE,WAAAe,EAAAf,UAAA,CACA1F,OAAA,EA3FA6G,EA2FAJ,EAAAK,qBAAA,OA1FA9G,EAAA,IAAAD,EAIAgH,EADA3B,OAAA,qBACAF,KAAA,UAAAhF,OAAA,UAAA8G,CAAA,EACA,IAAAC,EAAAD,EAAA9B,KAAA,MACAgC,EAAAD,EAAArH,KAAA,GAAAqF,IAAA,GACA,GAAAiC,EAAA,CACA,IAAA3H,EAAA0H,EAAA3D,IAAA,MAAA2B,IAAA,GACAjF,EAAAG,MAAA,CAAA+G,EAAA3H,EACA,IAEAS,EA+EA,CACAuE,CAAAA,EAAAG,GAAA,iBAAA+B,EAAAA,EAAAU,WAAA,CAAA5C,EAAAvE,OAAA,CAAA2C,GAAA,kBACA,IAAAlC,EAAA,aAAAgG,EAAAA,EAAAb,QAAA,CAAAa,EAAAW,YAAA,CACArG,EAAA,IAAAuE,EAAA7E,EAAA8D,GACA,EAEAkC,EAAAvF,OAAA,YACAN,EAAA,oCACA,EAEA6F,EAAAY,SAAA,YACAzG,EAAA,oCACA,EAEA6F,EAAAa,OAAA,YACA1G,EAAA,IAAA9C,EAAAF,YAAA,yBACA,EAEA6I,EAAAc,IAAA,CAAAhB,EAAA/B,MAAA,CAAA+B,EAAA7B,GAAA,KAEA6B,YAAAA,EAAA5B,WAAA,CACA8B,EAAAe,eAAA,IACQ,SAAAjB,EAAA5B,WAAA,EACR8B,CAAAA,EAAAe,eAAA,KAGA,iBAAAf,GAAA1I,EAAAI,IAAA,EACAsI,CAAAA,EAAAgB,YAAA,SAGAlB,EAAAvG,OAAA,CAAAE,OAAA,UAAAX,CAAA,CAAAL,CAAA,EACAuH,EAAAiB,gBAAA,CAAAxI,EAAAK,EACA,GAEAgH,EAAA1B,MAAA,GACA0B,EAAA1B,MAAA,CAAA8C,gBAAA,SAAAhB,GAEAF,EAAAmB,kBAAA,YAEA,IAAAnB,EAAAoB,UAAA,EACAtB,EAAA1B,MAAA,CAAAiD,mBAAA,SAAAnB,EAEA,GAGAF,EAAAsB,IAAA,UAAAxB,EAAArE,SAAA,MAAAqE,EAAArE,SAAA,CACA,EACA,CAEAvE,EAAAqK,QAAA,IAEAzK,EAAAI,KAAA,GACAJ,EAAAI,KAAA,CAAAA,EACAJ,EAAAwC,OAAA,CAAAA,EACAxC,EAAA8G,OAAA,CAAAA,EACA9G,EAAA+H,QAAA,CAAAA,GAGAxH,EAAAiC,OAAA,CAAAA,EACAjC,EAAAuG,OAAA,CAAAA,EACAvG,EAAAwH,QAAA,CAAAA,EACAxH,EAAAH,KAAA,CAAAA,EAEAmB,OAAAmJ,cAAA,CAAAnK,EAAA,cAAiDyB,MAAA,IAIjD,EAAC,IAED9B,EAAAE,KAAA,CAAAuK,QAAA,IAEA,OAAAzK,EAAAE,KAAA,CAAAqK,QAAA,CAKAlK,CADAA,EAAAqK,EAAAxK,KAAA,EACA,OAAe,CAAAwK,EAAAxK,KAAA,CACfG,EAAAH,KAAa,CAAAwK,EAAAxK,KAAA,CACbG,EAAAiC,OAAe,CAAAoI,EAAApI,OAAA,CACfjC,EAAAuG,OAAe,CAAA8D,EAAA9D,OAAA,CACfvG,EAAAwH,QAAgB,CAAA6C,EAAA7C,QAAA,CAChB8C,EAAAtK,OAAA,CAAAA,WCziBA,IAAAuK,EAAA,WACA,oBAAA9K,MAAAA,KAAA,OAAAA,IAAA,CACA,oBAAA+K,QAAAA,OAAA,OAAAA,MAAA,OACA,yCAGAF,CAAAA,EAAAtK,OAAA,YACA,oBAKA,oBAAAyK,YAAAA,WAAA,OAAAA,UAAA,CAKA,IACAzJ,OAAAmJ,cAAA,CAAAnJ,OAAAjB,SAAA,eACA8E,IAAA,WAAsB,aACtB6F,aAAA,EACA,EACA,CAAG,MAAArH,EAAA,CAGH,OAAAkH,GACA,CACA,IAEA,IAAAI,WAAA,OAAAJ,GAAA,CACA,OAAAI,UACA,QAAG,CACH,OAAA3J,OAAAjB,SAAA,CAAA4K,UAAA,CAEA,2EC/BQ,GAAAC,EAAAC,CAAA,IAER,IAAAC,EAAkBC,EAAQ,KAC1BC,EAAAF,EAAAG,UAAA,EAAAH,EAAAI,OAAA,CAEA,sBAAAF,EACA,qFAGuB,SAAAG,EAAUC,CAAA,EACjC,MAAiB,GAAAR,EAAAS,CAAA,EAAO,CACxB,GAAAD,CAAA,CACAE,KAAA,cACAN,QAAAA,CACA,EACA,sFChBO,IAAMO,EAAS,CACpBC,QAAS,MACX,EAEMR,EAAU,MAAOS,GAAoC,CACzD,GAAI,CACF,GAAM,CAAEC,MAAAA,CAAAA,CAAOC,OAAAA,CAAAA,CAAQC,QAAAA,CAAAA,CAAS,CAAI,MAAMH,EAAI/F,IAAI,GAM5Cc,EAAQkF,EAAMpE,OAAO,CAAC,MAAO,KAE7BuE,EAAM,MAAMhM,MAAM,uCAAwC,CAC9DqC,QAAS,CACP,eAAgB,mBAChB4J,cAAe,CAAC,OAAO,EAAEH,EAAO,CAAC,EAEnCjF,OAAQ,OACR/D,KAAMgD,KAAKoG,SAAS,CAAC,CACnBC,MAAO,yBACPxF,MAAAA,CACF,EACF,GAEMd,EAAO,MAAMmG,EAAInG,IAAI,GACrBuG,EAAYvG,EAAKwG,IAAI,CAAC,EAAE,CAACD,SAAS,CAElC,CAAEC,KAAMC,CAAAA,CAAQ9I,MAAAA,CAAAA,CAAO,CAAG,MAAM+I,EAAAA,CAAAA,CAAAA,GAAiB,CAAC,YAAa,CACnEC,gBAAiBJ,EACjBK,qBAAsB,IACtBC,YAAaX,CACf,GAEA,GAAIvI,EAEF,OADAmJ,QAAQnJ,KAAK,CAACA,GACP,IAAImE,SAAS,QAAS,CAAEE,OAAQ,GAAI,EAC5C,CAED,OAAO,IAAIF,SAAS7B,KAAKoG,SAAS,CAACI,GAAS,CAAEzE,OAAQ,GAAI,EAC5D,CAAE,MAAOrE,EAAO,CAEd,OADAmJ,QAAQnJ,KAAK,CAACA,GACP,IAAImE,SAAS,QAAS,CAAEE,OAAQ,GAAI,EAC7C,CACF,EAEAyD,EAAeH,yDCjDHyB,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EACVC,aAAAA,CAAgB,gBCDlB,IDAOD,EaKAE,EAOAC,EAQAC,EASAC,EAIAC,EI7BAC,ECCAC,ECSAC,EAOAC,EASAC,ElB9BPC,EAA6B,SAAApH,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EACO,IAAAgM,EAAA,IACP,IAAAC,EAUA,OARAA,EADAC,IAGA,oBAAAlO,MACA,IAAAmO,IAAAX,EAAA,iCAA+E,mBAAoBxK,QAAAI,OAAA,GAAA+B,IAAA,CAAA+F,EAAAkD,CAAA,CAAAC,IAAA,CAAAnD,EAAA,UAAqBlL,KAAA,IAAAmO,EAAA,GAGxHnO,OAEA,IAAAmO,IAAAF,KAAAE,EACA,CCrBO,OAAAG,UAAA/F,MACPG,YAAAJ,CAAA,CAAA/G,EAAA,iBAAAgN,CAAA,EACA,MAAAjG,GACA,MAAA/G,IAAA,CAAAA,EACA,KAAAgN,OAAA,CAAAA,CACA,CACA,CACO,MAAAC,UAAAF,EACP5F,YAAA6F,CAAA,EACA,4EAAAA,EACA,CACA,CACO,MAAAE,UAAAH,EACP5F,YAAA6F,CAAA,EACA,qEAAAA,EACA,CACA,CACO,MAAAG,UAAAJ,EACP5F,YAAA6F,CAAA,EACA,0EAAAA,EACA,CACA,CCrBA,IAAII,EAAyB,SAAAvI,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,CAGO,OAAA4M,EACPlG,YAAA3B,CAAA,EAAuB1E,QAAAA,EAAA,EAAY,CAAA6L,YAAAA,CAAA,EAAiB,EAAI,EACxD,KAAAnH,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAA,EACA,KAAArC,KAAA,CAAqBgO,EAAYE,EACjC,CAKAW,QAAAC,CAAA,EACA,KAAAzM,OAAA,CAAA4J,aAAA,WAA+C6C,EAAM,EAMrDC,OAAAC,CAAA,CAAAC,EAAA,EAA2C,EAC3C,IAAAC,EACA,OAAeP,EAAS,+BACxB,QAGA7L,EA6CAuJ,EA/CA,IAAwBhK,QAAAA,CAAA,CAAAS,KAAAqM,CAAA,EAA8BF,EACtDG,EAAA,GAEAD,GACA,KAAAhO,OAAAjB,SAAA,CAAAgG,cAAA,CAAA7E,IAAA,CAAAgB,EAAA,kBAAAA,CAAA,IACA,oBAAA5B,MAAA0O,aAAA1O,MACA0O,aAAApO,aAGAqO,CAAA,4CACAtM,EAAAqM,GAEA,iBAAAA,GAEAC,CAAA,8BACAtM,EAAAqM,GAEA,oBAAAxK,UAAAwK,aAAAxK,SAGA7B,EAAAqM,GAIAC,CAAA,oCACAtM,EAAAgD,KAAAoG,SAAA,CAAAiD,KAGA,IAAAlH,EAAA,WAAAjI,KAAA,IAAqD,KAAA+G,GAAA,CAAS,GAAGiI,EAAa,GAC9EnI,OAAA,OAKAxE,QAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAyED,GAAA,KAAA/M,OAAA,EAAAA,GACzES,KAAAA,CACA,GAAiBwM,KAAA,KACjB,UAA8Bd,EAAmBe,EAAA,GAEjDC,EAAAvH,EAAA5F,OAAA,CAAA2C,GAAA,kBACA,GAAAwK,GAAAA,SAAAA,EACA,UAA8Bf,EAAmBxG,EAAA,CAEjD,IAAAA,EAAAH,EAAA,CACA,UAA8B4G,EAAkBzG,EAAA,CAEhD,IAAA6B,EAAA,QAAAoF,CAAAA,EAAAjH,EAAA5F,OAAA,CAAA2C,GAAA,mBAAAkK,KAAA,IAAAA,EAAAA,EAAA,cAAA3H,KAAA,KAAuI,IAAAD,IAAA,GAevI,OAZA+E,EADAvC,qBAAAA,EACA,MAAA7B,EAAApC,IAAA,GAEAiE,6BAAAA,EACA,MAAA7B,EAAAzH,IAAA,GAEAsJ,wBAAAA,EACA,MAAA7B,EAAAtH,QAAA,GAIA,MAAAsH,EAAA7C,IAAA,GAEA,CAAyBiH,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,OAAyB6I,KAAA,KAAA7I,MAAAA,CAAA,CACzB,CACA,EACA,CACA,sBCnGe,OAAAiM,EACf/G,YAAAgH,CAAA,EACA,KAAAC,kBAAA,IACA,KAAA9I,MAAA,CAAA6I,EAAA7I,MAAA,CACA,KAAAE,GAAA,CAAA2I,EAAA3I,GAAA,CACA,KAAA1E,OAAA,CAAAqN,EAAArN,OAAA,CACA,KAAAuN,MAAA,CAAAF,EAAAE,MAAA,CACA,KAAA9M,IAAA,CAAA4M,EAAA5M,IAAA,CACA,KAAA6M,kBAAA,CAAAD,EAAAC,kBAAA,CACA,KAAAzI,MAAA,CAAAwI,EAAAxI,MAAA,CACA,KAAA2I,UAAA,CAAAH,EAAAG,UAAA,CACAH,EAAA1P,KAAA,CACA,KAAAA,KAAA,CAAA0P,EAAA1P,KAAA,CAEA,oBAAAA,MACA,KAAAA,KAAA,CAAyB8P,IAGzB,KAAA9P,KAAA,CAAAA,KAEA,CAOA+P,cAAA,CAEA,OADA,KAAAJ,kBAAA,IACA,KAEAxK,KAAA6K,CAAA,CAAAC,CAAA,EAEA9N,KAAAA,IAAA,KAAAyN,MAAA,GAGA,eAAAM,QAAA,MAAArJ,MAAA,EACA,KAAAxE,OAAA,wBAAAuN,MAAA,CAGA,KAAAvN,OAAA,yBAAAuN,MAAA,EAEA,aAAA/I,MAAA,gBAAAA,MAAA,EACA,MAAAxE,OAAA,qCAIA,IAAA4L,EAAA,KAAAjO,KAAA,CACAgM,EAAAiC,EAAA,KAAAlH,GAAA,CAAA3F,QAAA,IACAyF,OAAA,KAAAA,MAAA,CACAxE,QAAA,KAAAA,OAAA,CACAS,KAAAgD,KAAAoG,SAAA,MAAApJ,IAAA,EACAoE,OAAA,KAAAA,MAAA,GACS/B,IAAA,OAAA6G,GAAA,CACT,IAAAkD,EAAAiB,EAAAC,EACA,IAAA5M,EAAA,KACA6I,EAAA,KACAgE,EAAA,KACAxI,EAAAmE,EAAAnE,MAAA,CACAE,EAAAiE,EAAAjE,UAAA,CACA,GAAAiE,EAAAlE,EAAA,EACA,iBAAAjB,MAAA,EACA,IAAA/D,EAAA,MAAAkJ,EAAA5G,IAAA,GACA,KAAAtC,IAIAuJ,EADA,kBAAAhK,OAAA,QACAS,EAEA,KAAAT,OAAA,SACA,KAAAA,OAAA,QAAA6N,QAAA,oCACApN,EAGAgD,KAAAC,KAAA,CAAAjD,GAEA,KACAwN,EAAA,OAAApB,CAAAA,EAAA,KAAA7M,OAAA,UAAA6M,KAAA,IAAAA,EAAA,OAAAA,EAAAqB,KAAA,oCACAC,EAAA,OAAAL,CAAAA,EAAAnE,EAAA3J,OAAA,CAAA2C,GAAA,oBAAAmL,KAAA,IAAAA,EAAA,OAAAA,EAAA5I,KAAA,MACA+I,GAAAE,GAAAA,EAAAhL,MAAA,IACA6K,CAAAA,EAAAI,SAAAD,CAAA,KAEA,KACA,CACA,IAAA1N,EAAA,MAAAkJ,EAAA5G,IAAA,GACA,IACA5B,EAAAsC,KAAAC,KAAA,CAAAjD,GAEAL,MAAAC,OAAA,CAAAc,IAAAwI,MAAAA,EAAAnE,MAAA,GACAwE,EAAA,GACA7I,EAAA,KACAqE,EAAA,IACAE,EAAA,KAEA,CACA,MAAA2I,EAAA,CAEA1E,MAAAA,EAAAnE,MAAA,EAAA/E,KAAAA,GACA+E,EAAA,IACAE,EAAA,cAGAvE,EAAA,CACA8E,QAAAxF,CACA,CAEA,CAMA,GALAU,GAAA,KAAAqM,UAAA,UAAAO,CAAAA,EAAA5M,MAAAA,EAAA,OAAAA,EAAAmN,OAAA,GAAAP,KAAA,IAAAA,EAAA,OAAAA,EAAAF,QAAA,8BACA1M,EAAA,KACAqE,EAAA,IACAE,EAAA,MAEAvE,GAAA,KAAAmM,kBAAA,CACA,MAAAnM,CAAA,CAEA,IACAoN,EAAA,CACApN,MAAAA,EACA6I,KAAAA,EACAgE,MAAAA,EACAxI,OAAAA,EACAE,WAAAA,CACA,EACA,OAAA6I,CACA,GAeA,OAdA,KAAAjB,kBAAA,EACA3D,CAAAA,EAAAA,EAAAsD,KAAA,MACA9L,MAAA,CACA8E,QAAA,eAA4CiH,EAAAjH,OAAA,CAAmB,EAC/DqI,QAAA,GACAE,KAAA,GACAC,KAAAvB,EAAAuB,IAAA,IACA,EACAzE,KAAA,KACAgE,MAAA,KACAxI,OAAA,EACAE,WAAA,EACA,GAAa,EAEbiE,EAAA7G,IAAA,CAAA6K,EAAAC,EACA,CACA,CC7Ie,MAAAc,UAAwCtB,EAUvDuB,OAAAC,CAAA,EAEA,IAAAC,EAAA,GACAC,EAAA,CAAAF,MAAAA,EAAAA,EAAA,KACA1J,KAAA,KACAjF,GAAA,IACA,KAAAb,IAAA,CAAA2P,IAAA,CAAAF,EACA,IAEA,MAAAE,GACAF,CAAAA,EAAA,CAAAA,CAAA,EAEAE,EAJA,EAMAzL,IAAA,KAMA,OALA,KAAAoB,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,UAAAgN,GACA,KAAA9O,OAAA,SACA,MAAAA,OAAA,cAEA,KAAAA,OAAA,iCACA,KAkBAgP,MAAAC,CAAA,EAAoBC,UAAAA,EAAA,GAAAC,WAAAA,CAAA,CAAAC,aAAAA,CAAA,EAA8C,EAAI,EACtE,IAAAlI,EAAAkI,EAAA,GAAsCA,EAAa,gBACnDC,EAAA,KAAA3K,GAAA,CAAA1G,YAAA,CAAA2E,GAAA,CAAAuE,GAEA,OADA,KAAAxC,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,CAAAoF,EAAA,GAA0CmI,EAAA,GAAmBA,EAAc,MAAQ,EAAEJ,EAAO,GAAGC,EAAA,aAA2B,EAAEC,KAAArP,IAAAqP,EAAA,GAAAA,EAAA,2BAA0E,GACtM,KAUAG,MAAAtB,CAAA,EAAmBoB,aAAAA,CAAA,EAAe,EAAI,EACtC,IAAAlI,EAAA,SAAAkI,EAAA,WAAuEA,EAAa,QAEpF,OADA,KAAA1K,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,CAAAoF,EAAA,GAA0C8G,EAAM,GAChD,KAWAuB,MAAAC,CAAA,CAAAC,CAAA,EAAsBL,aAAAA,CAAA,EAAe,EAAI,EACzC,IAAAM,EAAA,SAAAN,EAAA,YAA8EA,EAAa,SAC3FO,EAAA,SAAAP,EAAA,WAA4EA,EAAa,QAIzF,OAHA,KAAA1K,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,CAAA4N,EAAA,GAAgDF,EAAK,GAErD,KAAA9K,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,CAAA6N,EAAA,GAA+CF,EAAAD,EAAA,EAAc,GAC7D,KAOAI,YAAA/K,CAAA,EAEA,OADA,KAAAA,MAAA,CAAAA,EACA,KAQAgL,QAAA,CAEA,OADA,KAAA7P,OAAA,4CACA,KAQA8P,aAAA,CAGA,OAFA,KAAA9P,OAAA,4CACA,KAAAwN,UAAA,IACA,KAKAuC,KAAA,CAEA,OADA,KAAA/P,OAAA,mBACA,KAKAgQ,SAAA,CAEA,OADA,KAAAhQ,OAAA,+BACA,KAuBAiQ,QAAA,CAAcC,QAAAA,EAAA,GAAAC,QAAAA,EAAA,GAAAC,SAAAA,EAAA,GAAAC,QAAAA,EAAA,GAAAC,IAAAA,EAAA,GAAAC,OAAAA,EAAA,QAAqG,EAAI,EACvH,IAAAhM,EAAA,CACA2L,EAAA,eACAC,EAAA,eACAC,EAAA,gBACAC,EAAA,eACAC,EAAA,WACA,CACAE,MAAA,CAAAC,SACAnN,IAAA,MAEAoN,EAAA,KAAA1Q,OAAA,eACA,KAAAA,OAAA,sCAA+DuQ,EAAA,OAAS,EAAOG,EAAa,WAAG,EAAUnM,EAAA,CAAS,EAElH,KASAoM,UAAA,CACA,IAAA9D,EAOA,MANA,QAAAA,CAAAA,EAAA,KAAA7M,OAAA,UAAA6M,KAAA,IAAAA,EAAAA,EAAA,IAAA5H,IAAA,GAAA9B,MAAA,GACA,KAAAnD,OAAA,wBAGA,KAAAA,OAAA,sBAEA,KAOA4Q,SAAA,CACA,YAEA,CC9Le,MAAAC,UAAqCnC,EASpDoC,GAAA7B,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmD1P,EAAM,GACzD,KAQAwR,IAAA9B,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoD1P,EAAM,GAC1D,KAQAyR,GAAA/B,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmD1P,EAAM,GACzD,KAQA0R,IAAAhC,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoD1P,EAAM,GAC1D,KAQA2R,GAAAjC,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmD1P,EAAM,GACzD,KAQA4R,IAAAlC,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoD1P,EAAM,GAC1D,KAQA6R,KAAAnC,CAAA,CAAAoC,CAAA,EAEA,OADA,KAAA3M,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,QAAqDoC,EAAQ,GAC7D,KAQAC,MAAArC,CAAA,CAAAoC,CAAA,EAEA,OADA,KAAA3M,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,SAAsDoC,EAAQ,GAC9D,KAcAE,GAAAtC,CAAA,CAAA1P,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmD1P,EAAM,GACzD,KAQAiS,GAAAvC,CAAA,CAAA/K,CAAA,EACA,IAAAuN,EAAAvN,EACAjE,GAAA,IAGA,iBAAAyR,GAAA,gBAAAtS,IAAA,CAAAsS,GACA,IAA2BA,EAAE,GAE7B,GAA0BA,EAAE,GAE5BpO,IAAA,MAEA,OADA,KAAAoB,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoDwC,EAAc,IAClE,KASAE,SAAA1C,CAAA,CAAA1P,CAAA,EAcA,MAbA,iBAAAA,EAGA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuD1P,EAAM,GAE7Da,MAAAC,OAAA,CAAAd,GAEA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,KAAsD,EAAE1P,EAAA+D,IAAA,OAAiB,GAIzE,KAAAoB,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuDxL,KAAAoG,SAAA,CAAAtK,GAAsB,GAE7E,KASAqS,YAAA3C,CAAA,CAAA1P,CAAA,EAaA,MAZA,iBAAAA,EAEA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuD1P,EAAM,GAE7Da,MAAAC,OAAA,CAAAd,GAEA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,KAAsD,EAAE1P,EAAA+D,IAAA,OAAiB,GAIzE,KAAAoB,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuDxL,KAAAoG,SAAA,CAAAtK,GAAsB,GAE7E,KASAsS,QAAA5C,CAAA,CAAAM,CAAA,EAEA,OADA,KAAA7K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmDM,EAAM,GACzD,KAUAuC,SAAA7C,CAAA,CAAAM,CAAA,EAEA,OADA,KAAA7K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoDM,EAAM,GAC1D,KASAwC,QAAA9C,CAAA,CAAAM,CAAA,EAEA,OADA,KAAA7K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAmDM,EAAM,GACzD,KAUAyC,SAAA/C,CAAA,CAAAM,CAAA,EAEA,OADA,KAAA7K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoDM,EAAM,GAC1D,KAUA0C,cAAAhD,CAAA,CAAAM,CAAA,EAEA,OADA,KAAA7K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoDM,EAAM,GAC1D,KASA2C,SAAAjD,CAAA,CAAA1P,CAAA,EASA,MARA,iBAAAA,EAEA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuD1P,EAAM,GAI7D,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,KAAsD,EAAE1P,EAAA+D,IAAA,OAAiB,GAEzE,KAYA6O,WAAAlD,CAAA,CAAAzF,CAAA,EAAgCH,OAAAA,CAAA,CAAAzG,KAAAA,CAAA,EAAe,EAAI,EACnD,IAAAwP,EAAA,EACAxP,CAAA,UAAAA,EACAwP,EAAA,KAEAxP,WAAAA,EACAwP,EAAA,KAEA,cAAAxP,GACAwP,CAAAA,EAAA,KAEA,IAAAC,EAAAhJ,KAAAvJ,IAAAuJ,EAAA,OAA2DA,EAAO,GAElE,OADA,KAAA3E,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,GAAgDmD,EAAS,KAAKC,EAAW,GAAG7I,EAAM,GAClF,KASA0E,MAAA1E,CAAA,EAIA,OAHA1K,OAAAqF,OAAA,CAAAqF,GAAAtJ,OAAA,GAAA+O,EAAA1P,EAAA,IACA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,MAAuD1P,EAAM,EAC7D,GACA,KAeA+S,IAAArD,CAAA,CAAAsD,CAAA,CAAAhT,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,OAAoDsD,EAAS,GAAGhT,EAAM,GACtE,KAeAiT,GAAAC,CAAA,EAAkBrD,aAAAA,CAAA,EAAe,EAAI,EACrC,IAAAlI,EAAAkI,EAAA,GAAsCA,EAAa,UAEnD,OADA,KAAA1K,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA+G,EAAA,IAA8CuL,EAAQ,IACtD,KAeAjC,OAAAvB,CAAA,CAAAsD,CAAA,CAAAhT,CAAA,EAEA,OADA,KAAAmF,GAAA,CAAA1G,YAAA,CAAAmC,MAAA,CAAA8O,EAAA,GAAgDsD,EAAS,GAAGhT,EAAM,GAClE,KAEA,CC1Ue,MAAAmT,EACfrM,YAAA3B,CAAA,EAAuB1E,QAAAA,EAAA,EAAY,CAAAuN,OAAAA,CAAA,CAAA5P,MAAAA,CAAA,CAAkB,EACrD,KAAA+G,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAA,EACA,KAAAuN,MAAA,CAAAA,EACA,KAAA5P,KAAA,CAAAA,CACA,CAsBAgR,OAAAC,CAAA,EAAsB+D,KAAAA,EAAA,GAAA3E,MAAAA,CAAA,EAAuB,EAAI,EAGjD,IAAAa,EAAA,GACAC,EAAA,CAAAF,MAAAA,EAAAA,EAAA,KACA1J,KAAA,KACAjF,GAAA,IACA,KAAAb,IAAA,CAAA2P,IAAA,CAAAF,EACA,IAEA,MAAAE,GACAF,CAAAA,EAAA,CAAAA,CAAA,EAEAE,EAJA,EAMAzL,IAAA,KAKA,OAJA,KAAAoB,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,UAAAgN,GACAd,GACA,MAAAhO,OAAA,iBAA8CgO,EAAM,GAEpD,IAAmB6C,EAAsB,CACzCrM,OApBAmO,EAAA,aAqBAjO,IAAA,KAAAA,GAAA,CACA1E,QAAA,KAAAA,OAAA,CACAuN,OAAA,KAAAA,MAAA,CACA5P,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CAuBAoF,OAAA1O,CAAA,EAAqB8J,MAAAA,CAAA,EAAS,EAAI,EAElC,IAAA6E,EAAA,GASA,GAPA7E,GACA6E,EAAA5O,IAAA,UAAyC+J,EAAM,GAE/C,KAAAhO,OAAA,SACA6S,EAAAC,OAAA,MAAA9S,OAAA,SAEA,KAAAA,OAAA,QAAA6S,EAAAvP,IAAA,MACAlD,MAAAC,OAAA,CAAA6D,GAAA,CACA,IAAA0K,EAAA1K,EAAA6O,MAAA,EAAAC,EAAAC,IAAAD,EAAAE,MAAA,CAAApU,OAAAkF,IAAA,CAAAiP,IAAA,IACA,GAAArE,EAAAzL,MAAA,IACA,IAAAgQ,EAAA,QAAAC,IAAAxE,GAAA,CAAA3O,GAAA,QAAgFgP,EAAO,IACvF,KAAAvK,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,WAAAqR,EAAA7P,IAAA,MACA,EACA,OACA,IAAmBuN,EAAsB,CACzCrM,OAlBA,OAmBAE,IAAA,KAAAA,GAAA,CACA1E,QAAA,KAAAA,OAAA,CACAuN,OAAA,KAAAA,MAAA,CACA9M,KApBAyD,EAqBAvG,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CAkCA6F,OAAAnP,CAAA,EAAqBoP,WAAAA,CAAA,CAAAC,iBAAAA,EAAA,GAAAvF,MAAAA,CAAA,EAA+C,EAAI,EAExE,IAAA6E,EAAA,eAA8CU,EAAA,iBAAsC,qBACpFzT,KAAAA,IAAAwT,GACA,KAAA5O,GAAA,CAAA1G,YAAA,CAAA8D,GAAA,eAAAwR,GAEAtF,GACA6E,EAAA5O,IAAA,UAAyC+J,EAAM,GAE/C,KAAAhO,OAAA,SACA6S,EAAAC,OAAA,MAAA9S,OAAA,SAEA,KAAAA,OAAA,QAAA6S,EAAAvP,IAAA,MACA,IAAmBuN,EAAsB,CACzCrM,OAbA,OAcAE,IAAA,KAAAA,GAAA,CACA1E,QAAA,KAAAA,OAAA,CACAuN,OAAA,KAAAA,MAAA,CACA9M,KAbAyD,EAcAvG,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CAsBAgG,OAAAtP,CAAA,EAAqB8J,MAAAA,CAAA,EAAS,EAAI,EAElC,IAAA6E,EAAA,GASA,OAPA7E,GACA6E,EAAA5O,IAAA,UAAyC+J,EAAM,GAE/C,KAAAhO,OAAA,SACA6S,EAAAC,OAAA,MAAA9S,OAAA,SAEA,KAAAA,OAAA,QAAA6S,EAAAvP,IAAA,MACA,IAAmBuN,EAAsB,CACzCrM,OAXA,QAYAE,IAAA,KAAAA,GAAA,CACA1E,QAAA,KAAAA,OAAA,CACAuN,OAAA,KAAAA,MAAA,CACA9M,KAbAyD,EAcAvG,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CAoBAiG,OAAA,CAAazF,MAAAA,CAAA,EAAS,EAAI,EAE1B,IAAA6E,EAAA,GAQA,OAPA7E,GACA6E,EAAA5O,IAAA,UAAyC+J,EAAM,GAE/C,KAAAhO,OAAA,SACA6S,EAAAC,OAAA,MAAA9S,OAAA,SAEA,KAAAA,OAAA,QAAA6S,EAAAvP,IAAA,MACA,IAAmBuN,EAAsB,CACzCrM,OAVA,SAWAE,IAAA,KAAAA,GAAA,CACA1E,QAAA,KAAAA,OAAA,CACAuN,OAAA,KAAAA,MAAA,CACA5P,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CACA,CCpPO,ICCAkG,EAAA,CAA0B,oCAAyC,CCY3D,OAAAC,EAWftN,YAAA3B,CAAA,EAAuB1E,QAAAA,EAAA,EAAY,CAAAuN,OAAAA,CAAA,CAAA5P,MAAAA,CAAA,EAAmB,EAAI,EAC1D,KAAA+G,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAuD0G,GAAe1T,GACtE,KAAAuN,MAAA,CAAAA,EACA,KAAA5P,KAAA,CAAAA,CACA,CAMA6R,KAAAoE,CAAA,EACA,IAAAlP,EAAA,IAAAmP,IAAA,GAA+B,KAAAnP,GAAA,CAAS,GAAGkP,EAAS,GACpD,WAAmBlB,EAAqBhO,EAAA,CACxC1E,QAAAlB,OAAAkO,MAAA,IAAqC,KAAAhN,OAAA,EACrCuN,OAAA,KAAAA,MAAA,CACA5P,MAAA,KAAAA,KAAA,EAEA,CAsBAmW,IAAAC,CAAA,CAAAjI,EAAA,EAAqB,EAAI6G,KAAAA,EAAA,GAAA3E,MAAAA,CAAA,EAAuB,EAAI,MACpDxJ,EAEA/D,EADA,IAAAiE,EAAA,IAAAmP,IAAA,GAA+B,KAAAnP,GAAA,CAAS,OAAOqP,EAAG,GAElDpB,GACAnO,EAAA,OACA1F,OAAAqF,OAAA,CAAA2H,GAAA5L,OAAA,GAAAhB,EAAAK,EAAA,IACAmF,EAAA1G,YAAA,CAAAmC,MAAA,CAAAjB,EAAA,GAAiDK,EAAM,EACvD,KAGAiF,EAAA,OACA/D,EAAAqL,GAEA,IAAA9L,EAAAlB,OAAAkO,MAAA,IAAwC,KAAAhN,OAAA,EAIxC,OAHAgO,GACAhO,CAAAA,EAAA,gBAAyCgO,EAAM,GAE/C,IAAmB6C,EAAsB,CACzCrM,OAAAA,EACAE,IAAAA,EACA1E,QAAAA,EACAuN,OAAA,KAAAA,MAAA,CACA9M,KAAAA,EACA9C,MAAA,KAAAA,KAAA,CACA6P,WAAA,EACA,EACA,CACA,cE5FO,ICCMwG,EAAe,CAAK,mCAAwC,GAKzE,SAAAvJ,CAAA,EACAA,CAAA,CAAAA,EAAA,2BACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,qBACAA,CAAA,CAAAA,EAAA,kBACA,EAACA,GAAAA,CAAAA,EAAA,KAED,SAAAC,CAAA,EACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,iBACA,EAACA,GAAAA,CAAAA,EAAA,KAED,SAAAC,CAAA,EACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,2BACA,EAACA,GAAAA,CAAAA,EAAA,KAGDC,CACCA,GAAAA,CAAAA,EAAA,GAAgC,EADjC,sBAGA,SAAAC,CAAA,EACAA,EAAA,wBACAA,EAAA,YACAA,EAAA,kBACAA,EAAA,eACA,EAACA,GAAAA,CAAAA,EAAA,IC3Bc,OAAAoJ,EACf5N,YAAAvC,CAAA,CAAAoQ,CAAA,EACA,KAAApQ,QAAA,CAAAA,EACA,KAAAoQ,SAAA,CAAAA,EACA,KAAAC,KAAA,CAAArU,KAAAA,EACA,KAAAsU,KAAA,GACA,KAAAtQ,QAAA,CAAAA,EACA,KAAAoQ,SAAA,CAAAA,CACA,CACAG,OAAA,CACA,KAAAD,KAAA,GACAE,aAAA,KAAAH,KAAA,CACA,CAEAI,iBAAA,CACAD,aAAA,KAAAH,KAAA,EACA,KAAAA,KAAA,CAAAK,WAAA,KACA,KAAAJ,KAAA,MAAAA,KAAA,GACA,KAAAtQ,QAAA,EACA,EAAS,KAAAoQ,SAAA,MAAAE,KAAA,IACT,CACA,CC/Be,MAAAK,EACfpO,aAAA,CACA,KAAAqO,aAAA,EACA,CACAnR,OAAAoR,CAAA,CAAA7Q,CAAA,SACA,EAAAuC,WAAA,GAAA3H,YACAoF,EAAA,KAAA8Q,aAAA,CAAAD,IAEA,iBAAAA,EACA7Q,EAAAL,KAAAC,KAAA,CAAAiR,IAEA7Q,EAAA,GAJA,CAMA8Q,cAAA7S,CAAA,EACA,IAAAJ,EAAA,IAAAc,SAAAV,GACA8S,EAAA,IAAAC,YACA,YAAAC,gBAAA,CAAAhT,EAAAJ,EAAAkT,EACA,CACAE,iBAAAhT,CAAA,CAAAJ,CAAA,CAAAkT,CAAA,EACA,IAAAG,EAAArT,EAAAsT,QAAA,IACAC,EAAAvT,EAAAsT,QAAA,IACAE,EAAA,KAAAT,aAAA,GACAU,EAAAP,EAAAtR,MAAA,CAAAxB,EAAAL,KAAA,CAAAyT,EAAAA,EAAAH,IACAG,GAAAH,EACA,IAAAK,EAAAR,EAAAtR,MAAA,CAAAxB,EAAAL,KAAA,CAAAyT,EAAAA,EAAAD,IACAC,GAAAD,EACA,IAAAlL,EAAAvG,KAAAC,KAAA,CAAAmR,EAAAtR,MAAA,CAAAxB,EAAAL,KAAA,CAAAyT,EAAApT,EAAAF,UAAA,IACA,OAAiByT,IAAA,KAAAF,MAAAA,EAAAC,MAAAA,EAAAE,QAAAvL,CAAA,CACjB,CACA,CC9Be,MAAAwL,EASfnP,YAAAoP,CAAA,CAAAJ,CAAA,CAAAE,EAAA,EAA4C,CAAAG,EHPrC,GGOgE,EACvE,KAAAD,OAAA,CAAAA,EACA,KAAAJ,KAAA,CAAAA,EACA,KAAAE,OAAA,CAAAA,EACA,KAAAG,OAAA,CAAAA,EACA,KAAAC,IAAA,IACA,KAAAC,YAAA,CAAA9V,KAAAA,EACA,KAAAwV,GAAA,IACA,KAAAO,YAAA,MACA,KAAAC,QAAA,IACA,KAAAC,QAAA,MACA,KAAAC,WAAA,GACA,CACAC,OAAAP,CAAA,EACA,KAAAA,OAAA,CAAAA,EACA,KAAAQ,eAAA,GACA,KAAAZ,GAAA,IACA,KAAAS,QAAA,MACA,KAAAF,YAAA,MACA,KAAAF,IAAA,IACA,KAAA5N,IAAA,EACA,CACAA,MAAA,CACA,QAAAoO,YAAA,YACA,MACA,CACA,KAAAC,YAAA,GACA,KAAAT,IAAA,IACA,IAAAnQ,EAAA,KAAAiQ,OAAA,CAAAY,MAAA,CAAApS,IAAA,EACAmR,MAAA,KAAAK,OAAA,CAAAL,KAAA,CACAC,MAAA,KAAAA,KAAA,CACAE,QAAA,KAAAA,OAAA,CACAD,IAAA,KAAAA,GAAA,CACAgB,SAAA,KAAAb,OAAA,CAAAc,QAAA,EACA,GACA,iBAAA/Q,GACA,MAAAwQ,WAAA,IAEA,CACAQ,cAAAjB,CAAA,EACA,KAAAA,OAAA,CAAAzW,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAqD,KAAAuI,OAAA,EAAAA,EACrD,CACAkB,QAAAjR,CAAA,CAAA1B,CAAA,EACA,IAAA+I,EAKA,OAJA,KAAAsJ,YAAA,CAAA3Q,IACA1B,EAAA,OAAA+I,CAAAA,EAAA,KAAAgJ,YAAA,GAAAhJ,KAAA,IAAAA,EAAA,OAAAA,EAAAjH,QAAA,EAEA,KAAAkQ,QAAA,CAAA7R,IAAA,EAA6BuB,OAAAA,EAAA1B,SAAAA,CAAA,GAC7B,KAEAsS,cAAA,CACA,QAAAR,YAAA,CACA,MACA,CACA,KAAAN,GAAA,MAAAG,OAAA,CAAAY,MAAA,CAAAK,QAAA,GACA,KAAAX,QAAA,MAAAN,OAAA,CAAAkB,eAAA,MAAArB,GAAA,EACA,IAAAxR,EAAA,IACA,KAAAoS,eAAA,GACA,KAAAU,cAAA,GACA,KAAAf,YAAA,CAAAN,EACA,KAAAsB,aAAA,CAAAtB,EACA,EACA,KAAAE,OAAA,CAAAqB,GAAA,MAAAf,QAAA,IAA0CjS,GAC1C,KAAA8R,YAAA,CAAApB,WAAA,KACA,KAAAuC,OAAA,cACA,EAAS,KAAArB,OAAA,CACT,CACAqB,QAAAvR,CAAA,CAAAI,CAAA,EACA,KAAAmQ,QAAA,EACA,KAAAN,OAAA,CAAAuB,QAAA,MAAAjB,QAAA,EAAmDvQ,OAAAA,EAAAI,SAAAA,CAAA,EACnD,CACAqR,SAAA,CACA,KAAAf,eAAA,GACA,KAAAU,cAAA,EACA,CACAV,iBAAA,CACA,KAAAH,QAAA,EAGA,KAAAN,OAAA,CAAAyB,IAAA,MAAAnB,QAAA,IACA,CACAa,gBAAA,CACAtC,aAAA,KAAAsB,YAAA,EACA,KAAAA,YAAA,CAAA9V,KAAAA,CACA,CACA+W,cAAA,CAAoBrR,OAAAA,CAAA,CAAAI,SAAAA,CAAA,CAAmB,EACvC,KAAAkQ,QAAA,CACAtF,MAAA,IAAA2G,EAAA3R,MAAA,GAAAA,GACAtF,OAAA,IAAAiX,EAAArT,QAAA,CAAA8B,GACA,CACAuQ,aAAA3Q,CAAA,EACA,YAAAqQ,YAAA,OAAAA,YAAA,CAAArQ,MAAA,GAAAA,CACA,CACA,EClGA,SAAAsF,CAAA,EACAA,EAAA,YACAA,EAAA,YACAA,EAAA,aACA,EAACA,GAAAA,CAAAA,EAAA,IACc,OAAAsM,EAQf/Q,YAAAoP,CAAA,CAAAvM,CAAA,EACA,KAAAuM,OAAA,CAAAA,EACA,KAAA4B,KAAA,IACA,KAAAC,YAAA,IACA,KAAAC,OAAA,MACA,KAAAC,MAAA,EACAC,OAAA,OACAC,QAAA,OACAC,OAAA,MACA,EACA,IAAAC,EAAA,CAAA1O,MAAAA,EAAA,OAAAA,EAAA0O,MAAA,IACAP,MAAA,iBACAQ,KAAA,eACA,EACA,KAAApC,OAAA,CAAAqB,GAAA,CAAAc,EAAAP,KAAA,IAAyC,IACzC,IAAoBI,OAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,OAAAA,CAAA,EAA0B,KAAAH,MAAA,CAC9C,KAAAD,OAAA,MAAA9B,OAAA,CAAAc,QAAA,GACA,KAAAc,KAAA,CAAAD,EAAAU,SAAA,MAAAT,KAAA,CAAAU,EAAAN,EAAAC,GACA,KAAAJ,YAAA,CAAApX,OAAA,KACA,KAAAmX,KAAA,CAAAD,EAAAY,QAAA,MAAAX,KAAA,CAAAQ,EAAAJ,EAAAC,EACA,GACA,KAAAJ,YAAA,IACAK,GACA,GACA,KAAAlC,OAAA,CAAAqB,GAAA,CAAAc,EAAAC,IAAA,IAAwC,IACxC,IAAoBJ,OAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,OAAAA,CAAA,EAA0B,KAAAH,MAAA,CAC9C,KAAAS,kBAAA,GACA,KAAAX,YAAA,CAAArT,IAAA,CAAA4T,IAGA,KAAAR,KAAA,CAAAD,EAAAY,QAAA,MAAAX,KAAA,CAAAQ,EAAAJ,EAAAC,GACAC,IAEA,GACA,KAAAF,MAAA,EAAAvQ,EAAAgR,EAAAC,IAAA,CACA,KAAA1C,OAAA,CAAAuB,QAAA,aACA3B,MAAA,OACAnO,IAAAA,EACAgR,iBAAAA,EACAC,aAAAA,CACA,EACA,GACA,KAAAT,OAAA,EAAAxQ,EAAAgR,EAAAE,IAAA,CACA,KAAA3C,OAAA,CAAAuB,QAAA,aACA3B,MAAA,QACAnO,IAAAA,EACAgR,iBAAAA,EACAE,cAAAA,CACA,EACA,GACA,KAAAT,MAAA,MACA,KAAAlC,OAAA,CAAAuB,QAAA,aAAgD3B,MAAA,QAChD,EACA,CAWA,OAAAyC,UAAAO,CAAA,CAAAN,CAAA,CAAAN,CAAA,CAAAC,CAAA,EACA,IAAAL,EAAA,KAAAiB,SAAA,CAAAD,GACAE,EAAA,KAAAC,cAAA,CAAAT,GACAU,EAAA,GACAC,EAAA,GAwBA,OAvBA,KAAAzY,GAAA,CAAAoX,EAAA,CAAAnQ,EAAAyR,IAAA,CACAJ,CAAA,CAAArR,EAAA,EACAwR,CAAAA,CAAA,CAAAxR,EAAA,CAAAyR,CAAA,CAEA,GACA,KAAA1Y,GAAA,CAAAsY,EAAA,CAAArR,EAAAiR,IAAA,CACA,IAAAD,EAAAb,CAAA,CAAAnQ,EAAA,CACA,GAAAgR,EAAA,CACA,IAAAU,EAAAT,EAAAlY,GAAA,IAAA4Y,EAAAC,YAAA,EACAC,EAAAb,EAAAjY,GAAA,IAAA4Y,EAAAC,YAAA,EACAE,EAAAb,EAAA3H,MAAA,IAAAuI,EAAAA,EAAAla,OAAA,CAAAga,EAAAC,YAAA,GACAV,EAAAF,EAAA1H,MAAA,IAAAoI,EAAAA,EAAA/Z,OAAA,CAAAga,EAAAC,YAAA,EACAE,CAAAA,EAAA7V,MAAA,IACAsV,CAAAA,CAAA,CAAAvR,EAAA,CAAA8R,CAAA,EAEAZ,EAAAjV,MAAA,IACAuV,CAAAA,CAAA,CAAAxR,EAAA,CAAAkR,CAAA,CAEA,MAEAK,CAAA,CAAAvR,EAAA,CAAAiR,CACA,GAEA,KAAAH,QAAA,CAAAX,EAAA,CAAsCoB,MAAAA,EAAAC,OAAAA,CAAA,EAAejB,EAAAC,EACrD,CAWA,OAAAM,SAAAX,CAAA,CAAAQ,CAAA,CAAAJ,CAAA,CAAAC,CAAA,EACA,IAAgBe,MAAAA,CAAA,CAAAC,OAAAA,CAAA,EAAgB,CAChCD,MAAA,KAAAD,cAAA,CAAAX,EAAAY,KAAA,EACAC,OAAA,KAAAF,cAAA,CAAAX,EAAAa,MAAA,CACA,EA6BA,OA5BAjB,GACAA,CAAAA,EAAA,QAEAC,GACAA,CAAAA,EAAA,QAEA,KAAAzX,GAAA,CAAAwY,EAAA,CAAAvR,EAAAiR,IAAA,CACA,IAAAtL,EACA,IAAAqL,EAAA,OAAArL,CAAAA,EAAAwK,CAAA,CAAAnQ,EAAA,GAAA2F,KAAA,IAAAA,EAAAA,EAAA,GAEA,GADAwK,CAAA,CAAAnQ,EAAA,MAAAoR,SAAA,CAAAH,GACAD,EAAA/U,MAAA,IACA,IAAA8V,EAAA5B,CAAA,CAAAnQ,EAAA,CAAAjH,GAAA,IAAA4Y,EAAAC,YAAA,EACAI,EAAAhB,EAAA1H,MAAA,IAAAyI,EAAAA,EAAApa,OAAA,CAAAga,EAAAC,YAAA,GACAzB,CAAA,CAAAnQ,EAAA,CAAA4L,OAAA,IAAAoG,EACA,GACAhS,EAAAgR,EAAAC,EACA,GACA,KAAAlY,GAAA,CAAAyY,EAAA,CAAAxR,EAAAkR,IAAA,CACA,IAAAF,EAAAb,CAAA,CAAAnQ,EAAA,CACA,IAAAgR,EACA,OACA,IAAAiB,EAAAf,EAAAnY,GAAA,IAAA4Y,EAAAC,YAAA,EACAZ,EAAAA,EAAA1H,MAAA,IAAA2I,EAAAA,EAAAta,OAAA,CAAAga,EAAAC,YAAA,GACAzB,CAAA,CAAAnQ,EAAA,CAAAgR,EACAR,EAAAxQ,EAAAgR,EAAAE,GACA,IAAAF,EAAA/U,MAAA,EACA,OAAAkU,CAAA,CAAAnQ,EAAA,GAEAmQ,CACA,CAEA,OAAApX,IAAArB,CAAA,CAAAwa,CAAA,EACA,OAAAta,OAAAyB,mBAAA,CAAA3B,GAAAqB,GAAA,IAAAmZ,EAAAlS,EAAAtI,CAAA,CAAAsI,EAAA,EACA,CAwBA,OAAAsR,eAAAnB,CAAA,EAEA,OAAAvY,OAAAyB,mBAAA,CADA8W,EAAA,KAAAiB,SAAA,CAAAjB,IACAtE,MAAA,EAAAgF,EAAA7Q,IAAA,CACA,IAAAyR,EAAAtB,CAAA,CAAAnQ,EAAA,CAYA,MAXA,UAAAyR,EACAZ,CAAA,CAAA7Q,EAAA,CAAAyR,EAAAU,KAAA,CAAApZ,GAAA,KACAqZ,EAAA,aAAAA,EAAA,QACA,OAAAA,EAAA,QACA,OAAAA,EAAA,aACAA,IAIAvB,CAAA,CAAA7Q,EAAA,CAAAyR,EAEAZ,CACA,EAAS,GACT,CAEA,OAAAO,UAAA1Z,CAAA,EACA,OAAA6E,KAAAC,KAAA,CAAAD,KAAAoG,SAAA,CAAAjL,GACA,CAEA6Y,OAAA3T,CAAA,EACA,KAAA0T,MAAA,CAAAC,MAAA,CAAA3T,CACA,CAEA4T,QAAA5T,CAAA,EACA,KAAA0T,MAAA,CAAAE,OAAA,CAAA5T,CACA,CAEA6T,OAAA7T,CAAA,EACA,KAAA0T,MAAA,CAAAG,MAAA,CAAA7T,CACA,CAEAmU,oBAAA,CACA,YAAAV,OAAA,OAAAA,OAAA,QAAA9B,OAAA,CAAAc,QAAA,EACA,CACA,ECxNA,SAAAxL,CAAA,EACAA,EAAA,kBACAA,EAAA,YACAA,EAAA,YACAA,EAAA,sBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,YACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,cACAA,EAAA,cACAA,EAAA,kBACAA,EAAA,UACAA,EAAA,kBACAA,EAAA,YACAA,EAAA,YACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,qBACA,EAACA,GAAAA,CAAAA,EAAA,KAaM,IAAAwO,EAAA,CAAA3K,EAAA4K,EAAAjV,EAAA,EAAwD,IAC/D,IAAAsI,EACA,IAAA4M,EAAA,OAAA5M,CAAAA,EAAAtI,EAAAkV,SAAA,GAAA5M,KAAA,IAAAA,EAAAA,EAAA,GACA,OAAA/N,OAAAkF,IAAA,CAAAwV,GAAAzG,MAAA,EAAAC,EAAA0G,KACA1G,CAAA,CAAA0G,EAAA,CAAAC,EAAAD,EAAA9K,EAAA4K,EAAAC,GACAzG,GACK,GACL,EAeO2G,EAAA,CAAAC,EAAAhL,EAAA4K,EAAAC,IAAA,CACP,IAAAxK,EAAAL,EAAAiL,IAAA,IAAA5G,EAAA/T,IAAA,GAAA0a,GACAE,EAAA7K,MAAAA,EAAA,OAAAA,EAAArM,IAAA,CACArD,EAAAia,CAAA,CAAAI,EAAA,QACA,IAAAH,EAAA5L,QAAA,CAAAiM,GACAC,EAAAD,EAAAva,GAEAya,EAAAza,EADA,EAgBOwa,EAAA,CAAAnX,EAAArD,IAAA,CAEP,GAAAqD,MAAAA,EAAAqX,MAAA,KACA,IAAAC,EAAAtX,EAAAlB,KAAA,GAAAkB,EAAAO,MAAA,EACA,OAAAgX,EAAA5a,EAAA2a,EACA,QAEAtX,GACA,KAAAmI,EAAAqP,IAAA,CACA,OAAAC,EAAA9a,EACA,MAAAwL,EAAAuP,MAAA,CACA,KAAAvP,EAAAwP,MAAA,CACA,KAAAxP,EAAAyP,IAAA,CACA,KAAAzP,EAAA0P,IAAA,CACA,KAAA1P,EAAA2P,IAAA,CACA,KAAA3P,EAAA4P,OAAA,CACA,KAAA5P,EAAA6P,GAAA,CACA,OAAAC,EAAAtb,EACA,MAAAwL,EAAAvH,IAAA,CACA,KAAAuH,EAAA+P,KAAA,CACA,OAAAC,EAAAxb,EACA,MAAAwL,EAAAiQ,SAAA,CACA,OAAAC,EAAA1b,EACA,MAAAwL,EAAAmQ,OAAA,CACA,KAAAnQ,EAAAoQ,IAAA,CACA,KAAApQ,EAAAqQ,SAAA,CACA,KAAArQ,EAAAsQ,SAAA,CACA,KAAAtQ,EAAAuQ,SAAA,CACA,KAAAvQ,EAAAwQ,KAAA,CACA,KAAAxQ,EAAAyQ,OAAA,CACA,KAAAzQ,EAAAhI,IAAA,CACA,KAAAgI,EAAA0Q,IAAA,CACA,KAAA1Q,EAAA2Q,WAAA,CACA,KAAA3Q,EAAA4Q,MAAA,CACA,KAAA5Q,EAAA6Q,OAAA,CACA,KAAA7Q,EAAA8Q,SAAA,CAEA,QADA,OAAA7B,EAAAza,EAIA,CACA,EACAya,EAAA,GACAza,EAEO8a,EAAA,IACP,OAAA9a,GACA,QACA,QACA,SACA,QACA,SACA,OAAAA,CACA,CACA,EACOsb,EAAA,IACP,oBAAAtb,EAAA,CACA,IAAAuc,EAAAC,WAAAxc,GACA,IAAAyc,OAAAC,KAAA,CAAAH,GACA,OAAAA,CACA,CACA,OACAvc,CACA,EACOwb,EAAA,IACP,oBAAAxb,EACA,IACA,OAAAkE,KAAAC,KAAA,CAAAnE,EACA,CACA,MAAA4B,EAAA,CACAmJ,QAAA4R,GAAA,sBAA6C/a,EAAM,EAEnD,CACA,OACA5B,CACA,EAWO4a,EAAA,CAAA5a,EAAAqD,IAAA,CACP,oBAAArD,EACA,OAAAA,CACA,CACA,IAAA4c,EAAA5c,EAAA4D,MAAA,GACAiZ,EAAA7c,CAAA,CAAA4c,EAAA,CACAE,EAAA9c,CAAA,IAEA,GAAA8c,MAAAA,GAAwBD,MAAAA,EAAsB,KAC9CE,EACA,IAAAC,EAAAhd,EAAAmC,KAAA,GAAAya,GAEA,IACAG,EAAA7Y,KAAAC,KAAA,KAAA6Y,EAAA,IACA,CACA,MAAAC,EAAA,CAEAF,EAAAC,EAAAA,EAAArX,KAAA,SAEA,OAAAoX,EAAArc,GAAA,IAAA8Z,EAAAnX,EAAA6Z,GACA,QACAld,CACA,EAQO0b,EAAA,GACP,iBAAA1b,EACAA,EAAA6F,OAAA,UAEA7F,CADA,CC/MA,IAAImd,EAAyB,SAAA3Y,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,GAOA,SAAAqL,CAAA,EACAA,EAAA,QACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACA,EAACA,GAAAA,CAAAA,EAAA,KAED,SAAAC,CAAA,EACAA,EAAA,sBACAA,EAAA,oBAIAA,EAAA,mCACA,EAACA,GAAAA,CAAAA,EAAA,KAED,SAAAC,CAAA,EACAA,EAAA,wBACAA,EAAA,sBACAA,EAAA,gBACAA,EAAA,6BACA,EAACA,GAAAA,CAAAA,EAAA,IAMc,OAAAyR,EACftW,YAEA+O,CAAA,CAAAwH,EAAA,CAAsBvT,OAAA,GAAY,CAAAgN,CAAA,EAClC,KAAAjB,KAAA,CAAAA,EACA,KAAAwH,MAAA,CAAAA,EACA,KAAAvG,MAAA,CAAAA,EACA,KAAAwG,QAAA,IACA,KAAAxF,KAAA,CAAqB3M,EAAAoS,MAAqB,CAC1C,KAAAC,UAAA,IACA,KAAAC,UAAA,IACA,KAAAJ,MAAA,CAAAvT,MAAA,CAAAvK,OAAAkO,MAAA,EACAiQ,UAAA,CAAyBC,IAAA,GAAA3f,KAAA,IACzB+b,SAAA,CAAwBpS,IAAA,GACxB,EAAS0V,EAAAvT,MAAA,EACT,KAAAqM,OAAA,MAAAW,MAAA,CAAAX,OAAA,CACA,KAAAyH,QAAA,KAA4B3H,EAAI,KAAO7K,EAAArH,IAAmB,MAAAsZ,MAAA,MAAAlH,OAAA,EAC1D,KAAA0H,WAAA,KAA+BnJ,EAAK,SAAAoJ,qBAAA,QAAAhH,MAAA,CAAAiH,gBAAA,EACpC,KAAAH,QAAA,CAAA1G,OAAA,WACA,KAAAY,KAAA,CAAyB3M,EAAA6S,MAAqB,CAC9C,KAAAH,WAAA,CAAA/I,KAAA,GACA,KAAA2I,UAAA,CAAA9c,OAAA,IAAAsd,EAAAzV,IAAA,IACA,KAAAiV,UAAA,MAEA,KAAAS,QAAA,MACA,KAAAL,WAAA,CAAA/I,KAAA,GACA,KAAAgC,MAAA,CAAA6F,GAAA,oBAAgD,KAAA9G,KAAA,EAAY,EAAE,KAAAmB,QAAA,GAAgB,GAC9E,KAAAc,KAAA,CAAyB3M,EAAAoS,MAAqB,CAC9C,KAAAzG,MAAA,CAAAqH,OAAA,MACA,GACA,KAAAC,QAAA,KACA,KAAAC,UAAA,SAAAC,SAAA,KAGA,KAAAxH,MAAA,CAAA6F,GAAA,oBAAgD,KAAA9G,KAAA,CAAW,EAAA0I,GAC3D,KAAAzG,KAAA,CAAyB3M,EAAAqT,OAAsB,CAC/C,KAAAX,WAAA,CAAA7I,eAAA,GACA,GACA,KAAA4I,QAAA,CAAA1G,OAAA,gBACA,KAAAuH,UAAA,KAGA,KAAA3H,MAAA,CAAA6F,GAAA,sBAAkD,KAAA9G,KAAA,CAAW,OAAA+H,QAAA,CAAAzH,OAAA,EAC7D,KAAA2B,KAAA,CAAyB3M,EAAAqT,OAAsB,CAC/C,KAAAX,WAAA,CAAA7I,eAAA,GACA,GACA,KAAAuC,GAAA,CAAiBnM,EAAAsT,KAAoB,IAAI,CAAA1I,EAAAD,IAAA,CACzC,KAAA0B,QAAA,MAAAL,eAAA,CAAArB,GAAAC,EACA,GACA,KAAA+D,QAAA,KAA4BlC,EAAgB,KAC5C,CAEA8G,UAAApa,CAAA,CAAA4R,EAAA,KAAAA,OAAA,EACA,IAAA7I,EAAAiB,EACA,QAAAiP,UAAA,CACA,6GAGA,IAAoB1T,OAAA,CAAU4T,UAAAA,CAAA,CAAA3D,SAAAA,CAAA,CAAqB,EAAI,KAAAsD,MAAA,CACvD,KAAAe,QAAA,IAAA7Z,GAAAA,EAAA,gBAAAzF,IACA,KAAAof,QAAA,KAAA3Z,GAAAA,EAAA,WACA,IAAAqa,EAAA,GACA9U,EAAA,CACA4T,UAAAA,EACA3D,SAAAA,EACA8E,iBAAA,OAAAtQ,CAAAA,EAAA,OAAAjB,CAAAA,EAAA,KAAAgQ,QAAA,CAAAuB,gBAAA,GAAAvR,KAAA,IAAAA,EAAA,OAAAA,EAAA5M,GAAA,IAAAoe,EAAA7N,MAAA,IAAA1C,KAAA,IAAAA,EAAAA,EAAA,GAEA,MAAAuI,MAAA,CAAAiI,WAAA,EACAH,CAAAA,EAAAI,YAAA,MAAAlI,MAAA,CAAAiI,WAAA,EAEA,KAAAE,iBAAA,CAAA1f,OAAAkO,MAAA,EAAmD3D,OAAAA,CAAA,EAAQ8U,IAC3D,KAAApB,UAAA,IACA,KAAA0B,OAAA,CAAA/I,GACA,KAAAyH,QAAA,CACA1G,OAAA,QAAkC2H,iBAAAM,CAAA,CAA0C,IAC5E,IAAA7R,EAGA,GAFA,KAAAwJ,MAAA,CAAAiI,WAAA,EACA,KAAAjI,MAAA,CAAA7J,OAAA,MAAA6J,MAAA,CAAAiI,WAAA,EACAI,KAAA5e,IAAA4e,EAAA,CACA5a,GAAAA,EAAA,cACA,MACA,CA0BA,CAxBA,IAAA6a,EAAA,KAAA9B,QAAA,CAAAuB,gBAAA,CACAQ,EAAA,OAAA/R,CAAAA,EAAA8R,MAAAA,EAAA,OAAAA,EAAAxb,MAAA,GAAA0J,KAAA,IAAAA,EAAAA,EAAA,EACAgS,EAAA,GACA,QAAAzb,EAAA,EAAoCA,EAAAwb,EAAiBxb,IAAA,CACrD,IAAA0b,EAAAH,CAAA,CAAAvb,EAAA,CACA,CAAgCoN,OAAA,CAAU6E,MAAAA,CAAA,CAAA9H,OAAAA,CAAA,CAAAwR,MAAAA,CAAA,CAAAvO,OAAAA,CAAA,CAA8B,EAAIsO,EAC5EE,EAAAN,GAAAA,CAAA,CAAAtb,EAAA,CACA,GAAA4b,GACAA,EAAA3J,KAAA,GAAAA,GACA2J,EAAAzR,MAAA,GAAAA,GACAyR,EAAAD,KAAA,GAAAA,GACAC,EAAAxO,MAAA,GAAAA,EACAqO,EAAA5a,IAAA,CAAAnF,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAmF8R,GAAA,CAA4BG,GAAAD,EAAAC,EAAA,QAE/G,CACA,KAAAC,WAAA,GACApb,GACAA,EAAA,2FACA,MACA,EAEA,KAAA+Y,QAAA,CAAAuB,gBAAA,CAAAS,EACA/a,GAAAA,EAAA,cACA,MACA,CACA,GACA2S,OAAA,aACA3S,GACAA,EAAA,sBAAAL,KAAAoG,SAAA,CAAA/K,OAAAoF,MAAA,CAAA/C,GAAAmC,IAAA,kBAEA,GACAmT,OAAA,gBACA3S,GAAAA,EAAA,YAEA,EACA,CACA,YAEAqb,eAAA,CACA,YAAA7F,QAAA,CAAAjC,KAAA,CAEA+H,MAAA7J,CAAA,CAAArM,EAAA,EAA4B,EAC5B,OAAewT,EAAS,+BACxB,kBAAA3U,IAAA,EACAnF,KAAA,WACAyS,MAAA,QACAE,QAAAA,CACA,EAAarM,EAAAwM,OAAA,OAAAA,OAAA,CACb,EACA,CACA2J,QAAAnW,EAAA,EAAqB,EACrB,OAAewT,EAAS,+BACxB,kBAAA3U,IAAA,EACAnF,KAAA,WACAyS,MAAA,SACA,EAAanM,EACb,EACA,CACAoW,GAAA1c,CAAA,CAAA4N,CAAA,CAAA1M,CAAA,EACA,YAAAgT,GAAA,CAAAlU,EAAA4N,EAAA1M,EACA,CACAiE,KAAAwN,CAAA,CAAArM,EAAA,EAA2B,EAC3B,WAAAvI,QAAA,IACA,IAAAkM,EAAAiB,EAAAC,EACA,IAAA9J,EAAA,KAAAsb,KAAA,CAAAhK,EAAA3S,IAAA,CAAA2S,EAAArM,EAAAwM,OAAA,OAAAA,OAAA,CACAzR,CAAAA,EAAA+R,WAAA,EACAjV,EAAA,gBAEA,cAAAwU,EAAA3S,IAAA,EACA,QAAAmL,CAAAA,EAAA,OAAAD,CAAAA,EAAA,OAAAjB,CAAAA,EAAA,KAAA+P,MAAA,GAAA/P,KAAA,IAAAA,EAAA,OAAAA,EAAAxD,MAAA,GAAAyE,KAAA,IAAAA,EAAA,OAAAA,EAAAmP,SAAA,GAAAlP,KAAA,IAAAA,EAAA,OAAAA,EAAAmP,GAAA,GACAnc,EAAA,MAEAkD,EAAAwS,OAAA,UAAA1V,EAAA,OACAkD,EAAAwS,OAAA,eAAA1V,EAAA,aACA,EACA,CACAyd,kBAAAjJ,CAAA,EACA,KAAA4H,QAAA,CAAA3G,aAAA,CAAAjB,EACA,CAUA2J,YAAAxJ,EAAA,KAAAA,OAAA,EACA,KAAA2B,KAAA,CAAqB3M,EAAA8U,OAAsB,CAC3C,IAAAC,EAAA,KACA,KAAApJ,MAAA,CAAA6F,GAAA,oBAAgD,KAAA9G,KAAA,CAAW,GAC3D,KAAA4B,QAAA,CAA0BrM,EAAA+U,KAAoB,cAAAnJ,QAAA,GAC9C,EAIA,OAHA,KAAA6G,WAAA,CAAA/I,KAAA,GAEA,KAAA8I,QAAA,CAAAlG,OAAA,GACA,IAAAtW,QAAA,IACA,IAAAgf,EAAA,IAAkCnK,EAAI,KAAO7K,EAAAiV,KAAoB,IAAIlK,GACrEiK,EACAlJ,OAAA,WACAgJ,IACA1e,EAAA,KACA,GACA0V,OAAA,gBACAgJ,IACA1e,EAAA,YACA,GACA0V,OAAA,cACA1V,EAAA,QACA,GACA4e,EAAA5X,IAAA,GACA,KAAA8X,QAAA,IACAF,EAAA5I,OAAA,SAEA,EACA,CAEAwI,MAAAlK,CAAA,CAAAE,CAAA,CAAAG,EAAA,KAAAA,OAAA,EACA,SAAAqH,UAAA,CACA,uBAAoC1H,EAAM,QAAQ,KAAAD,KAAA,CAAW,iEAE7D,IAAAoI,EAAA,IAA4BhI,EAAI,KAAAH,EAAAE,EAAAG,GAQhC,OAPA,KAAAmK,QAAA,GACArC,EAAAzV,IAAA,IAGAyV,EAAApH,YAAA,GACA,KAAA4G,UAAA,CAAA/Y,IAAA,CAAAuZ,IAEAA,CACA,CASAsC,WAAAC,CAAA,CAAAxK,CAAA,CAAAyK,CAAA,EACA,OAAAzK,CACA,CAEA0K,UAAA7K,CAAA,EACA,YAAAA,KAAA,GAAAA,CACA,CAEAmB,UAAA,CACA,YAAA4G,QAAA,CAAA7H,GAAA,CAGA0B,SAAApU,CAAA,CAAA2S,CAAA,CAAAD,CAAA,EACA,IAAAzI,EAAAiB,EACA,IAAAoS,EAAAtd,EAAAud,iBAAA,GACA,CAAgBT,MAAAA,CAAA,CAAAve,MAAAA,CAAA,CAAAye,MAAAA,CAAA,CAAAtc,KAAAA,CAAA,EAA8BqH,EAE9C,GAAA2K,GAAAsC,CADA8H,EAAAve,EAAAye,EAAAtc,EAAA,CACAzE,OAAA,CAAAqhB,IAAA,GAAA5K,IAAA,KAAAiB,QAAA,GACA,MACA,CACA,IAAA6J,EAAA,KAAAN,UAAA,CAAAI,EAAA3K,EAAAD,GACA,GAAAC,GAAA,CAAA6K,EACA,mFAEA,6BAAAvS,QAAA,CAAAqS,GACA,OAAArT,CAAAA,EAAA,KAAAgQ,QAAA,CAAAuB,gBAAA,GAAAvR,KAAA,IAAAA,GAAAA,EAAA2D,MAAA,KACA,IAAA3D,EAAAiB,EAAAC,EACA,cAAAlB,CAAAA,EAAAb,EAAAwE,MAAA,GAAA3D,KAAA,IAAAA,EAAA,OAAAA,EAAAwI,KAAA,SACA,QAAAtH,CAAAA,EAAA,OAAAD,CAAAA,EAAA9B,EAAAwE,MAAA,GAAA1C,KAAA,IAAAA,EAAA,OAAAA,EAAAuH,KAAA,GAAAtH,KAAA,IAAAA,EAAA,OAAAA,EAAAoS,iBAAA,MAAAD,CACA,GAAajgB,GAAA,IAAA+L,EAAAlI,QAAA,CAAAsc,EAAA9K,IAGb,OAAAxH,CAAAA,EAAA,KAAA+O,QAAA,CAAAqD,EAAA,GAAApS,KAAA,IAAAA,GAAAA,EAAA0C,MAAA,KACA,IAAA3D,EAAAiB,EAAAC,EAAAM,EAAAgS,EAAAC,EACA,gDAAAzS,QAAA,CAAAqS,GAiBA,OAAAlU,EAAApJ,IAAA,CAAAud,iBAAA,KAAAD,CACA,CAjBA,UAAAlU,EAAA,CACA,IAAAuU,EAAAvU,EAAAiT,EAAA,CACAuB,EAAA,OAAA3T,CAAAA,EAAAb,EAAAwE,MAAA,GAAA3D,KAAA,IAAAA,EAAA,OAAAA,EAAAwI,KAAA,CACA,OAAAkL,GACA,QAAAzS,CAAAA,EAAAyH,EAAAkL,GAAA,GAAA3S,KAAA,IAAAA,EAAA,OAAAA,EAAAD,QAAA,CAAA0S,EAAA,GACAC,CAAAA,MAAAA,GACA,CAAAA,MAAAA,EAAA,OAAAA,EAAAL,iBAAA,MACA,QAAApS,CAAAA,EAAAwH,EAAAvL,IAAA,GAAA+D,KAAA,IAAAA,EAAA,OAAAA,EAAAnL,IAAA,CAAAud,iBAAA,IACA,CAKA,CAHA,IAAAK,EAAA,OAAAH,CAAAA,EAAA,OAAAhS,CAAAA,EAAArC,MAAAA,EAAA,OAAAA,EAAAwE,MAAA,GAAAnC,KAAA,IAAAA,EAAA,OAAAA,EAAAgH,KAAA,GAAAgL,KAAA,IAAAA,EAAA,OAAAA,EAAAF,iBAAA,GACA,MAAAK,MAAAA,GACAA,IAAA,QAAAF,CAAAA,EAAA/K,MAAAA,EAAA,OAAAA,EAAAF,KAAA,GAAAiL,KAAA,IAAAA,EAAA,OAAAA,EAAAH,iBAAA,GACA,CAKA,GAAalgB,GAAA,KACb,oBAAAmgB,GAAA,QAAAA,EAAA,CACA,IAAAM,EAAAN,EAAApW,IAAA,CACA,CAA4BuD,OAAAA,CAAA,CAAAwR,MAAAA,CAAA,CAAA4B,iBAAAA,CAAA,CAAA/d,KAAAA,CAAA,CAAAge,OAAAA,CAAA,EAAgDF,EAU5EN,EAAAthB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IATA,CACAO,OAAAA,EACAwR,MAAAA,EACA4B,iBAAAA,EACAE,UAAAje,EACAke,IAAA,GACAC,IAAA,GACAH,OAAAA,CACA,GACmE,KAAAI,kBAAA,CAAAN,GACnE,GACA5c,QAAA,CAAAsc,EAAA9K,EACA,EAEA,CAEAuI,WAAA,CACA,YAAAxG,KAAA,GAA8B3M,EAAAoS,MAAqB,CAGnDmE,WAAA,CACA,YAAA5J,KAAA,GAA8B3M,EAAA6S,MAAqB,CAGnDS,YAAA,CACA,YAAA3G,KAAA,GAA8B3M,EAAAwW,OAAsB,CAGpDtD,YAAA,CACA,YAAAvG,KAAA,GAA8B3M,EAAA8U,OAAsB,CAGpD7I,gBAAArB,CAAA,EACA,oBAA6BA,EAAI,EAGjCwB,IAAAlU,CAAA,CAAA4N,CAAA,CAAA1M,CAAA,EACA,IAAAoc,EAAAtd,EAAAud,iBAAA,GACAgB,EAAA,CACAve,KAAAsd,EACA1P,OAAAA,EACA1M,SAAAA,CACA,EAOA,OANA,KAAA+Y,QAAA,CAAAqD,EAAA,CACA,KAAArD,QAAA,CAAAqD,EAAA,CAAAjc,IAAA,CAAAkd,GAGA,KAAAtE,QAAA,CAAAqD,EAAA,EAAAiB,EAAA,CAEA,KAGAjK,KAAAtU,CAAA,CAAA4N,CAAA,EACA,IAAA0P,EAAAtd,EAAAud,iBAAA,GAMA,OALA,KAAAtD,QAAA,CAAAqD,EAAA,MAAArD,QAAA,CAAAqD,EAAA,CAAA1P,MAAA,KACA,IAAA3D,EACA,gBAAAA,CAAAA,EAAAb,EAAApJ,IAAA,GAAAiK,KAAA,IAAAA,EAAA,OAAAA,EAAAsT,iBAAA,MAAAD,GACAvD,EAAAyE,OAAA,CAAApV,EAAAwE,MAAA,CAAAA,EAAA,CACA,GACA,KAGA,OAAA4Q,QAAAC,CAAA,CAAAC,CAAA,EACA,GAAAxiB,OAAAkF,IAAA,CAAAqd,GAAAle,MAAA,GAAArE,OAAAkF,IAAA,CAAAsd,GAAAne,MAAA,CACA,QACA,CACA,QAAAoe,KAAAF,EACA,GAAAA,CAAA,CAAAE,EAAA,GAAAD,CAAA,CAAAC,EAAA,CACA,QACA,CAEA,QACA,CAEAlE,uBAAA,CACA,KAAAD,WAAA,CAAA7I,eAAA,GACA,KAAA8B,MAAA,CAAAmL,WAAA,IACA,KAAA/C,OAAA,EAEA,CAMAhB,SAAA3Z,CAAA,EACA,KAAAgT,GAAA,CAAiBnM,EAAA+U,KAAoB,IAAI5b,EACzC,CAMA6Z,SAAA7Z,CAAA,EACA,KAAAgT,GAAA,CAAiBnM,EAAAxJ,KAAoB,IAAI,GAAA2C,EAAAga,GACzC,CAMA+B,UAAA,CACA,YAAAxJ,MAAA,CAAAmL,WAAA,SAAAP,SAAA,EACA,CAEAxC,QAAA/I,EAAA,KAAAA,OAAA,EACA,KAAAkI,UAAA,KAGA,KAAAvH,MAAA,CAAAoL,eAAA,MAAArM,KAAA,EACA,KAAAiC,KAAA,CAAqB3M,EAAAwW,OAAsB,CAC3C,KAAA/D,QAAA,CAAAlH,MAAA,CAAAP,GACA,CAEAsL,mBAAAzL,CAAA,EACA,IAAAmM,EAAA,CACAZ,IAAA,GACAC,IAAA,EACA,EAOA,MANAxL,CAAAA,WAAAA,EAAA3S,IAAA,EAAA2S,WAAAA,EAAA3S,IAAA,GACA8e,CAAAA,EAAAZ,GAAA,CAA0BvH,EAA8BhE,EAAA3G,OAAA,CAAA2G,EAAAiE,MAAA,GAExDjE,CAAAA,WAAAA,EAAA3S,IAAA,EAAA2S,WAAAA,EAAA3S,IAAA,GACA8e,CAAAA,EAAAX,GAAA,CAA0BxH,EAA8BhE,EAAA3G,OAAA,CAAA2G,EAAAoM,UAAA,GAExDD,CACA,CACA,CCjcA,IAAIE,EAAyB,SAAA7d,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EAMA,IAAMkiB,EAAI,MACK,OAAAC,EAefzb,YAAA0b,CAAA,CAAAxd,CAAA,EACA,IAAAsI,CACA,MAAAyR,WAAA,MACA,KAAA0D,QAAA,IACA,KAAAD,QAAA,IACA,KAAA/hB,OAAA,CAAuBgU,EACvB,KAAA4I,MAAA,IACA,KAAAlH,OAAA,CPlCO,IOmCP,KAAAuM,SAAA,CAAyBC,EAAAC,YAAY,CACrC,KAAAC,mBAAA,KACA,KAAAC,cAAA,CAAAviB,KAAAA,EACA,KAAAwiB,mBAAA,MACA,KAAAhN,GAAA,GACA,KAAAiN,MAAA,CAAsBV,EACtB,KAAAW,IAAA,MACA,KAAAC,UAAA,IACA,KAAAC,UAAA,KAA8BjO,EAC9B,KAAAkO,oBAAA,EACApb,KAAA,GACAmY,MAAA,GACAve,MAAA,GACA8E,QAAA,IAEA,KAAA2c,sBAAA,KACA,KAAAC,UAAA,IACA,KAAAd,QAAA,IAA2BA,EAAS,GAAGnX,EAAAkY,SAAoB,CAAC,EAC5Dve,CAAAA,MAAAA,EAAA,OAAAA,EAAAqY,MAAA,GACA,MAAAA,MAAA,CAAArY,EAAAqY,MAAA,EACArY,CAAAA,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,GACA,MAAAA,OAAA,CAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAyD,KAAAhN,OAAA,EAAAuE,EAAAvE,OAAA,GACzDuE,CAAAA,MAAAA,EAAA,OAAAA,EAAAmR,OAAA,GACA,MAAAA,OAAA,CAAAnR,EAAAmR,OAAA,EACAnR,CAAAA,MAAAA,EAAA,OAAAA,EAAAge,MAAA,GACA,MAAAA,MAAA,CAAAhe,EAAAge,MAAA,EACAhe,CAAAA,MAAAA,EAAA,OAAAA,EAAA0d,SAAA,GACA,MAAAA,SAAA,CAAA1d,EAAA0d,SAAA,EACA1d,CAAAA,MAAAA,EAAA,OAAAA,EAAA6d,mBAAA,GACA,MAAAA,mBAAA,CAAA7d,EAAA6d,mBAAA,EACA,IAAAW,EAAA,OAAAlW,CAAAA,EAAAtI,MAAAA,EAAA,OAAAA,EAAAqY,MAAA,GAAA/P,KAAA,IAAAA,EAAA,OAAAA,EAAAkW,eAAA,CACAA,GACA,MAAAH,sBAAA,CAAAI,KAAAC,KAAA,KAAAF,EAAA,EACA,KAAAzF,gBAAA,EAAA/Y,MAAAA,EAAA,OAAAA,EAAA+Y,gBAAA,EACA/Y,EAAA+Y,gBAAA,CACA,GACA,kBAAAlJ,EAAA,OACA,CACA,KAAA8O,MAAA,EAAA3e,MAAAA,EAAA,OAAAA,EAAA2e,MAAA,EACA3e,EAAA2e,MAAA,CACA,CAAA3N,EAAAzR,IACAA,EAAAL,KAAAoG,SAAA,CAAA0L,GACA,CACA,KAAAhS,MAAA,EAAAgB,MAAAA,EAAA,OAAAA,EAAAhB,MAAA,EACAgB,EAAAhB,MAAA,CACA,KAAAmf,UAAA,CAAAnf,MAAA,CAAAyI,IAAA,MAAA0W,UAAA,EACA,KAAAS,cAAA,KAAkClP,EAAK,IAAO2N,EAAS,+BACvD,KAAAwB,UAAA,GACA,KAAAC,OAAA,EACA,GAAS,KAAA/F,gBAAA,CACT,CAIA+F,SAAA,EACA,KAAAb,IAAA,GAGA,KAAAA,IAAA,UAAAP,SAAA,MAAAqB,YAAA,gBAAAtjB,OAAA,EACA,KAAAwiB,IAAA,GACA,KAAAA,IAAA,CAAAe,UAAA,eACA,KAAAf,IAAA,CAAAgB,MAAA,UAAAC,WAAA,GACA,KAAAjB,IAAA,CAAAthB,OAAA,SAAAwiB,YAAA,CAAAviB,GACA,KAAAqhB,IAAA,CAAAmB,SAAA,SAAAC,cAAA,CAAAvO,GACA,KAAAmN,IAAA,CAAAqB,OAAA,SAAAC,YAAA,CAAAzO,IAEA,CAOA+N,WAAA3U,CAAA,CAAAqP,CAAA,EACA,KAAA0E,IAAA,GACA,KAAAA,IAAA,CAAAqB,OAAA,cACApV,EACA,KAAA+T,IAAA,CAAA9C,KAAA,CAAAjR,EAAAqP,MAAAA,EAAAA,EAAA,IAGA,KAAA0E,IAAA,CAAA9C,KAAA,GAEA,KAAA8C,IAAA,MAEA,KAAAH,cAAA,EAAA0B,cAAA,KAAA1B,cAAA,EACA,KAAAc,cAAA,CAAA9O,KAAA,GAEA,CAIA2P,aAAA,CACA,YAAAhC,QAAA,CAMAiC,cAAAxO,CAAA,EACA,OAAAA,EAAAyJ,WAAA,GAAApc,IAAA,KACA,SAAAkf,QAAA,CAAA7e,MAAA,EACA,KAAAigB,UAAA,GAEA5d,GAEA,CAIA0e,mBAAA,CACA,OAAAvjB,QAAAwjB,GAAA,MAAAnC,QAAA,CAAA/hB,GAAA,IAAAwV,EAAAyJ,WAAA,KAAApc,IAAA,KACA,KAAAsgB,UAAA,GACAlf,GAEA,CAMAgY,IAAAkI,CAAA,CAAAC,CAAA,CAAAra,CAAA,EACA,KAAAuY,MAAA,CAAA6B,EAAAC,EAAAra,EACA,CAIAsa,iBAAA,CACA,YAAA9B,IAAA,OAAAA,IAAA,CAAA3a,UAAA,EACA,KAAiB4C,EAAA8Z,UAAwB,CACzC,OAAuB1Z,EAAA2Z,UAA2B,MACjC/Z,EAAAlD,IAAkB,CACnC,OAAuBsD,EAAA4Z,IAAqB,MAC3Bha,EAAAia,OAAqB,CACtC,OAAuB7Z,EAAA8Z,OAAwB,SAE/C,OAAuB9Z,EAAA+Z,MAAuB,CAE9C,CAIApD,aAAA,CACA,YAAA8C,eAAA,KAA0CzZ,EAAA4Z,IAAqB,CAE/DhP,QAAAL,CAAA,CAAAwH,EAAA,CAA8BvT,OAAA,GAAY,EAC1C,KAAAmY,WAAA,IACA,KAAA6B,OAAA,GAEA,IAAAwB,EAAA,IAAyBlI,EAAe,YAAavH,EAAM,EAAAwH,EAAA,MAE3D,OADA,KAAAoF,QAAA,CAAA/d,IAAA,CAAA4gB,GACAA,CACA,CAMA5gB,KAAA+F,CAAA,EACA,IAAgBoL,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAE,QAAAA,CAAA,CAAAD,IAAAA,CAAA,EAA6BtL,EAC7ClG,EAAA,KACA,KAAAof,MAAA,CAAAlZ,EAAA,IACA,IAAA6C,CACA,QAAAA,CAAAA,EAAA,KAAA2V,IAAA,GAAA3V,KAAA,IAAAA,GAAAA,EAAA9E,IAAA,CAAA9G,EACA,EACA,EAEA,GADA,KAAAib,GAAA,WAA4B9G,EAAA,CAAO,EAAEC,EAAA,EAAO,EAAGC,EAAI,GAAAC,GACnD,KAAAiM,WAAA,IACA,+CAAA3T,QAAA,CAAAwH,GAAA,CACA,IAAAyP,EAAA,KAAAC,SAAA,CAAAjhB,KACA,GAAAghB,EACA,oBACA,MAGAhhB,GACA,MAGA,KAAA2e,UAAA,CAAAxe,IAAA,CAAAH,EACA,CAOA0I,QAAAC,CAAA,EACA,KAAA6R,WAAA,CAAA7R,EACA,KAAAuV,QAAA,CAAA9hB,OAAA,KACAuM,GAAAgJ,EAAA+I,iBAAA,EAAiDD,aAAA9R,CAAA,GACjDgJ,EAAAsH,UAAA,EAAAtH,EAAAwL,SAAA,IACAxL,EAAA8J,KAAA,CAA8B5U,EAAA4T,YAA2B,EAAIA,aAAA9R,CAAA,EAE7D,EACA,CAMAiK,UAAA,CACA,IAAAsO,EAAA,KAAA1P,GAAA,GAOA,OANA0P,IAAA,KAAA1P,GAAA,CACA,KAAAA,GAAA,GAGA,KAAAA,GAAA,CAAA0P,EAEA,KAAA1P,GAAA,CAAAvW,QAAA,EACA,CAMA0iB,gBAAArM,CAAA,EACA,IAAA6P,EAAA,KAAAjD,QAAA,CAAAnI,IAAA,IAAA9K,EAAAqG,KAAA,GAAAA,GAAArG,CAAAA,EAAAkS,SAAA,IAAAlS,EAAAiP,UAAA,KACAiH,IACA,KAAA/I,GAAA,yCAA8D9G,EAAM,IACpE6P,EAAA/F,WAAA,GAEA,CAQAxB,QAAAjI,CAAA,EACA,KAAAuM,QAAA,MAAAA,QAAA,CAAAxR,MAAA,IAAAzB,EAAAwH,QAAA,KAAAd,EAAAc,QAAA,GACA,CAMA+M,cAAA,CACA,YAAA4B,aAAA,MAAAnD,QAAA,CAAAjjB,OAAAkO,MAAA,IAAiE,KAAA4P,MAAA,EAAiBuI,IPlR3E,OOkRmF,GAC1F,CAEAvB,eAAAwB,CAAA,EACA,KAAA7hB,MAAA,CAAA6hB,EAAApb,IAAA,KACA,IAAkBoL,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAE,QAAAA,CAAA,CAAAD,IAAAA,CAAA,EAA6B+O,EAC/C,IAAA/O,IAAA,KAAAgN,mBAAA,EACAjN,IAAAE,CAAAA,MAAAA,EAAA,OAAAA,EAAA3S,IAAA,IACA,MAAA0f,mBAAA,OAEA,KAAApG,GAAA,cAAmC3G,EAAA/P,MAAA,MAAsB,EAAE4P,EAAA,CAAO,EAAEC,EAAA,CAAO,EAAE,OAAAC,EAAA,QAA+B,EAAAC,GAC5G,KAAAyM,QAAA,CACAxR,MAAA,IAAAiF,EAAAwK,SAAA,CAAA7K,IACAlV,OAAA,IAAAuV,EAAAuB,QAAA,CAAA3B,EAAAE,EAAAD,IACA,KAAAqN,oBAAA,CAAA1c,OAAA,CAAA/F,OAAA,IAAA4D,EAAAugB,GACA,EACA,CAEAZ,aAAA,CACA,KAAAvH,GAAA,6BAA8C,KAAAoH,YAAA,GAAoB,GAClE,KAAA+B,gBAAA,GACA,KAAAlC,cAAA,CAAA9O,KAAA,GACA,KAAAgO,cAAA,EAAA0B,cAAA,KAAA1B,cAAA,EACA,KAAAA,cAAA,CAAAiD,YAAA,SAAAC,cAAA,QAAAnD,mBAAA,EACA,KAAAO,oBAAA,CAAApb,IAAA,CAAArH,OAAA,IAAA4D,IACA,CAEAggB,aAAAzO,CAAA,EACA,KAAA6G,GAAA,qBAAA7G,GACA,KAAAmQ,iBAAA,GACA,KAAAnD,cAAA,EAAA0B,cAAA,KAAA1B,cAAA,EACA,KAAAc,cAAA,CAAA5O,eAAA,GACA,KAAAoO,oBAAA,CAAAjD,KAAA,CAAAxf,OAAA,IAAA4D,EAAAuR,GACA,CAEAqO,aAAAviB,CAAA,EACA,KAAA+a,GAAA,aAAA/a,EAAA8E,OAAA,EACA,KAAAuf,iBAAA,GACA,KAAA7C,oBAAA,CAAAxhB,KAAA,CAAAjB,OAAA,IAAA4D,EAAA3C,GACA,CAEAqkB,mBAAA,CACA,KAAAxD,QAAA,CAAA9hB,OAAA,IAAAuV,EAAAuB,QAAA,CAA4DrM,EAAAxJ,KAAoB,EAChF,CAEA+jB,cAAAxgB,CAAA,CAAAkY,CAAA,EACA,GAAA9d,IAAAA,OAAAkF,IAAA,CAAA4Y,GAAAzZ,MAAA,CACA,OAAAuB,CACA,CACA,IAAA+gB,EAAA/gB,EAAAwJ,KAAA,eACA1E,EAAA,IAAAhH,gBAAAoa,GACA,SAAkBlY,EAAI,EAAE+gB,EAAO,EAAEjc,EAAM,EAGvC6b,kBAAA,CACA,KAAA7D,WAAA,SAAAiB,UAAA,CAAAtf,MAAA,KACA,KAAAsf,UAAA,CAAAviB,OAAA,IAAA4D,KACA,KAAA2e,UAAA,IAEA,CAEA8C,gBAAA,CACA,IAAA1Y,EACA,QAAA2U,WAAA,IAGA,QAAAc,mBAAA,EACA,KAAAA,mBAAA,MACA,KAAApG,GAAA,yEACA,OAAArP,CAAAA,EAAA,KAAA2V,IAAA,GAAA3V,KAAA,IAAAA,GAAAA,EAAA6S,KAAA,CPrVO,IOqVmF,oBAC1F,MACA,KACA,CAAA4C,mBAAA,MAAA5L,QAAA,GACA,KAAAzS,IAAA,EACAmR,MAAA,UACAC,MAAA,YACAE,QAAA,GACAD,IAAA,KAAAgN,mBAAA,GAEA,KAAA9V,OAAA,MAAA8R,WAAA,EAdA,CAiBAyG,UAAAjhB,CAAA,CAAA8e,EAAA,KAAAA,sBAAA,EACA,UACA,OAAAC,UAAA,GAEA/e,IACA8e,EAAA,IACA,KAAAC,UAAA,IACArO,WAAA,KACA,KAAAqO,UAAA,GACA,EAAiBD,IAEjB,GAEA,CACA,CEpXO,MAAA8C,UAAAxf,MACPG,YAAAJ,CAAA,EACA,MAAAA,GACA,KAAA0f,gBAAA,IACA,KAAAzmB,IAAA,eACA,CACA,CACO,SAAA0mB,EAAAzkB,CAAA,EACP,uBAAAA,GAAAA,IAAA,GAAAA,GAAA,qBAAAA,CACA,CACO,MAAA0kB,UAAAH,EACPrf,YAAAJ,CAAA,CAAAT,CAAA,EACA,MAAAS,GACA,KAAA/G,IAAA,mBACA,KAAAsG,MAAA,CAAAA,CACA,CACAsgB,QAAA,CACA,OACA5mB,KAAA,KAAAA,IAAA,CACA+G,QAAA,KAAAA,OAAA,CACAT,OAAA,KAAAA,MAAA,CAEA,CACA,CACO,MAAAugB,UAAAL,EACPrf,YAAAJ,CAAA,CAAA+f,CAAA,EACA,MAAA/f,GACA,KAAA/G,IAAA,uBACA,KAAA8mB,aAAA,CAAAA,CACA,CACA,CC9BA,IAAIC,GAAyB,SAAAliB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EACO,IAAMumB,GAAY,IACzB,IAAAta,EAUA,OARAA,EADAC,IAGA,oBAAAlO,MACA,IAAAmO,IAA8Bma,GAAS,iCAAwC,mBAAoBtlB,QAAAI,OAAA,GAAA+B,IAAA,CAAA+F,EAAAkD,CAAA,CAAAC,IAAA,CAAAnD,EAAA,UAAqBlL,KAAA,IAAAmO,EAAA,GAGxHnO,OAEA,IAAAmO,IAAAF,KAAAE,EACA,EACOqa,GAAA,IAA8BF,GAAS,uCAC9C,oBAAA3gB,SACA,OAAsB3E,QAAAI,OAAA,GAAA+B,IAAA,CAAA+F,EAAAkD,CAAA,CAAAC,IAAA,CAAAnD,EAAA,UAAqBvD,QAAA,CAE3CA,QADA,GCzBA,IAAI8gB,GAAyB,SAAAriB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EAGA,IAAA0mB,GAAA,GAAArgB,EAAAqe,GAAA,EAAAre,EAAAC,OAAA,EAAAD,EAAAsgB,iBAAA,EAAAtgB,EAAA7E,KAAA,EAAAsC,KAAAoG,SAAA,CAAA7D,GACAugB,GAAA,CAAAplB,EAAAP,IAAuCwlB,GAAS,iCAChD,IAAAI,EAAA,MAAsBL,IACtBhlB,CAAAA,aAAAqlB,EACArlB,EAAAqC,IAAA,GAAAV,IAAA,KACAlC,EAAA,IAAuBilB,EAAeQ,GAAArgB,GAAA7E,EAAAqE,MAAA,OACtC,GAGA5E,EAAA,IAAmBmlB,EAAmBM,GAAAllB,GAAAA,GAEtC,GACAslB,GAAA,CAAAjiB,EAAAD,EAAAmiB,EAAAjmB,IAAA,CACA,IAAAmc,EAAA,CAAqBpY,OAAAA,EAAAxE,QAAA,CAAAuE,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,aACrB,QAAAwE,EACAoY,GAEAA,EAAA5c,OAAA,CAAAlB,OAAAkO,MAAA,EAAqC,mCAAoCzI,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,EACzE4c,EAAAnc,IAAA,CAAAgD,KAAAoG,SAAA,CAAApJ,GACA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAyC4P,GAAA8J,GAHzC,EAKA,SAAAC,GAAAC,CAAA,CAAApiB,CAAA,CAAAE,CAAA,CAAAH,CAAA,CAAAmiB,CAAA,CAAAjmB,CAAA,EACA,OAAW2lB,GAAS,+BACpB,WAAAzlB,QAAA,CAAAI,EAAAH,IAAA,CACAgmB,EAAAliB,EAAA+hB,GAAAjiB,EAAAD,EAAAmiB,EAAAjmB,IACAqC,IAAA,KACA,IAAA7B,EAAAwE,EAAA,CACA,MAAAxE,CAAA,OACA,CAAAsD,MAAAA,EAAA,OAAAA,EAAAsiB,aAAA,EACA5lB,EACAA,EAAAuC,IAAA,EADA,GAGAV,IAAA,IAAA/B,EAAAiJ,IACAiD,KAAA,IAAAsZ,GAAAplB,EAAAP,GACA,EACA,EACA,CACO,SAAA+B,GAAAikB,CAAA,CAAAliB,CAAA,CAAAH,CAAA,CAAAmiB,CAAA,EACP,OAAWN,GAAS,+BACpB,OAAAO,GAAAC,EAAA,MAAAliB,EAAAH,EAAAmiB,EACA,EACA,CACO,SAAAI,GAAAF,CAAA,CAAAliB,CAAA,CAAAjE,CAAA,CAAA8D,CAAA,CAAAmiB,CAAA,EACP,OAAWN,GAAS,+BACpB,OAAAO,GAAAC,EAAA,OAAAliB,EAAAH,EAAAmiB,EAAAjmB,EACA,EACA,CACO,SAAAsmB,GAAAH,CAAA,CAAAliB,CAAA,CAAAjE,CAAA,CAAA8D,CAAA,CAAAmiB,CAAA,EACP,OAAWN,GAAS,+BACpB,OAAAO,GAAAC,EAAA,MAAAliB,EAAAH,EAAAmiB,EAAAjmB,EACA,EACA,CACO,SAAAumB,GAAAJ,CAAA,CAAAliB,CAAA,CAAAjE,CAAA,CAAA8D,CAAA,CAAAmiB,CAAA,EACP,OAAWN,GAAS,+BACpB,OAAAO,GAAAC,EAAA,SAAAliB,EAAAH,EAAAmiB,EAAAjmB,EACA,EACA,CCnEA,IAAIwmB,GAAyB,SAAAljB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EAIA,IAAAunB,GAAA,CACA5X,MAAA,IACA6F,OAAA,EACAgS,OAAA,CACAlY,OAAA,OACAD,MAAA,KACA,CACA,EACAoY,GAAA,CACAC,aAAA,OACAC,YAAA,2BACAjU,OAAA,EACA,CACe,OAAAkU,GACflhB,YAAA3B,CAAA,CAAA1E,EAAA,EAAiC,CAAAwnB,CAAA,CAAA7pB,CAAA,EACjC,KAAA+G,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAA,EACA,KAAAwnB,QAAA,CAAAA,EACA,KAAA7pB,KAAA,CAAqBuoB,GAAYvoB,EACjC,CAQA8pB,eAAAjjB,CAAA,CAAAkjB,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAeX,GAAS,+BACxB,QACAxmB,EACA,IAAA8D,EAAAzF,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA8Doa,IAAAQ,GAC9D5nB,EAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA8D,KAAAhN,OAAA,EAAAwE,SAAAA,GAAA,CAAyC,WAAArF,OAAAoF,EAAA8O,MAAA,GACvG,qBAAAjV,MAAAupB,aAAAvpB,MAEAqC,CADAA,EAAA,IAAA6B,QAAA,EACAnC,MAAA,gBAAAoE,EAAA8iB,YAAA,EACA5mB,EAAAN,MAAA,IAAAwnB,IAEA,oBAAArlB,UAAAqlB,aAAArlB,SAEA7B,CADAA,EAAAknB,CAAA,EACAxnB,MAAA,gBAAAoE,EAAA8iB,YAAA,GAGA5mB,EAAAknB,EACA3nB,CAAA,6BAA0DuE,EAAA8iB,YAAA,CAAqB,EAC/ErnB,CAAA,iBAAAuE,EAAA+iB,WAAA,EAEA,IAAAO,EAAA,KAAAC,mBAAA,CAAAJ,GACAK,EAAA,KAAAC,aAAA,CAAAH,GACAle,EAAA,WAAAhM,KAAA,IAAgD,KAAA+G,GAAA,CAAS,UAAUqjB,EAAM,GACzEvjB,OAAAA,EACA/D,KAAAA,EACAT,QAAAA,CACA,GACA,GAAA2J,EAAAlE,EAAA,CACA,OACAuE,KAAA,CAAgC0d,KAAAG,CAAA,EAChC1mB,MAAA,KAMA,EAFA,IAAAA,EAAA,MAAAwI,EAAAnG,IAAA,GACA,OAA6BwG,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,CACA,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOA8mB,OAAAP,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAeX,GAAS,+BACxB,YAAAQ,cAAA,QAAAC,EAAAC,EAAAC,EACA,EACA,CAOApU,OAAAkU,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAeX,GAAS,+BACxB,YAAAQ,cAAA,OAAAC,EAAAC,EAAAC,EACA,EACA,CAOAM,KAAAC,CAAA,CAAAC,CAAA,EACA,OAAenB,GAAS,+BACxB,IACA,IAAAjd,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,eAAiB8iB,SAAA,KAAAA,QAAA,CAAAa,UAAAF,EAAAG,eAAAF,CAAA,EAAsE,CAAIpoB,QAAA,KAAAA,OAAA,GAC3J,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOAonB,KAAAJ,CAAA,CAAAC,CAAA,EACA,OAAenB,GAAS,+BACxB,IACA,IAAAjd,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,eAAiB8iB,SAAA,KAAAA,QAAA,CAAAa,UAAAF,EAAAG,eAAAF,CAAA,EAAsE,CAAIpoB,QAAA,KAAAA,OAAA,GAC3J,OAAyBgK,KAAA,CAAQ0d,KAAA1d,EAAAwe,GAAA,EAAgBrnB,MAAA,KACjD,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CASAsnB,gBAAAf,CAAA,CAAAgB,CAAA,CAAAnkB,CAAA,EACA,OAAe0iB,GAAS,+BACxB,IAEA,IAAAjd,EAAA,MAAiC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,eAD9D,KAAAsjB,aAAA,CAAAN,GACmF,EAAA5oB,OAAAkO,MAAA,EAAmB0b,UAAAA,CAAA,EAAW,CAAAnkB,MAAAA,EAAA,OAAAA,EAAAokB,SAAA,GAA6EA,UAAApkB,EAAAokB,SAAA,EAA+B,EAAI,GAAM3oB,QAAA,KAAAA,OAAA,GACvO4oB,EAAA,CAAArkB,MAAAA,EAAA,OAAAA,EAAAskB,QAAA,EACA,aAAmCtkB,CAAA,IAAAA,EAAAskB,QAAA,IAAAtkB,EAAAskB,QAAA,CAAkD,EACrF,GACAC,EAAAC,UAAA,GAA+C,KAAArkB,GAAA,CAAS,EAAEsF,EAAAgf,SAAA,CAAe,EAAEJ,EAAmB,GAE9F,OADA5e,EAAA,CAAyB8e,UAAAA,CAAA,EACzB,CAAyB9e,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAQA8nB,iBAAAC,CAAA,CAAAR,CAAA,CAAAnkB,CAAA,EACA,OAAe0iB,GAAS,+BACxB,IACA,IAAAjd,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,eAAe,KAAA8iB,QAAA,CAAc,GAAKkB,UAAAA,EAAAQ,MAAAA,CAAA,EAAkB,CAAIlpB,QAAA,KAAAA,OAAA,GACxH4oB,EAAA,CAAArkB,MAAAA,EAAA,OAAAA,EAAAskB,QAAA,EACA,aAAmCtkB,CAAA,IAAAA,EAAAskB,QAAA,IAAAtkB,EAAAskB,QAAA,CAAkD,EACrF,GACA,OACA7e,KAAAA,EAAA/J,GAAA,IAAAnB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA6Emc,GAAA,CAAYL,UAAAK,EAAAH,SAAA,CACzFD,UAAA,GAA2C,KAAArkB,GAAA,CAAS,EAAEykB,EAAAH,SAAA,CAAgB,EAAEJ,EAAmB,GAC3F,QACAznB,MAAA,KAEA,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOA0nB,SAAAnB,CAAA,CAAAnjB,CAAA,EACA,OAAe0iB,GAAS,+BACxB,IAAAmC,EAAA,SAAA7kB,CAAAA,MAAAA,EAAA,OAAAA,EAAAokB,SAAA,EAEAU,EAAA,KAAAC,0BAAA,EAAA/kB,MAAAA,EAAA,OAAAA,EAAAokB,SAAA,OACAY,EAAAF,EAAA,IAA0DA,EAAoB,KAC9E,IACA,IAAAtB,EAAA,KAAAC,aAAA,CAAAN,GACA/d,EAAA,MAAkChH,GAAG,KAAAhF,KAAA,IAAgB,KAAA+G,GAAA,CAAS,GAL9D0kB,EAAA,sCAK4E,GAAGrB,EAAM,EAAEwB,EAAY,GACnGvpB,QAAA,KAAAA,OAAA,CACA6mB,cAAA,EACA,GACA7c,EAAA,MAAAL,EAAAxL,IAAA,GACA,OAAyB6L,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CASAqoB,aAAA9B,CAAA,CAAAnjB,CAAA,EACA,IAAAwjB,EAAA,KAAAC,aAAA,CAAAN,GACA+B,EAAA,GACAb,EAAA,CAAArkB,MAAAA,EAAA,OAAAA,EAAAskB,QAAA,EACA,YAA0BtkB,CAAA,IAAAA,EAAAskB,QAAA,IAAAtkB,EAAAskB,QAAA,CAAkD,EAC5E,GACA,KAAAD,GACAa,EAAAxlB,IAAA,CAAA2kB,GAEA,IAAAQ,EAAA,SAAA7kB,CAAAA,MAAAA,EAAA,OAAAA,EAAAokB,SAAA,EAEAU,EAAA,KAAAC,0BAAA,EAAA/kB,MAAAA,EAAA,OAAAA,EAAAokB,SAAA,OACA,KAAAU,GACAI,EAAAxlB,IAAA,CAAAolB,GAEA,IAAAE,EAAAE,EAAAnmB,IAAA,MAIA,MAHA,KAAAimB,GACAA,CAAAA,EAAA,IAA8BA,EAAY,GAE1C,CACAvf,KAAA,CAAoB0f,UAAAX,UAAA,GAAwB,KAAArkB,GAAA,CAAS,GAVrD0kB,EAAA,wBAUmE,UAAUrB,EAAM,EAAEwB,EAAY,GACjG,CACA,CAMAvC,OAAAkC,CAAA,EACA,OAAejC,GAAS,+BACxB,IACA,IAAAjd,EAAA,MAAmCgd,GAAM,KAAArpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAU,KAAA8iB,QAAA,CAAc,GAAKmC,SAAAT,CAAA,EAAiB,CAAIlpB,QAAA,KAAAA,OAAA,GACpH,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAgEAyoB,KAAAlC,CAAA,CAAAnjB,CAAA,CAAAmiB,CAAA,EACA,OAAeO,GAAS,+BACxB,IACA,IAAAxmB,EAAA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAyEka,IAAA3iB,GAAA,CAAuCkhB,OAAAiC,GAAA,KAChH1d,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,eAAe,KAAA8iB,QAAA,CAAc,EAAA/mB,EAAA,CAAWT,QAAA,KAAAA,OAAA,EAAuB0mB,GAC/H,OAAyB1c,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CACA6mB,cAAAN,CAAA,EACA,SAAkB,KAAAF,QAAA,CAAc,GAAGE,EAAK,EAExCI,oBAAAJ,CAAA,EACA,OAAAA,EAAAtiB,OAAA,gBAAAA,OAAA,YACA,CACAkkB,2BAAAX,CAAA,EACA,IAAA/L,EAAA,GAgBA,OAfA+L,EAAAkB,KAAA,EACAjN,EAAA3Y,IAAA,UAAiC0kB,EAAAkB,KAAA,CAAgB,GAEjDlB,EAAAmB,MAAA,EACAlN,EAAA3Y,IAAA,WAAkC0kB,EAAAmB,MAAA,CAAiB,GAEnDnB,EAAAoB,MAAA,EACAnN,EAAA3Y,IAAA,WAAkC0kB,EAAAoB,MAAA,CAAiB,GAEnDpB,EAAApY,MAAA,EACAqM,EAAA3Y,IAAA,WAAkC0kB,EAAApY,MAAA,CAAiB,GAEnDoY,EAAAqB,OAAA,EACApN,EAAA3Y,IAAA,YAAmC0kB,EAAAqB,OAAA,CAAkB,GAErDpN,EAAAtZ,IAAA,KACA,CACA,CCjYO,ICAM2mB,GAAe,CAAK,kCAAuC,ECDxE,IAAIC,GAAyB,SAAAnmB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,CAKe,OAAAwqB,GACf9jB,YAAA3B,CAAA,CAAA1E,EAAA,EAAiC,CAAArC,CAAA,EACjC,KAAA+G,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAuDid,IAAejqB,GACtE,KAAArC,KAAA,CAAqBuoB,GAAYvoB,EACjC,CAIAysB,aAAA,CACA,OAAeF,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmCrH,GAAG,KAAAhF,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAY1E,QAAA,KAAAA,OAAA,GAC3E,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAMAkpB,UAAApL,CAAA,EACA,OAAeiL,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmCrH,GAAG,KAAAhF,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAUua,EAAG,GAAKjf,QAAA,KAAAA,OAAA,GACjF,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAQAmpB,aAAArL,CAAA,CAAA1a,EAAA,CAAiCgmB,OAAA,GAAe,EAChD,OAAeL,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAYua,GAAAA,EAAA/f,KAAA+f,EAAAsL,OAAAhmB,EAAAgmB,MAAA,EAAsC,CAAIvqB,QAAA,KAAAA,OAAA,GACtH,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOAqpB,aAAAvL,CAAA,CAAA1a,CAAA,EACA,OAAe2lB,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmC+c,GAAG,KAAAppB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAUua,EAAG,GAAKA,GAAAA,EAAA/f,KAAA+f,EAAAsL,OAAAhmB,EAAAgmB,MAAA,EAAsC,CAAIvqB,QAAA,KAAAA,OAAA,GAC3H,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAMAspB,YAAAxL,CAAA,EACA,OAAeiL,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmC8c,GAAI,KAAAnpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAUua,EAAG,WAAW,CAAIjf,QAAA,KAAAA,OAAA,GAC5F,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOAupB,aAAAzL,CAAA,EACA,OAAeiL,GAAS,+BACxB,IACA,IAAAlgB,EAAA,MAAmCgd,GAAM,KAAArpB,KAAA,IAAgB,KAAA+G,GAAA,CAAS,UAAUua,EAAG,KAAK,CAAIjf,QAAA,KAAAA,OAAA,GACxF,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBykB,EAAczkB,GAClC,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CACA,CCrIO,MAAAwpB,WAA4BR,GACnC9jB,YAAA3B,CAAA,CAAA1E,EAAA,EAAiC,CAAArC,CAAA,EACjC,MAAA+G,EAAA1E,EAAArC,EACA,CAMA6R,KAAAyP,CAAA,EACA,WAAmBsI,GAAc,KAAA7iB,GAAA,MAAA1E,OAAA,CAAAif,EAAA,KAAAthB,KAAA,CACjC,CACA,CCdO,ICEMitB,GAAe,CAAK,mCAAwC,ECFzE,IAAIC,GAAyB,SAAA9mB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EAEO,IAAMmrB,GAAY,IACzB,IAAAlf,EAUA,OARAA,EADAC,IAGA,oBAAAlO,MACiB8P,IAGjB9P,OAEA,IAAAmO,IAAAF,KAAAE,EACA,EACOif,GAAA,IACP,oBAAAhrB,QACeirB,EAAAjrB,OAAiB,CAEhCA,OADA,CAGOkrB,GAAA,CAAAC,EAAAC,EAAAtf,IAAA,CACP,IAAAlO,EAAkBmtB,GAAYjf,GAC9Buf,EAAAL,KACA,OAAAzmB,EAAAgC,IAA4BukB,GAAS,iCACrC,IAAAhe,EACA,IAAAyR,EAAA,OAAAzR,CAAAA,EAAA,MAAAse,GAAA,GAAAte,KAAA,IAAAA,EAAAA,EAAAqe,CAAA,CACAlrB,EAAA,IAAAorB,EAAA9kB,MAAAA,EAAA,OAAAA,EAAAtG,OAAA,EAOA,OANAA,EAAA4D,GAAA,YACA5D,EAAA8B,GAAA,UAAAopB,GAEAlrB,EAAA4D,GAAA,mBACA5D,EAAA8B,GAAA,2BAAmDwc,EAAY,GAE/D3gB,EAAA2G,EAAAxF,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA0D1G,GAAA,CAAWtG,QAAAA,CAAA,GACrE,EACA,ECtCO,SAAAqrB,GAAA3mB,CAAA,EACP,OAAAA,EAAAU,OAAA,UACA,CAEO,SAAAkmB,GAAA/mB,CAAA,CAAAgnB,CAAA,EACP,IAAYC,GAAAC,CAAA,CAAAC,KAAAC,CAAA,CAAAC,SAAAC,CAAA,CAAAruB,OAAAsuB,CAAA,EAAsFvnB,EAClG,CAAYinB,GAAAO,CAAA,CAAAL,KAAAM,CAAA,CAAAJ,SAAAK,CAAA,CAAAzuB,OAAA0uB,CAAA,EAA0HX,EACtI,OACAC,GAAA1sB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA0C+e,GAAAN,GAC1CC,KAAA5sB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA4Cgf,GAAAL,GAC5CC,SAAA9sB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAgDif,GAAAJ,GAChDruB,OAAAsB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA8Ckf,GAAAJ,EAC9C,CACA,CCnBA,IAAIK,GAAyB,SAAApoB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EACO,SAAAysB,GAAA1D,CAAA,EACP,IAAA2D,EAAArJ,KAAAsJ,KAAA,CAAAC,KAAAC,GAAA,QACA,OAAAH,EAAA3D,CACA,CACO,SAAS+D,IAAI,CACpB,6CAAArnB,OAAA,kBAAA2J,CAAA,EACA,IAAAsP,EAAA,GAAA2E,KAAA0J,MAAA,KACA,MAAAC,CADA5d,KAAAA,EAAAsP,EAAA,EAAAA,EAAA,GACAtf,QAAA,IACA,EACA,CACO,IAAM6tB,GAAS,wBAAAC,SACtBC,GAAA,CACAC,OAAA,GACAC,SAAA,EACA,EAIOC,GAAA,KACP,IAASL,KACT,QACA,CACA,IACA,oBAAArkB,WAAA2kB,YAAA,CACA,QACA,CAEA,MAAA7uB,EAAA,CAEA,QACA,CACA,GAAAyuB,GAAAC,MAAA,CACA,OAAAD,GAAAE,QAAA,CAEA,IAAAG,EAAA,QAA8BnK,KAAA0J,MAAA,GAAc,EAAE1J,KAAA0J,MAAA,GAAc,EAC5D,IACAnkB,WAAA2kB,YAAA,CAAAE,OAAA,CAAAD,EAAAA,GACA5kB,WAAA2kB,YAAA,CAAAG,UAAA,CAAAF,GACAL,GAAAC,MAAA,IACAD,GAAAE,QAAA,GACA,CACA,MAAA3uB,EAAA,CAGAyuB,GAAAC,MAAA,IACAD,GAAAE,QAAA,GACA,CACA,OAAAF,GAAAE,QAAA,EAEO,SAAAM,GAAApuB,CAAA,CAAAwF,CAAA,EACP,IAAAmI,EACAnI,GACAA,CAAAA,EAAA,QAAAmI,CAAAA,EAAAvE,MAAAA,OAAA,OAAAA,OAAAvC,QAAA,GAAA8G,KAAA,IAAAA,EAAA,OAAAA,EAAA0gB,IAAA,OAEAruB,EAAAA,EAAAkG,OAAA,mBACA,IAAAooB,EAAA,eAAAtuB,EAAA,qBAAAuuB,EAAAD,EAAAE,IAAA,CAAAhpB,UACA,EAEA+oB,CAAA,IAEApoB,mBAAAooB,CAAA,IAAAroB,OAAA,aADA,GAFA,KAKO,IAAMuoB,GAAY,IACzB,IAAA/hB,EAUA,OARAA,EADAC,IAGA,oBAAAlO,MACA,IAAAmO,IAA8BqgB,GAAS,iCAAwC,mBAAoBxrB,QAAAI,OAAA,GAAA+B,IAAA,CAAA+F,EAAAkD,CAAA,CAAAC,IAAA,CAAAnD,EAAA,UAAqBlL,KAAA,IAAAmO,EAAA,GAGxHnO,OAEA,IAAAmO,IAAAF,KAAAE,EACA,EACO8hB,GAAA,GACP,iBAAAC,GACAA,IAAA,GAAAA,GACA,WAAAA,GACA,OAAAA,GACA,SAAAA,GACA,mBAAAA,EAAArqB,IAAA,CAGOsqB,GAAA,CAAAC,EAAA7mB,EAAA8C,IAA6CmiB,GAAS,iCAC7D,MAAA4B,EAAAX,OAAA,CAAAlmB,EAAAzD,KAAAoG,SAAA,CAAAG,GACA,GACOgkB,GAAA,CAAAD,EAAA7mB,IAAuCilB,GAAS,iCACvD,IAAA5sB,EAAA,MAAAwuB,EAAAE,OAAA,CAAA/mB,GACA,IAAA3H,EACA,YAEA,IACA,OAAAkE,KAAAC,KAAA,CAAAnE,EACA,CACA,MAAAsN,EAAA,CACA,OAAAtN,CACA,CACA,GACO2uB,GAAA,CAAAH,EAAA7mB,IAA0CilB,GAAS,iCAC1D,MAAA4B,EAAAV,UAAA,CAAAnmB,EACA,GACO,SAAAinB,GAAA5uB,CAAA,MAGP6uB,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAHA,IAAAxnB,EAAA,oEACAynB,EAAA,GAGAvrB,EAAA,EAEA,IADA7D,EAAAA,EAAA6F,OAAA,UAAAA,OAAA,UACAhC,EAAA7D,EAAA4D,MAAA,EACAorB,EAAArnB,EAAArI,OAAA,CAAAU,EAAA0a,MAAA,CAAA7W,MACAorB,EAAAtnB,EAAArI,OAAA,CAAAU,EAAA0a,MAAA,CAAA7W,MACAqrB,EAAAvnB,EAAArI,OAAA,CAAAU,EAAA0a,MAAA,CAAA7W,MACAsrB,EAAAxnB,EAAArI,OAAA,CAAAU,EAAA0a,MAAA,CAAA7W,MACAgrB,EAAA,KAAAI,GAAA,EACAH,EAAA,CAAAG,GAAAA,CAAA,KAAAC,GAAA,EACAH,EAAA,CAAAG,EAAAA,CAAA,KAAAC,EACAC,GAAAxvB,OAAAkE,YAAA,CAAA+qB,GACA,IAAAK,GAAAJ,GAAAA,GACAM,CAAAA,GAAAxvB,OAAAkE,YAAA,CAAAgrB,EAAA,EAEA,IAAAK,GAAAJ,GAAAA,GACAK,CAAAA,GAAAxvB,OAAAkE,YAAA,CAAAirB,EAAA,EAGA,OAAAK,CACA,CAMO,MAAAC,GACPvoB,aAAA,CAGA,KAAA/E,OAAA,KAAAstB,GAAAC,kBAAA,EAAAllB,EAAAmlB,IAAA,CAGA,KAAA/tB,OAAA,CAAA4I,EACA,KAAA/I,MAAA,CAAAkuB,CACA,EACA,CACA,CAGO,SAAAC,GAAAtiB,CAAA,EAGP,IAAAxF,EAAAwF,EAAAvH,KAAA,MACA,GAAA+B,IAAAA,EAAA9D,MAAA,CACA,qDAEA,IAAA6rB,8DAAA5vB,IAAA,CAAA6H,CAAA,KACA,oEAEA,IAAAgoB,EAAAhoB,CAAA,IACA,OAAAxD,KAAAC,KAAA,CAAAyqB,GAAAc,GACA,CAIO,SAAAC,GAAAzT,CAAA,EACP,WAAA9a,QAAA,IACA6T,WAAA,IAAA2a,EAAA,MAAA1T,EACA,EACA,CAMO,SAAA2T,GAAArb,CAAA,CAAAsb,CAAA,EACP,IAAA/tB,EAAA,IAAAX,QAAA,CAAAwuB,EAAAvuB,IAAA,CAGeurB,GAAS,+BACxB,QAAAmD,EAAA,EAAkCA,EAAAC,IAAoBD,IACtD,IACA,IAAAruB,EAAA,MAAA8S,EAAAub,GACA,IAAAD,EAAAC,EAAA,KAAAruB,GAAA,CACAkuB,EAAAluB,GACA,MACA,EAEA,MAAA5C,EAAA,CACA,IAAAgxB,EAAAC,EAAAjxB,GAAA,CACAuC,EAAAvC,GACA,MACA,EAGA,EACA,GACA,OAAAiD,CACA,CAnDAstB,GAAAC,kBAAA,CAAAluB,OCzJO,OAAA6uB,WAAAtpB,MACPG,YAAAJ,CAAA,CAAAT,CAAA,EACA,MAAAS,GACA,KAAAwpB,aAAA,IACA,KAAAvwB,IAAA,aACA,KAAAsG,MAAA,CAAAA,CACA,CACA,CACO,SAAAkqB,GAAAvuB,CAAA,EACP,uBAAAA,GAAAA,IAAA,GAAAA,GAAA,kBAAAA,CACA,CACO,MAAAwuB,WAAAH,GACPnpB,YAAAJ,CAAA,CAAAT,CAAA,EACA,MAAAS,EAAAT,GACA,KAAAtG,IAAA,gBACA,KAAAsG,MAAA,CAAAA,CACA,CACAsgB,QAAA,CACA,OACA5mB,KAAA,KAAAA,IAAA,CACA+G,QAAA,KAAAA,OAAA,CACAT,OAAA,KAAAA,MAAA,CAEA,CACA,CACO,SAAAoqB,GAAAzuB,CAAA,EACP,OAAAuuB,GAAAvuB,IAAAA,iBAAAA,EAAAjC,IAAA,CAEO,MAAA2wB,WAAAL,GACPnpB,YAAAJ,CAAA,CAAA+f,CAAA,EACA,MAAA/f,GACA,KAAA/G,IAAA,oBACA,KAAA8mB,aAAA,CAAAA,CACA,CACA,CACO,MAAA8J,WAAAN,GACPnpB,YAAAJ,CAAA,CAAA/G,CAAA,CAAAsG,CAAA,EACA,MAAAS,GACA,KAAA/G,IAAA,CAAAA,EACA,KAAAsG,MAAA,CAAAA,CACA,CACAsgB,QAAA,CACA,OACA5mB,KAAA,KAAAA,IAAA,CACA+G,QAAA,KAAAA,OAAA,CACAT,OAAA,KAAAA,MAAA,CAEA,CACA,CACO,MAAAuqB,WAAAD,GACPzpB,aAAA,CACA,4DACA,CACA,CACO,MAAA2pB,WAAAF,GACPzpB,YAAAJ,CAAA,EACA,MAAAA,EAAA,kCACA,CACA,CACO,MAAAgqB,WAAAH,GACPzpB,YAAAJ,CAAA,CAAAqI,EAAA,MACA,MAAArI,EAAA,sCACA,KAAAqI,OAAA,MACA,KAAAA,OAAA,CAAAA,CACA,CACAwX,QAAA,CACA,OACA5mB,KAAA,KAAAA,IAAA,CACA+G,QAAA,KAAAA,OAAA,CACAT,OAAA,KAAAA,MAAA,CACA8I,QAAA,KAAAA,OAAA,CAEA,CACA,CACO,MAAA4hB,WAAAJ,GACPzpB,YAAAJ,CAAA,CAAAT,CAAA,EACA,MAAAS,EAAA,0BAAAT,EACA,CACA,CC9EA,IAAI2qB,GAAyB,SAAApsB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EACAywB,GAA0B,SAAA1e,CAAA,CAAArT,CAAA,EAC1B,IAAA0N,EAAA,GACA,QAAAskB,KAAA3e,EAAA5S,OAAAjB,SAAA,CAAAgG,cAAA,CAAA7E,IAAA,CAAA0S,EAAA2e,IAAAhyB,EAAAA,EAAAQ,OAAA,CAAAwxB,IACAtkB,CAAAA,CAAA,CAAAskB,EAAA,CAAA3e,CAAA,CAAA2e,EAAA,EACA,GAAA3e,IAAA,EAAAA,GAAA,mBAAA5S,OAAAwxB,qBAAA,CACA,QAAAltB,EAAA,EAAAitB,EAAAvxB,OAAAwxB,qBAAA,CAAA5e,GAA6DtO,EAAAitB,EAAAltB,MAAA,CAAcC,IAC3E,EAAA/E,EAAAQ,OAAA,CAAAwxB,CAAA,CAAAjtB,EAAA,GAAAtE,OAAAjB,SAAA,CAAA0yB,oBAAA,CAAAvxB,IAAA,CAAA0S,EAAA2e,CAAA,CAAAjtB,EAAA,GACA2I,CAAAA,CAAA,CAAAskB,CAAA,CAAAjtB,EAAA,EAAAsO,CAAA,CAAA2e,CAAA,CAAAjtB,EAAA,EACA,CACA,OAAA2I,CACA,EAGA,IAAMykB,GAAgB,GAAAxqB,EAAAqe,GAAA,EAAAre,EAAAC,OAAA,EAAAD,EAAAsgB,iBAAA,EAAAtgB,EAAA7E,KAAA,EAAAsC,KAAAoG,SAAA,CAAA7D,GAChByqB,GAAW,CAAAtvB,EAAAP,IAAsBuvB,GAAS,iCAEvCvC,GAAsBzsB,GAG/BuvB,CAJA,aAIA7iB,QAAA,CAAA1M,EAAAqE,MAAA,EAEA5E,EAAA,IAAmBsvB,GAAwBM,GAAgBrvB,GAAAA,EAAAqE,MAAA,GAI3DrE,EACAqC,IAAA,GACAV,IAAA,KACAlC,EAAA,IAAuB+uB,GAAaa,GAAgBxqB,GAAA7E,EAAAqE,MAAA,OACpD,GACAyH,KAAA,KAEArM,EAAA,IAAuBivB,GAAiBW,GAAgBnyB,GAAAA,GACxD,GAhBAuC,EAAA,IAAmBsvB,GAAwBM,GAAgBrvB,GAAA,GAkB3D,GACMwvB,GAAiB,CAAAnsB,EAAAD,EAAAmiB,EAAAjmB,IAAA,CACvB,IAAAmc,EAAA,CAAqBpY,OAAAA,EAAAxE,QAAA,CAAAuE,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,aACrB,QAAAwE,EACAoY,GAEAA,EAAA5c,OAAA,CAAAlB,OAAAkO,MAAA,EAAqC,+CAAkC,EAAgBzI,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,EACvF4c,EAAAnc,IAAA,CAAAgD,KAAAoG,SAAA,CAAApJ,GACA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAyC4P,GAAA8J,GAHzC,EAKO,SAAAkK,GAAAhK,CAAA,CAAApiB,CAAA,CAAAE,CAAA,CAAAH,CAAA,EACP,IAAAsI,EACA,OAAWsjB,GAAS,+BACpB,IAAAnwB,EAAAlB,OAAAkO,MAAA,IAAwCzI,MAAAA,EAAA,OAAAA,EAAAvE,OAAA,EACxCuE,CAAAA,MAAAA,EAAA,OAAAA,EAAAssB,GAAA,GACA7wB,CAAAA,EAAA,wBAAiDuE,EAAAssB,GAAA,CAAY,GAE7D,IAAAC,EAAA,OAAAjkB,CAAAA,EAAAtI,MAAAA,EAAA,OAAAA,EAAAiF,KAAA,GAAAqD,KAAA,IAAAA,EAAAA,EAAA,GACAtI,CAAAA,MAAAA,EAAA,OAAAA,EAAAwsB,UAAA,GACAD,CAAAA,EAAA,YAAAvsB,EAAAwsB,UAAA,EAEA,IAAAxH,EAAAzqB,OAAAkF,IAAA,CAAA8sB,GAAA3tB,MAAA,SAAAX,gBAAAsuB,GAAA/xB,QAAA,MACAiL,EAAA,MAA2BgnB,GAAcpK,EAAApiB,EAAAE,EAAA6kB,EAAA,CAAuCvpB,QAAAA,EAAA6mB,cAAAtiB,MAAAA,EAAA,OAAAA,EAAAsiB,aAAA,EAAiG,GAAItiB,MAAAA,EAAA,OAAAA,EAAA9D,IAAA,EACrL,OAAA8D,MAAAA,EAAA,OAAAA,EAAA0sB,KAAA,EAAA1sB,MAAAA,EAAA,OAAAA,EAAA0sB,KAAA,CAAAjnB,EAAA,EAA6JA,KAAAlL,OAAAkO,MAAA,IAAsBhD,GAAA7I,MAAA,OAEnL,CACA,SAAS6vB,GAAcpK,CAAA,CAAApiB,CAAA,CAAAE,CAAA,CAAAH,CAAA,CAAAmiB,CAAA,CAAAjmB,CAAA,EACvB,OAAW0vB,GAAS,+BACpB,WAAAxvB,QAAA,CAAAI,EAAAH,IAAA,CACAgmB,EAAAliB,EAAyBisB,GAAiBnsB,EAAAD,EAAAmiB,EAAAjmB,IAC1CqC,IAAA,KACA,IAAA7B,EAAAwE,EAAA,CACA,MAAAxE,CAAA,OACA,CAAAsD,MAAAA,EAAA,OAAAA,EAAAsiB,aAAA,EACA5lB,EACAA,EAAAuC,IAAA,EADA,GAGAV,IAAA,IAAA/B,EAAAiJ,IACAiD,KAAA,IAAkCwjB,GAAWtvB,EAAAP,GAC7C,EACA,EACA,CACO,SAAAswB,GAAAlnB,CAAA,EACP,IAAA6C,EACA,IAAAskB,EAAA,KACAC,GAAApnB,IAEAmnB,CAAAA,CADAA,EAAAryB,OAAAkO,MAAA,IAAkChD,EAAA,EAClCqnB,UAAA,CAA6BjF,GAASpiB,EAAAsnB,UAAA,GAEtC,IAAAC,EAAA,OAAA1kB,CAAAA,EAAA7C,EAAAunB,IAAA,GAAA1kB,KAAA,IAAAA,EAAAA,EAAA7C,CAAA,CACA,OAAaA,KAAA,CAAQmnB,QAAAA,EAAAI,KAAAA,CAAA,EAAepwB,MAAA,KACpC,CACO,SAAAqwB,GAAAxnB,CAAA,EACP,IAAA6C,EACA,IAAA0kB,EAAA,OAAA1kB,CAAAA,EAAA7C,EAAAunB,IAAA,GAAA1kB,KAAA,IAAAA,EAAAA,EAAA7C,CAAA,CACA,OAAaA,KAAA,CAAQunB,KAAAA,CAAA,EAAMpwB,MAAA,KAC3B,CACO,SAAAswB,GAAAznB,CAAA,EACP,OAAaA,KAAAA,EAAA7I,MAAA,KACb,CACO,SAAAuwB,GAAA1nB,CAAA,EACP,IAAY2nB,YAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,kBAAAA,CAAA,EAAuE/nB,EAAAgoB,EAAA5B,GAAApmB,EAAA,8EAQnFunB,EAAAzyB,OAAAkO,MAAA,IAAiCglB,GACjC,OACAhoB,KAAA,CACAioB,WAVA,CACAN,YAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,YAAAA,EACAC,kBAAAA,CACA,EAKAR,KAAAA,CACA,EACApwB,MAAA,KAEA,CACO,SAAA+wB,GAAAloB,CAAA,EACP,OAAAA,CACA,CAMA,SAAAonB,GAAApnB,CAAA,EACA,OAAAA,EAAAuU,YAAA,EAAAvU,EAAAmoB,aAAA,EAAAnoB,EAAAsnB,UAAA,CCnIA,IAAIc,GAAyB,SAAAruB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EACI0yB,GAAsB,SAAA3gB,CAAA,CAAArT,CAAA,EAC1B,IAAA0N,EAAA,GACA,QAAAskB,KAAA3e,EAAA5S,OAAAjB,SAAA,CAAAgG,cAAA,CAAA7E,IAAA,CAAA0S,EAAA2e,IAAAhyB,EAAAA,EAAAQ,OAAA,CAAAwxB,IACAtkB,CAAAA,CAAA,CAAAskB,EAAA,CAAA3e,CAAA,CAAA2e,EAAA,EACA,GAAA3e,IAAA,EAAAA,GAAA,mBAAA5S,OAAAwxB,qBAAA,CACA,QAAAltB,EAAA,EAAAitB,EAAAvxB,OAAAwxB,qBAAA,CAAA5e,GAA6DtO,EAAAitB,EAAAltB,MAAA,CAAcC,IAC3E,EAAA/E,EAAAQ,OAAA,CAAAwxB,CAAA,CAAAjtB,EAAA,GAAAtE,OAAAjB,SAAA,CAAA0yB,oBAAA,CAAAvxB,IAAA,CAAA0S,EAAA2e,CAAA,CAAAjtB,EAAA,GACA2I,CAAAA,CAAA,CAAAskB,CAAA,CAAAjtB,EAAA,EAAAsO,CAAA,CAAA2e,CAAA,CAAAjtB,EAAA,EACA,CACA,OAAA2I,CACA,CAIe,OAAAumB,GACfjsB,YAAA,CAAkB3B,IAAAA,EAAA,GAAA1E,QAAAA,EAAA,EAAsB,CAAArC,MAAAA,CAAA,CAAU,EAClD,KAAA+G,GAAA,CAAAA,EACA,KAAA1E,OAAA,CAAAA,EACA,KAAArC,KAAA,CAAqBgwB,GAAYhwB,GACjC,KAAA40B,GAAA,EACAC,YAAA,KAAAC,YAAA,CAAAzmB,IAAA,OACA0mB,aAAA,KAAAC,aAAA,CAAA3mB,IAAA,MACA,CACA,CAKA4mB,QAAA/B,CAAA,EACA,OAAeuB,GAAS,+BACxB,IAMA,OALA,MAAsBxB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,UAC/D1E,QAAA,KAAAA,OAAA,CACA6wB,IAAAA,EACAhK,cAAA,EACA,GACA,CAAyB7c,KAAA,KAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAOA0xB,kBAAAC,CAAA,CAAAvuB,EAAA,EAAyC,EACzC,OAAe6tB,GAAS,+BACxB,IACA,aAA6BxB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,UACtEjE,KAAA,CAA4BqyB,MAAAA,EAAA9oB,KAAAzF,EAAAyF,IAAA,EAC5BhK,QAAA,KAAAA,OAAA,CACA+wB,WAAAxsB,EAAAwsB,UAAA,CACAE,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAQA4xB,aAAAnW,CAAA,EACA,OAAewV,GAAS,+BACxB,IACA,IAAwB7tB,QAAAA,CAAA,EAAUqY,EAAAoV,EAAiBK,GAAMzV,EAAA,aACzDnc,EAAA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAA2DglB,GAAAztB,GAM3D,MALA,aAAAytB,IAEAvxB,EAAAuyB,SAAA,CAAAhB,MAAAA,EAAA,OAAAA,EAAAiB,QAAA,CACA,OAAAxyB,EAAA,UAEA,MAA6BmwB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,uBACtEjE,KAAAA,EACAT,QAAA,KAAAA,OAAA,CACAixB,MAA2BS,GAC3BX,WAAAxsB,MAAAA,EAAA,OAAAA,EAAAwsB,UAAA,EAEA,CACA,MAAA5vB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OACA6I,KAAA,CACAioB,WAAA,KACAV,KAAA,MAEApwB,MAAAA,CACA,CACA,OACAA,CAAA,CAEA,EACA,CAMA+xB,WAAAC,CAAA,EACA,OAAef,GAAS,+BACxB,IACA,aAA6BxB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,eACtEjE,KAAA0yB,EACAnzB,QAAA,KAAAA,OAAA,CACAixB,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAOAiyB,UAAAxW,CAAA,EACA,IAAA/P,EAAAiB,EAAAC,EAAAM,EAAAgS,EAAAC,EAAA+S,EACA,OAAejB,GAAS,+BACxB,IACA,IAAAkB,EAAA,CAAqCC,SAAA,KAAAC,SAAA,EAAAC,MAAA,GACrC7tB,EAAA,MAAuCgrB,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,eAC/E1E,QAAA,KAAAA,OAAA,CACA6mB,cAAA,GACArd,MAAA,CACAJ,KAAA,OAAA0E,CAAAA,EAAA,OAAAjB,CAAAA,EAAA+P,MAAAA,EAAA,OAAAA,EAAAxT,IAAA,GAAAyD,KAAA,IAAAA,EAAA,OAAAA,EAAA9N,QAAA,KAAA+O,KAAA,IAAAA,EAAAA,EAAA,GACA4lB,SAAA,OAAArlB,CAAAA,EAAA,OAAAN,CAAAA,EAAA6O,MAAAA,EAAA,OAAAA,EAAA+W,OAAA,GAAA5lB,KAAA,IAAAA,EAAA,OAAAA,EAAAhP,QAAA,KAAAsP,KAAA,IAAAA,EAAAA,EAAA,IAEA4iB,MAA2BiB,EAC3B,GACA,GAAAtsB,EAAAzE,KAAA,CACA,MAAAyE,EAAAzE,KAAA,CACA,IAAAyyB,EAAA,MAAAhuB,EAAApC,IAAA,GACAiwB,EAAA,OAAApT,CAAAA,EAAAza,EAAA5F,OAAA,CAAA2C,GAAA,oBAAA0d,KAAA,IAAAA,EAAAA,EAAA,EACAwT,EAAA,OAAAR,CAAAA,EAAA,OAAA/S,CAAAA,EAAA1a,EAAA5F,OAAA,CAAA2C,GAAA,WAAA2d,KAAA,IAAAA,EAAA,OAAAA,EAAApb,KAAA,QAAAmuB,KAAA,IAAAA,EAAAA,EAAA,GASA,OARAQ,EAAA1wB,MAAA,KACA0wB,EAAA3zB,OAAA,KACA,IAAAkJ,EAAAgF,SAAA0lB,EAAA5uB,KAAA,KAA2D,IAAAA,KAAA,SAAA6uB,SAAA,OAC3DC,EAAAvwB,KAAAC,KAAA,CAAAowB,EAAA5uB,KAAA,KAA4D,IAAAA,KAAA,SAC5DouB,CAAAA,CAAA,IAAsCU,EAAI,OAAA5qB,CAC1C,GACAkqB,EAAAG,KAAA,CAAArlB,SAAAqlB,IAEA,CAAyBzpB,KAAAlL,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAoC4mB,GAAAN,GAAAnyB,MAAA,KAC7D,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQ4pB,MAAA,IAAWzyB,MAAAA,CAAA,CAChD,OACAA,CAAA,CAEA,EACA,CAQA8yB,YAAAC,CAAA,EACA,OAAe9B,GAAS,+BACxB,IACA,aAA6BxB,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,eAAewvB,EAAI,GACxFl0B,QAAA,KAAAA,OAAA,CACAixB,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAQAgzB,eAAAD,CAAA,CAAAf,CAAA,EACA,OAAef,GAAS,+BACxB,IACA,aAA6BxB,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,eAAewvB,EAAI,GACxFzzB,KAAA0yB,EACAnzB,QAAA,KAAAA,OAAA,CACAixB,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAUAizB,WAAAnV,CAAA,CAAAoV,EAAA,IACA,OAAejC,GAAS,+BACxB,IACA,aAA6BxB,GAAQ,KAAAjzB,KAAA,aAA0B,KAAA+G,GAAA,CAAS,eAAeua,EAAG,GAC1Fjf,QAAA,KAAAA,OAAA,CACAS,KAAA,CACA6zB,mBAAAD,CACA,EACApD,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CACAsxB,aAAA7V,CAAA,EACA,OAAewV,GAAS,+BACxB,IACA,IAAwBpoB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,MAAQyvB,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,eAAekY,EAAA2X,MAAA,CAAc,WACnHv0B,QAAA,KAAAA,OAAA,CACAixB,MAAA,GACA,EAAiCjnB,KAAA,CAAQwqB,QAAAA,CAAA,EAASrzB,MAAA,MAElD,GACA,OAAyB6I,KAAAA,EAAA7I,MAAAA,CAAA,CACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CACAwxB,cAAA/V,CAAA,EACA,OAAewV,GAAS,+BACxB,IACA,IAAApoB,EAAA,MAAmC4mB,GAAQ,KAAAjzB,KAAA,aAA0B,KAAA+G,GAAA,CAAS,eAAekY,EAAA2X,MAAA,CAAc,WAAW3X,EAAAqC,EAAA,CAAU,GAChIjf,QAAA,KAAAA,OAAA,GAEA,OAAyBgK,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CACA,CCnSO,ICGMszB,GAAe,CAAK,kCAAsC,ECHvEC,GAAA,CACAzG,QAAA,GACA,KAGA1lB,WAAA2kB,YAAA,CAAAe,OAAA,CAAA/mB,GAFA,KAIAkmB,QAAA,CAAAlmB,EAAA3H,IAAA,CACa0tB,MAGb1kB,WAAA2kB,YAAA,CAAAE,OAAA,CAAAlmB,EAAA3H,EACA,EACA8tB,WAAA,IACaJ,MAGb1kB,WAAA2kB,YAAA,CAAAG,UAAA,CAAAnmB,EACA,CACA,EEpBA,IAAIytB,GAAyB,SAAA5wB,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,GAQAi1B,UDbO,CACP,oBAAArsB,WAEA,IACAzJ,OAAAmJ,cAAA,CAAAnJ,OAAAjB,SAAA,cACA8E,IAAA,WACA,aAEA6F,aAAA,EACA,GAEAqsB,UAAAtsB,UAAA,CAAAssB,UAEA,OAAA/1B,OAAAjB,SAAA,CAAAg3B,SAAA,CAEA,MAAAx2B,EAAA,CACA,oBAAAd,MAEAA,CAAAA,KAAAgL,UAAA,CAAAhL,IAAA,CAEA,CAlBA,ICYA,IAAAu3B,GAAA,CACApwB,IHjBO,wBGkBPqwB,WHjBO,sBGkBPC,iBAAA,GACAC,eAAA,GACAC,mBAAA,GACAl1B,QAAay0B,EACb,CAMe,OAAAU,GAIf9uB,YAAA9B,CAAA,EACA,KAAA6wB,mBAAA,KAAAC,IACA,KAAAC,iBAAA,MACA,KAAAC,yBAAA,MACA,KAAAC,kBAAA,MAOA,KAAAC,iBAAA,MACA,KAAAP,kBAAA,IAIA,KAAAQ,gBAAA,MACA,IAAAtlB,EAAAtR,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAuD8nB,IAAAvwB,EACvD,MAAAoxB,eAAA,MACA,KAAAZ,UAAA,CAAA3kB,EAAA2kB,UAAA,CACA,KAAAC,gBAAA,CAAA5kB,EAAA4kB,gBAAA,CACA,KAAAC,cAAA,CAAA7kB,EAAA6kB,cAAA,CACA,KAAAlH,OAAA,CAAA3d,EAAA2d,OAAA,EFnCe2G,GEoCf,KAAAkB,KAAA,KAAyBtD,GAAc,CACvC5tB,IAAA0L,EAAA1L,GAAA,CACA1E,QAAAoQ,EAAApQ,OAAA,CACArC,MAAAyS,EAAAzS,KAAA,GAEA,KAAA+G,GAAA,CAAA0L,EAAA1L,GAAA,CACA,KAAA1E,OAAA,CAAAoQ,EAAApQ,OAAA,CACA,KAAArC,KAAA,CAAqBgwB,GAAYvd,EAAAzS,KAAA,EACjC,KAAAu3B,kBAAA,CAAA9kB,EAAA8kB,kBAAA,CACA,KAAA3C,GAAA,EACAsD,OAAA,KAAAC,OAAA,CAAA9pB,IAAA,OACA+pB,OAAA,KAAAC,OAAA,CAAAhqB,IAAA,OACAiqB,SAAA,KAAAC,SAAA,CAAAlqB,IAAA,OACAmqB,UAAA,KAAAC,UAAA,CAAApqB,IAAA,OACAwmB,YAAA,KAAAC,YAAA,CAAAzmB,IAAA,OACAqqB,mBAAA,KAAAC,mBAAA,CAAAtqB,IAAA,OACAuqB,+BAAA,KAAAC,+BAAA,CAAAxqB,IAAA,MACA,EACY4gB,MAASrkB,WAAAkuB,gBAAA,OAAAxB,cAAA,OAAAF,UAAA,GACrB,KAAAW,gBAAA,KAAAntB,WAAAkuB,gBAAA,MAAA1B,UAAA,EACA,KAAAW,gBAAA,CAAA/tB,gBAAA,eACA,KAAA+uB,qBAAA,CAAArhB,EAAArL,IAAA,CAAAqL,KAAA,CAAAA,EAAArL,IAAA,CAAAmnB,OAAA,IACA,IAEA,KAAAwF,UAAA,EACA,CAMAA,YAAA,CAIA,OAHA,KAAAlB,iBAAA,EACA,MAAAA,iBAAA,MAAAmB,WAAA,IAEA,KAAAnB,iBAAA,CAQAmB,aAAA,CACA,OAAejC,GAAS,+BACxB,QAAAc,iBAAA,CACA,YAAAA,iBAAA,CAEA,IACA,QAAAP,kBAAA,OAAA2B,oBAAA,IACA,IAA4B7sB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAA21B,kBAAA,GAC1C,GAAA31B,EAIA,OADA,WAAA41B,cAAA,GACA,CAAiC51B,MAAAA,CAAA,CACjC,CACA,IAA4BgwB,QAAAA,CAAA,CAAA6F,aAAAA,CAAA,EAAwBhtB,EAMpD,OALA,WAAAitB,YAAA,CAAA9F,GACA,KAAAuF,qBAAA,aAAAvF,GACA,aAAA6F,GACA,KAAAN,qBAAA,qBAAAvF,GAEA,CAA6BhwB,MAAA,KAC7B,QAEA,WAAA+1B,kBAAA,GACA,CAAyB/1B,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6BA,MAAAA,CAAA,CAC7B,CACA,OACAA,MAAA,IAA+B0uB,GAAgB,yCAAA1uB,EAC/C,CACA,QACA,CACA,WAAAg2B,uBAAA,EACA,CACA,EACA,CAUAC,OAAAzyB,CAAA,EACA,IAAAkI,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,QAEAhrB,EACA,GAFA,WAAAotB,cAAA,GAEA,UAAApyB,EAAA,CACA,IAA4BmuB,MAAAA,CAAA,CAAAuE,SAAAA,CAAA,CAAA9yB,QAAAA,CAAA,EAA2BI,EACvDgF,EAAA,MAAgCinB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,UACzE1E,QAAA,KAAAA,OAAA,CACA+wB,WAAAxsB,MAAAA,EAAA,OAAAA,EAAA+yB,eAAA,CACA72B,KAAA,CACAqyB,MAAAA,EACAuE,SAAAA,EACArtB,KAAA,OAAA6C,CAAAA,EAAAtI,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA6C,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3I0qB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,EACAxG,MAA+BC,EAC/B,EACA,MACA,aAAAvsB,EAAA,CACA,IAA4B+yB,MAAAA,CAAA,CAAAL,SAAAA,CAAA,CAAA9yB,QAAAA,CAAA,EAA2BI,EACvDgF,EAAA,MAAgCinB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,UACzE1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAi3B,MAAAA,EACAL,SAAAA,EACArtB,KAAA,OAAA8D,CAAAA,EAAAvJ,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA8D,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3IypB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,EACAxG,MAA+BC,EAC/B,EACA,MAEA,UAA8BlB,GAA2B,mEAEzD,IAAwBhmB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAcwI,EACtC,GAAAxI,GAAA,CAAA6I,EACA,OAA6BA,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,CACA,IAAAgwB,EAAAnnB,EAAAmnB,OAAA,CACAI,EAAAvnB,EAAAunB,IAAA,CAKA,OAJAvnB,EAAAmnB,OAAA,GACA,WAAA8F,YAAA,CAAAjtB,EAAAmnB,OAAA,EACA,KAAAuF,qBAAA,aAAAvF,IAEA,CAAyBnnB,KAAA,CAAQunB,KAAAA,EAAAJ,QAAAA,CAAA,EAAehwB,MAAA,KAChD,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CASAw2B,mBAAAhzB,CAAA,EACA,IAAAkI,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,QAEAhrB,EACA,GAFA,WAAAotB,cAAA,GAEA,UAAApyB,EAAA,CACA,IAA4BmuB,MAAAA,CAAA,CAAAuE,SAAAA,CAAA,CAAA9yB,QAAAA,CAAA,EAA2BI,EACvDgF,EAAA,MAAgCinB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,6BACzE1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAqyB,MAAAA,EACAuE,SAAAA,EACArtB,KAAA,OAAA6C,CAAAA,EAAAtI,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA6C,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3I0qB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,EACAxG,MAA+BC,EAC/B,EACA,MACA,aAAAvsB,EAAA,CACA,IAA4B+yB,MAAAA,CAAA,CAAAL,SAAAA,CAAA,CAAA9yB,QAAAA,CAAA,EAA2BI,EACvDgF,EAAA,MAAgCinB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,6BACzE1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAi3B,MAAAA,EACAL,SAAAA,EACArtB,KAAA,OAAA8D,CAAAA,EAAAvJ,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA8D,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3IypB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,EACAxG,MAA+BC,EAC/B,EACA,MAEA,UAA8BlB,GAA2B,mEAEzD,IAAwBhmB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAcwI,EACtC,GAAAxI,GAAA,CAAA6I,EACA,OAA6BA,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,EAKhE,OAJA6I,EAAAmnB,OAAA,GACA,WAAA8F,YAAA,CAAAjtB,EAAAmnB,OAAA,EACA,KAAAuF,qBAAA,aAAA1sB,EAAAmnB,OAAA,GAEA,CAAyBnnB,KAAAA,EAAA7I,MAAAA,CAAA,CACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAIAy2B,gBAAAjzB,CAAA,EACA,IAAAkI,EAAAiB,EAAAC,EAAAM,EACA,OAAesmB,GAAS,+BAExB,OADA,WAAAoC,cAAA,GACA,KAAAc,qBAAA,CAAAlzB,EAAAmzB,QAAA,EACA/G,WAAA,OAAAlkB,CAAAA,EAAAlI,EAAAJ,OAAA,GAAAsI,KAAA,IAAAA,EAAA,OAAAA,EAAAkkB,UAAA,CACAgH,OAAA,OAAAjqB,CAAAA,EAAAnJ,EAAAJ,OAAA,GAAAuJ,KAAA,IAAAA,EAAA,OAAAA,EAAAiqB,MAAA,CACAC,YAAA,OAAAjqB,CAAAA,EAAApJ,EAAAJ,OAAA,GAAAwJ,KAAA,IAAAA,EAAA,OAAAA,EAAAiqB,WAAA,CACAC,oBAAA,OAAA5pB,CAAAA,EAAA1J,EAAAJ,OAAA,GAAA8J,KAAA,IAAAA,EAAA,OAAAA,EAAA4pB,mBAAA,EAEA,EACA,CAOAC,kBAAAvzB,CAAA,EACA,OAAegwB,GAAS,+BACxB,WAAAoC,cAAA,GACA,IACA,IAAwBxyB,QAAAA,CAAA,CAAAuzB,SAAAA,CAAA,CAAArrB,MAAAA,CAAA,CAAA0rB,MAAAA,CAAA,EAAkCxzB,EAC1DgF,EAAA,MAAkCinB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,6BAC3E1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAq3B,SAAAA,EACAM,SAAA3rB,EACA0rB,MAAAA,EACAZ,qBAAA,CAAgDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CAChD,EACAxG,MAA2BC,EAC3B,GACA,CAAwBlnB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAcwI,EACtC,GAAAxI,GAAA,CAAA6I,EACA,OAA6BA,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,EAKhE,OAJA6I,EAAAmnB,OAAA,GACA,WAAA8F,YAAA,CAAAjtB,EAAAmnB,OAAA,EACA,KAAAuF,qBAAA,aAAA1sB,EAAAmnB,OAAA,GAEA,CAAyBnnB,KAAAA,EAAA7I,MAAAA,CAAA,CACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAYAk3B,cAAA1zB,CAAA,EACA,IAAAkI,EAAAiB,EAAAC,EAAAM,EACA,OAAesmB,GAAS,+BACxB,IAEA,GADA,WAAAoC,cAAA,GACA,UAAApyB,EAAA,CACA,IAA4BmuB,MAAAA,CAAA,CAAAvuB,QAAAA,CAAA,EAAiBI,EAC7C,CAA4BxD,MAAAA,CAAA,EAAQ,MAAQyvB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,OACrF1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAqyB,MAAAA,EACA9oB,KAAA,OAAA6C,CAAAA,EAAAtI,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA6C,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3IyrB,YAAA,OAAAxqB,CAAAA,EAAAvJ,MAAAA,EAAA,OAAAA,EAAAg0B,gBAAA,GAAAzqB,KAAA,IAAAA,GAAAA,EACAypB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,EACA1G,WAAAxsB,MAAAA,EAAA,OAAAA,EAAA+yB,eAAA,GAEA,OAA6BttB,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,IACA,UAAAwD,EAAA,CACA,IAA4B+yB,MAAAA,CAAA,CAAAnzB,QAAAA,CAAA,EAAiBI,EAC7C,CAA4BxD,MAAAA,CAAA,EAAQ,MAAQyvB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,OACrF1E,QAAA,KAAAA,OAAA,CACAS,KAAA,CACAi3B,MAAAA,EACA1tB,KAAA,OAAA+D,CAAAA,EAAAxJ,MAAAA,EAAA,OAAAA,EAAAyF,IAAA,GAAA+D,KAAA,IAAAA,EAAAA,EAAA,EAA2I,CAC3IuqB,YAAA,OAAAjqB,CAAAA,EAAA9J,MAAAA,EAAA,OAAAA,EAAAg0B,gBAAA,GAAAlqB,KAAA,IAAAA,GAAAA,EACAkpB,qBAAA,CAAoDC,cAAAjzB,MAAAA,EAAA,OAAAA,EAAAkzB,YAAA,CACpD,CACA,GACA,OAA6BztB,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACA,IAA0B6uB,GAA2B,qDAErD,MAAA7uB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAIAq3B,UAAA5b,CAAA,EACA,IAAA/P,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,IACA,WAAAoC,cAAA,GACA,IAAwB/sB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,MAAQyvB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,UACvF1E,QAAA,KAAAA,OAAA,CACAS,KAAA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAwD4P,GAAA,CAAa2a,qBAAA,CAAwBC,cAAA,OAAA3qB,CAAAA,EAAA+P,EAAArY,OAAA,GAAAsI,KAAA,IAAAA,EAAA,OAAAA,EAAA4qB,YAAA,IAC7F1G,WAAA,OAAAjjB,CAAAA,EAAA8O,EAAArY,OAAA,GAAAuJ,KAAA,IAAAA,EAAA,OAAAA,EAAAijB,UAAA,CACAE,MAA2BC,EAC3B,GACA,GAAA/vB,EACA,MAAAA,CAAA,CAEA,IAAA6I,EACA,gDAEA,IAAAmnB,EAAAnnB,EAAAmnB,OAAA,CACAI,EAAAvnB,EAAAunB,IAAA,CAKA,MAJAJ,CAAAA,MAAAA,EAAA,OAAAA,EAAA5S,YAAA,IACA,WAAA0Y,YAAA,CAAA9F,GACA,KAAAuF,qBAAA,aAAAvF,IAEA,CAAyBnnB,KAAA,CAAQunB,KAAAA,EAAAJ,QAAAA,CAAA,EAAehwB,MAAA,KAChD,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAoBAs3B,cAAA7b,CAAA,EACA,IAAA/P,EAAAiB,EAAAC,EACA,OAAe4mB,GAAS,+BACxB,IAEA,OADA,WAAAoC,cAAA,GACA,MAA6BnG,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,OACtEjE,KAAA3B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAkG,eAAA4P,EAAA,CAA8B8b,YAAA9b,EAAA+b,UAAA,EAAiC,iBAAA/b,EAAA,CAAkCgc,OAAAhc,EAAAgc,MAAA,EAAwB,OAAY9G,YAAA,OAAAhkB,CAAAA,EAAA,OAAAjB,CAAAA,EAAA+P,EAAArY,OAAA,GAAAsI,KAAA,IAAAA,EAAA,OAAAA,EAAAkkB,UAAA,GAAAjjB,KAAA,IAAAA,EAAAA,EAAAhO,KAAAA,CAAA,GAAyI,QAAAiO,CAAAA,EAAA6O,MAAAA,EAAA,OAAAA,EAAArY,OAAA,GAAAwJ,KAAA,IAAAA,EAAA,OAAAA,EAAA0pB,YAAA,EAChX,CAA4BF,qBAAA,CAAwBC,cAAA5a,EAAArY,OAAA,CAAAkzB,YAAA,GACpD,OAAoCoB,mBAAA,KACpC74B,QAAA,KAAAA,OAAA,CACAixB,MAA2BQ,EAC3B,EACA,CACA,MAAAtwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAKA23B,YAAA,CACA,OAAenE,GAAS,+BAGxB,WAAAc,iBAAA,CACA,IAAAsD,EAAA,KACA,QAAA9D,cAAA,EACA,IAAA+D,EAAA,MAA2ChL,GAAY,KAAAD,OAAA,MAAAgH,UAAA,EACvD,OAAAiE,IACA,KAAAC,eAAA,CAAAD,GACAD,EAAAC,EAGA,WAAAjC,cAAA,GAGA,MAEAgC,EAAA,KAAApD,eAAA,CAEA,IAAAoD,EACA,OAAyB/uB,KAAA,CAAQmnB,QAAA,MAAehwB,MAAA,KAChD,CACA,IAAA+3B,EAAAH,EAAAA,EAAA1H,UAAA,EACA0H,EAAA1H,UAAA,EAAA9E,KAAAC,GAAA,OAEA,IAAA0M,EACA,OAAyBlvB,KAAA,CAAQmnB,QAAA4H,CAAA,EAAyB53B,MAAA,KAC1D,CACA,IAAoBgwB,QAAAA,CAAA,CAAAhwB,MAAAA,CAAA,EAAiB,WAAAg4B,iBAAA,CAAAJ,EAAA5G,aAAA,SACrC,EACA,CAAyBnoB,KAAA,CAAQmnB,QAAA,MAAehwB,MAAAA,CAAA,EAEhD,CAAqB6I,KAAA,CAAQmnB,QAAAA,CAAA,EAAShwB,MAAA,KADtC,EAGA,CAKAi4B,QAAAvI,CAAA,EACA,IAAAhkB,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,IACA,IAAA9D,EAAA,CACA,IAA4B7mB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAA23B,UAAA,GAC1C,GAAA33B,EACA,MAAAA,CAAA,CAGA0vB,EAAA,OAAA/iB,CAAAA,EAAA,OAAAjB,CAAAA,EAAA7C,EAAAmnB,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,GAAAzQ,KAAA,IAAAA,EAAAA,EAAAhO,KAAAA,CAAA,CACA,OACA,MAA6B8wB,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,QACrE1E,QAAA,KAAAA,OAAA,CACA6wB,IAAAA,EACAI,MAA2BO,EAC3B,EACA,CACA,MAAArwB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAIAk4B,WAAAlG,CAAA,CAAA5uB,EAAA,EAAuC,EACvC,OAAeowB,GAAS,+BACxB,IACA,IAAwB3qB,KAAAsvB,CAAA,CAAAn4B,MAAAo4B,CAAA,EAAyC,WAAAT,UAAA,GACjE,GAAAS,EACA,MAAAA,CAAA,CAEA,IAAAD,EAAAnI,OAAA,CACA,UAA8BpB,EAAuB,CAErD,IAAAoB,EAAAmI,EAAAnI,OAAA,CACA,CAAwBnnB,KAAAA,CAAA,CAAA7I,MAAAq4B,CAAA,EAAyB,MAAQ5I,GAAQ,KAAAjzB,KAAA,UAAuB,KAAA+G,GAAA,CAAS,QACjG1E,QAAA,KAAAA,OAAA,CACA+wB,WAAAxsB,MAAAA,EAAA,OAAAA,EAAA+yB,eAAA,CACA72B,KAAA0yB,EACAtC,IAAAM,EAAA5S,YAAA,CACA0S,MAA2BO,EAC3B,GACA,GAAAgI,EACA,MAAAA,CAAA,CAIA,OAHArI,EAAAI,IAAA,CAAAvnB,EAAAunB,IAAA,CACA,WAAA0F,YAAA,CAAA9F,GACA,KAAAuF,qBAAA,gBAAAvF,GACA,CAAyBnnB,KAAA,CAAQunB,KAAAJ,EAAAI,IAAA,EAAoBpwB,MAAA,KACrD,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,MAAYpwB,MAAAA,CAAA,CACjD,OACAA,CAAA,CAEA,EACA,CAIAs4B,WAAA5I,CAAA,EACA,OAAe9B,GAAgB8B,EAC/B,CAMA6I,WAAAX,CAAA,EACA,OAAepE,GAAS,+BACxB,IACA,IAAAoE,EAAAxa,YAAA,GAAAwa,EAAA5G,aAAA,CACA,UAA8BpC,EAAuB,CAErD,IAAA1D,EAAAE,KAAAC,GAAA,OACAJ,EAAAC,EACA6M,EAAA,GACA/H,EAAA,KACA5b,EAAgCwZ,GAAgBgK,EAAAxa,YAAA,EAKhD,GAJAhJ,EAAAokB,GAAA,EAEAT,CAAAA,EAAA9M,CADAA,EAAA7W,EAAAokB,GAAA,GACAtN,CAAA,EAEA6M,EAAA,CACA,IAA4B/H,QAAAyI,CAAA,CAAAz4B,MAAAA,CAAA,EAAmC,WAAAg4B,iBAAA,CAAAJ,EAAA5G,aAAA,EAC/D,GAAAhxB,EACA,OAAiC6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CACpE,CACA,IAAAy4B,EACA,OAAiC5vB,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAA,KACpE,CACAgwB,EAAAyI,CACA,KACA,CACA,IAA4B5vB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAAi4B,OAAA,CAAAL,EAAAxa,YAAA,EAC1C,GAAApd,EACA,MAAAA,CAAA,OAUA,KAAA81B,YAAA,CARA9F,EAAA,CACA5S,aAAAwa,EAAAxa,YAAA,CACA4T,cAAA4G,EAAA5G,aAAA,CACAZ,KAAAvnB,EAAAunB,IAAA,CACAsI,WAAA,SACAvI,WAAAlF,EAAAC,EACAgF,WAAAjF,CACA,GAEA,KAAAsK,qBAAA,aAAAvF,EACA,OACA,CAAyBnnB,KAAA,CAAQunB,KAAAJ,EAAAI,IAAA,CAAAJ,QAAAA,CAAA,EAA6BhwB,MAAA,KAC9D,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQmnB,QAAA,KAAAI,KAAA,MAA2BpwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAOA24B,eAAAf,CAAA,EACA,IAAAlsB,EACA,OAAe8nB,GAAS,+BACxB,IACA,IAAAoE,EAAA,CACA,IAA4B/uB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAA23B,UAAA,GAC1C,GAAA33B,EACA,MAAAA,CAAA,CAEA43B,EAAA,OAAAlsB,CAAAA,EAAA7C,EAAAmnB,OAAA,GAAAtkB,KAAA,IAAAA,EAAAA,EAAA/M,KAAAA,CAAA,CACA,GACA,CAAAi5B,CAAAA,MAAAA,EAAA,OAAAA,EAAA5G,aAAA,EACA,UAA8BpC,EAAuB,CAErD,IAAwBoB,QAAAA,CAAA,CAAAhwB,MAAAA,CAAA,EAAiB,WAAAg4B,iBAAA,CAAAJ,EAAA5G,aAAA,EACzC,GAAAhxB,EACA,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,CACA,IAAAgwB,EACA,OAA6BnnB,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAA,KAChE,CACA,OAAyB6I,KAAA,CAAQunB,KAAAJ,EAAAI,IAAA,CAAAJ,QAAAA,CAAA,EAA6BhwB,MAAA,KAC9D,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQunB,KAAA,KAAAJ,QAAA,MAA2BhwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CAIA21B,oBAAA,CACA,OAAenC,GAAS,+BACxB,IACA,IAAqB/H,KACrB,UAA8BqD,GAA8B,wBAC5D,SAAA4G,oBAAA,GACA,UAA8B5G,GAA8B,wCAE5D,IAAA3J,EAA0CgH,GAAkB,qBAC5D,GAAAhH,EAAA,CACA,IAAAyT,EAAuCzM,GAAkB,cACzD,IAAAyM,EACA,UAAkC9J,GAA8B,2BAChE,IAAA9uB,EAAkCmsB,GAAkB,SACpD,IAAAnsB,EACA,UAAkC8uB,GAA8B,4BAChE,IAA8BA,GAA8B3J,EAAA,CAAsBnlB,MAAAA,EAAAsN,KAAAsrB,CAAA,EAAyB,CAC3G,IACAC,EAAuC1M,GAAkB,kBACzD2M,EAA+C3M,GAAkB,0BACjE/O,EAAqC+O,GAAkB,gBACvD,IAAA/O,EACA,UAA8B0R,GAA8B,6BAC5D,IAAAqB,EAAmChE,GAAkB,cACrD,IAAAgE,EACA,UAA8BrB,GAA8B,2BAC5D,IAAAkC,EAAsC7E,GAAkB,iBACxD,IAAA6E,EACA,UAA8BlC,GAA8B,8BAC5D,IAAA4J,EAAmCvM,GAAkB,cACrD,IAAAuM,EACA,UAA8B5J,GAA8B,2BAC5D,IAAA5D,EAAArJ,KAAAsJ,KAAA,CAAAC,KAAAC,GAAA,QACA6E,EAAAhF,EAAAje,SAAAkjB,GACA,CAAwBtnB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAAi4B,OAAA,CAAA7a,GACtC,GAAApd,EACA,MAAAA,CAAA,CACA,IAAAowB,EAAAvnB,EAAAunB,IAAA,CACAJ,EAAA,CACA6I,eAAAA,EACAC,uBAAAA,EACA1b,aAAAA,EACA+S,WAAAljB,SAAAkjB,GACAD,WAAAA,EACAc,cAAAA,EACA0H,WAAAA,EACAtI,KAAAA,CACA,EACAyF,EAAqC1J,GAAkB,QAGvD,OADAhlB,OAAAvC,QAAA,CAAAm0B,IAAA,IACA,CAAyBlwB,KAAA,CAAQmnB,QAAAA,EAAA6F,aAAAA,CAAA,EAAuB71B,MAAA,KACxD,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQmnB,QAAA,KAAA6F,aAAA,MAAmC71B,MAAAA,CAAA,CACxE,OACAA,CAAA,CAEA,EACA,CAIA01B,sBAAA,CACA,OAAgBjK,MAChBnc,CAAAA,QAAqB6c,GAAkB,kBACvC7c,QAAwB6c,GAAkB,sBAC1C,CAQAsF,SAAA,CACA,IAAA/lB,EACA,OAAe8nB,GAAS,+BACxB,IAAoB3qB,KAAAA,CAAA,CAAA7I,MAAAo4B,CAAA,EAA4B,WAAAT,UAAA,GAChD,GAAAS,EACA,OAAyBp4B,MAAAo4B,CAAA,CACzB,CACA,IAAAjb,EAAA,OAAAzR,CAAAA,EAAA7C,EAAAmnB,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,CACA,GAAAD,EAAA,CACA,IAAwBnd,MAAAA,CAAA,EAAQ,WAAAy0B,KAAA,CAAAhD,OAAA,CAAAtU,GAChC,GAAAnd,GAGA,CAA0ByuB,CAAAA,GAAczuB,IAAAA,CAAAA,MAAAA,EAAAqE,MAAA,EAAArE,MAAAA,EAAAqE,MAAA,GACxC,OAAiCrE,MAAAA,CAAA,CAEjC,CACA,OACA,WAAA41B,cAAA,GACA,KAAAL,qBAAA,oBACA,CAAqBv1B,MAAA,KACrB,EACA,CAKAg5B,kBAAAr2B,CAAA,EACA,IAAAmb,EAAmBwN,KACnB2N,EAAA,CACAnb,GAAAA,EACAnb,SAAAA,EACAob,YAAA,KACA,KAAAkW,mBAAA,CAAA3hB,MAAA,CAAAwL,EACA,CACA,EAEA,OADA,KAAAmW,mBAAA,CAAAtzB,GAAA,CAAAmd,EAAAmb,GACA,CAAiBpwB,KAAA,CAAQowB,aAAAA,CAAA,EACzB,CAOAC,sBAAAvH,CAAA,CAAAvuB,EAAA,EAA6C,EAC7C,OAAeowB,GAAS,+BACxB,IACA,aAA6B/D,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,WACtEjE,KAAA,CAA4BqyB,MAAAA,EAAAyE,qBAAA,CAA+BC,cAAAjzB,EAAAkzB,YAAA,GAC3Dz3B,QAAA,KAAAA,OAAA,CACA+wB,WAAAxsB,EAAAwsB,UAAA,EAEA,CACA,MAAA5vB,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAKAm5B,oBAAAC,CAAA,EACA,OAAe5F,GAAS,+BACxB,IACA,IAAA6F,EAAAjO,KAAAC,GAAA,GAEA,aAA6B4C,GAAS,GAAcuF,GAAS,+BAE7D,OADA,MAA0BzF,GAAKI,IAAAA,GAC/B,MAAiCsB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,kCAC1EjE,KAAA,CAAgC0xB,cAAAoI,CAAA,EAChCv6B,QAAA,KAAAA,OAAA,CACAixB,MAA+BC,EAC/B,EACA,GAAiB,CAAA5B,EAAA9S,EAAAvb,IAAAA,GACjBA,EAAAE,KAAA,EACAF,EAAAE,KAAA,YAA4C+uB,IAE5C3D,KAAAC,GAAA,IAAA8C,EAAA,OAAAkL,EAlxBA,IAmxBA,CACA,MAAAr5B,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,CAAQmnB,QAAA,KAAAI,KAAA,MAA2BpwB,MAAAA,CAAA,CAChE,OACAA,CAAA,CAEA,EACA,CACA83B,gBAAAD,CAAA,EAMA,MALA,iBAAAA,GACAA,IAAA,GAAAA,GACA,iBAAAA,GACA,kBAAAA,GACA,eAAAA,CAEA,CACAnB,sBAAAC,CAAA,CAAAvzB,EAAA,EAAgD,EAChD,IAAAG,EAAA,KAAA+1B,kBAAA,CAAA3C,EAAA,CACA/G,WAAAxsB,EAAAwsB,UAAA,CACAgH,OAAAxzB,EAAAwzB,MAAA,CACAC,YAAAzzB,EAAAyzB,WAAA,GAMA,OAHYpL,MAAS,CAAAroB,EAAA0zB,mBAAA,EACrB3vB,OAAAvC,QAAA,CAAAiH,MAAA,CAAAtI,GAEA,CAAiBsF,KAAA,CAAQ8tB,SAAAA,EAAApzB,IAAAA,CAAA,EAAevD,MAAA,KACxC,CAKA+1B,oBAAA,CACA,IAAArqB,EACA,OAAe8nB,GAAS,+BACxB,IACA,IAAAoE,EAAA,MAA6C/K,GAAY,KAAAD,OAAA,MAAAgH,UAAA,EACzD,SAAAkE,eAAA,CAAAF,GAAA,CACA,OAAAA,GACA,YAAAhC,cAAA,IAEA,MACA,KACA1K,EAAArJ,KAAAsJ,KAAA,CAAAC,KAAAC,GAAA,QACA,WAAA3f,CAAAA,EAAAksB,EAAA1H,UAAA,GAAAxkB,KAAA,IAAAA,EAAAA,EAAA0iB,GAAA,EAAAlD,EHr1BO,IGs1BP,QAAA2I,gBAAA,EAAA+D,EAAA5G,aAAA,EACA,IAAgChxB,MAAAA,CAAA,EAAQ,WAAAg4B,iBAAA,CAAAJ,EAAA5G,aAAA,EACxChxB,IACAmJ,QAAA4R,GAAA,CAAA/a,EAAA8E,OAAA,EACA,WAAA8wB,cAAA,GAEA,MAEA,WAAAA,cAAA,EACA,MAGA,KAAA9B,cAAA,EACA,YAAAgC,YAAA,CAAA8B,EAAA,EAEA,KAAArC,qBAAA,aAAAqC,EACA,CAEA,MAAA/yB,EAAA,CACAsE,QAAAnJ,KAAA,CAAA6E,GACA,MACA,CACA,EACA,CACAmzB,kBAAAoB,CAAA,EACA,IAAA1tB,EAAAiB,EACA,OAAe6mB,GAAS,+BAExB,QAAAa,kBAAA,CACA,YAAAA,kBAAA,CAAAl0B,OAAA,CAEA,IAEA,GADA,KAAAk0B,kBAAA,KAA8C5G,GAC9C,CAAA2L,EACA,UAA8BxK,EAAuB,CAErD,IAAwB/lB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,WAAAm5B,mBAAA,CAAAC,GACtC,GAAAp5B,EACA,MAAAA,CAAA,CACA,IAAA6I,EAAAmnB,OAAA,CACA,UAA8BpB,EAAuB,OACrD,KAAAkH,YAAA,CAAAjtB,EAAAmnB,OAAA,EACA,KAAAuF,qBAAA,mBAAA1sB,EAAAmnB,OAAA,EACA,IAAAlwB,EAAA,CAAiCkwB,QAAAnnB,EAAAmnB,OAAA,CAAAhwB,MAAA,MAEjC,OADA,KAAAq0B,kBAAA,CAAAz0B,OAAA,CAAAE,GACAA,CACA,CACA,MAAAE,EAAA,CACA,GAAoBuuB,GAAWvuB,GAAA,CAC/B,IAAAF,EAAA,CAAqCkwB,QAAA,KAAAhwB,MAAAA,CAAA,EAErC,OADA,OAAA0L,CAAAA,EAAA,KAAA2oB,kBAAA,GAAA3oB,KAAA,IAAAA,GAAAA,EAAA9L,OAAA,CAAAE,GACAA,CACA,OACA,OAAA6M,CAAAA,EAAA,KAAA0nB,kBAAA,GAAA1nB,KAAA,IAAAA,GAAAA,EAAAlN,MAAA,CAAAO,GACAA,CAAA,QAEA,CACA,KAAAq0B,kBAAA,MAEA,EACA,CACAkB,sBAAArhB,CAAA,CAAA8b,CAAA,CAAAlU,EAAA,IACA,KAAAyY,gBAAA,EAAAzY,GACA,KAAAyY,gBAAA,CAAAgF,WAAA,EAAgDrlB,MAAAA,EAAA8b,QAAAA,CAAA,GAEhD,KAAAiE,mBAAA,CAAAl1B,OAAA,IAAA+S,EAAAnP,QAAA,CAAAuR,EAAA8b,GACA,CAKA8F,aAAA9F,CAAA,EACA,OAAewD,GAAS,+BACxB,KAAAM,cAAA,EACA,MAAAU,eAAA,CAAAxE,CAAA,EAEA,KAAA8D,cAAA,EAAA9D,EAAAE,UAAA,EACA,YAAAsJ,eAAA,CAAAxJ,EAAA,CAEA,EACA,CACAwJ,gBAAA5B,CAAA,EACA,OAAejL,GAAY,KAAAC,OAAA,MAAAgH,UAAA,CAAAgE,EAC3B,CACAhC,gBAAA,CACA,OAAepC,GAAS,+BACxB,KAAAM,cAAA,CACA,MAAsB/G,GAAe,KAAAH,OAAA,MAAAgH,UAAA,EAGrC,KAAAY,eAAA,OAGA,CAOAiF,kCAAA,CACA,IAAA92B,EAAA,KAAAyxB,yBAAA,CACA,KAAAA,yBAAA,MACA,IACAzxB,GAA4B8oB,MAAStkB,CAAAA,MAAAA,OAAA,OAAAA,OAAAR,mBAAA,GACrCQ,OAAAR,mBAAA,oBAAAhE,EAEA,CACA,MAAAzF,EAAA,CACAiM,QAAAnJ,KAAA,6CAAA9C,EACA,CACA,CAKAw8B,mBAAA,CACA,OAAelG,GAAS,+BACxB,WAAAmG,gBAAA,GACA,IAAAC,EAAAzV,YAAA,SAAA0V,qBAAA,GAx7BA,IAy7BA,MAAA1F,iBAAA,CAAAyF,EACAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAAE,KAAA,EAOAF,EAAAE,KAAA,GAGA,WAAAD,qBAAA,EACA,EACA,CAKAF,kBAAA,CACA,OAAenG,GAAS,+BACxB,IAAAoG,EAAA,KAAAzF,iBAAA,CACA,KAAAA,iBAAA,MACAyF,GACAhX,cAAAgX,EAEA,EACA,CAuBAG,kBAAA,CACA,OAAevG,GAAS,+BACxB,KAAAiG,gCAAA,GACA,WAAAC,iBAAA,EACA,EACA,CASAM,iBAAA,CACA,OAAexG,GAAS,+BACxB,KAAAiG,gCAAA,GACA,WAAAE,gBAAA,EACA,EACA,CAIAE,uBAAA,CACA,OAAerG,GAAS,+BACxB,IAAAnI,EAAAD,KAAAC,GAAA,GACA,IACA,IAAwBxiB,KAAA,CAAQmnB,QAAAA,CAAA,CAAS,EAAI,WAAA2H,UAAA,GAC7C,IAAA3H,GAAA,CAAAA,EAAAgB,aAAA,GAAAhB,EAAAE,UAAA,CACA,MACA,CAEA,IAAA+J,EAAApY,KAAAC,KAAA,EAAAkO,IAAAA,EAAAE,UAAA,CAAA7E,CAAA,EA1gCA,KA2gCA4O,EAxgCA,GAygCA,YAAAjC,iBAAA,CAAAhI,EAAAgB,aAAA,EAEA,CACA,MAAA9zB,EAAA,CACAiM,QAAAnJ,KAAA,0EAAA9C,EACA,CACA,EACA,CAMA84B,yBAAA,CACA,OAAexC,GAAS,+BACxB,IAAiB/H,MAAS,CAAAtkB,CAAAA,MAAAA,OAAA,OAAAA,OAAAX,gBAAA,EAK1B,OAJA,KAAAqtB,gBAAA,EAEA,KAAAkG,gBAAA,GAEA,EACA,CACA,IACA,KAAA3F,yBAAA,KAAuDZ,GAAS,+BAAsC,kBAAA0G,oBAAA,OACtG/yB,MAAAA,QAAAA,OAAAX,gBAAA,yBAAA4tB,yBAAA,EAGA,WAAA8F,oBAAA,IACA,CACA,MAAAl6B,EAAA,CACAmJ,QAAAnJ,KAAA,2BAAAA,EACA,CACA,EACA,CAIAk6B,qBAAAC,CAAA,EACA,OAAe3G,GAAS,+BACxB9H,YAAAA,SAAA0O,eAAA,EACAD,IAEA,WAAA7F,iBAAA,CACA,WAAAyB,kBAAA,IAEA,KAAAlC,gBAAA,EAGA,KAAA6F,iBAAA,IAGA,WAAAhO,SAAA0O,eAAA,EACA,KAAAvG,gBAAA,EACA,KAAA8F,gBAAA,EAGA,EACA,CAOAL,mBAAA3C,CAAA,CAAAvzB,CAAA,EACA,IAAAi3B,EAAA,aAAuCC,mBAAA3D,GAA6B,GAOpE,GANAvzB,CAAAA,MAAAA,EAAA,OAAAA,EAAAwsB,UAAA,GACAyK,EAAAv3B,IAAA,gBAA0Cw3B,mBAAAl3B,EAAAwsB,UAAA,EAAuC,GAEjFxsB,CAAAA,MAAAA,EAAA,OAAAA,EAAAwzB,MAAA,GACAyD,EAAAv3B,IAAA,WAAqCw3B,mBAAAl3B,EAAAwzB,MAAA,EAAmC,GAExExzB,MAAAA,EAAA,OAAAA,EAAAyzB,WAAA,EACA,IAAAxuB,EAAA,IAAAhH,gBAAA+B,EAAAyzB,WAAA,EACAwD,EAAAv3B,IAAA,CAAAuF,EAAAzK,QAAA,GACA,OACA,GAAkB,KAAA2F,GAAA,CAAS,aAAa82B,EAAAl4B,IAAA,MAAoB,EAE5D4yB,UAAAtZ,CAAA,EACA,IAAA/P,EACA,OAAe8nB,GAAS,+BACxB,IACA,IAAwB3qB,KAAAsvB,CAAA,CAAAn4B,MAAAo4B,CAAA,EAAyC,WAAAT,UAAA,GACjE,GAAAS,EACA,OAA6BvvB,KAAA,KAAA7I,MAAAo4B,CAAA,CAC7B,CACA,aAA6B3I,GAAQ,KAAAjzB,KAAA,aAA0B,KAAA+G,GAAA,CAAS,WAAWkY,EAAA8e,QAAA,CAAgB,GACnG17B,QAAA,KAAAA,OAAA,CACA6wB,IAAA,OAAAhkB,CAAAA,EAAAysB,MAAAA,EAAA,OAAAA,EAAAnI,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,EAEA,CACA,MAAApd,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAIA60B,QAAApZ,CAAA,EACA,IAAA/P,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,IACA,IAAwB3qB,KAAAsvB,CAAA,CAAAn4B,MAAAo4B,CAAA,EAAyC,WAAAT,UAAA,GACjE,GAAAS,EACA,OAA6BvvB,KAAA,KAAA7I,MAAAo4B,CAAA,CAC7B,CACA,IAAwBvvB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,MAAQyvB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,WACvFjE,KAAA,CACAk7B,cAAA/e,EAAAgf,YAAA,CACAC,YAAAjf,EAAAkf,UAAA,CACAC,OAAAnf,EAAAmf,MAAA,EAEA/7B,QAAA,KAAAA,OAAA,CACA6wB,IAAA,OAAAhkB,CAAAA,EAAAysB,MAAAA,EAAA,OAAAA,EAAAnI,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,GAEA,GAAApd,EACA,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,CAIA,MAHA,QAAA2M,CAAAA,EAAA9D,MAAAA,EAAA,OAAAA,EAAAgyB,IAAA,GAAAluB,KAAA,IAAAA,EAAA,OAAAA,EAAAmuB,OAAA,GACAjyB,CAAAA,EAAAgyB,IAAA,CAAAC,OAAA,2BAA4D,EAAQjyB,EAAAgyB,IAAA,CAAAC,OAAA,CAAkB,GAEtF,CAAyBjyB,KAAAA,EAAA7I,MAAA,KACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAIA20B,QAAAlZ,CAAA,EACA,IAAA/P,EACA,OAAe8nB,GAAS,+BACxB,IACA,IAAwB3qB,KAAAsvB,CAAA,CAAAn4B,MAAAo4B,CAAA,EAAyC,WAAAT,UAAA,GACjE,GAAAS,EACA,OAA6BvvB,KAAA,KAAA7I,MAAAo4B,CAAA,CAC7B,CACA,IAAwBvvB,KAAAA,CAAA,CAAA7I,MAAAA,CAAA,EAAc,MAAQyvB,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,WAAWkY,EAAA8e,QAAA,CAAgB,UAClHj7B,KAAA,CAA4BgO,KAAAmO,EAAAnO,IAAA,CAAAytB,aAAAtf,EAAAuf,WAAA,EAC5Bn8B,QAAA,KAAAA,OAAA,CACA6wB,IAAA,OAAAhkB,CAAAA,EAAAysB,MAAAA,EAAA,OAAAA,EAAAnI,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,GAEA,GAAApd,EACA,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,CAGA,OAFA,WAAA81B,YAAA,CAAAn4B,OAAAkO,MAAA,EAAwDqkB,WAAArO,KAAAsJ,KAAA,CAAAC,KAAAC,GAAA,QAAAxiB,EAAAsnB,UAAA,EAA6DtnB,IACrH,KAAA0sB,qBAAA,0BAAA1sB,GACA,CAAyBA,KAAAA,EAAA7I,MAAAA,CAAA,CACzB,CACA,MAAAA,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAIAi1B,WAAAxZ,CAAA,EACA,IAAA/P,EACA,OAAe8nB,GAAS,+BACxB,IACA,IAAwB3qB,KAAAsvB,CAAA,CAAAn4B,MAAAo4B,CAAA,EAAyC,WAAAT,UAAA,GACjE,GAAAS,EACA,OAA6BvvB,KAAA,KAAA7I,MAAAo4B,CAAA,CAC7B,CACA,aAA6B3I,GAAQ,KAAAjzB,KAAA,WAAwB,KAAA+G,GAAA,CAAS,WAAWkY,EAAA8e,QAAA,CAAgB,aACjG17B,QAAA,KAAAA,OAAA,CACA6wB,IAAA,OAAAhkB,CAAAA,EAAAysB,MAAAA,EAAA,OAAAA,EAAAnI,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,EAEA,CACA,MAAApd,EAAA,CACA,GAAoBuuB,GAAWvuB,GAC/B,OAA6B6I,KAAA,KAAA7I,MAAAA,CAAA,CAC7B,OACAA,CAAA,CAEA,EACA,CAIAm1B,oBAAA1Z,CAAA,EACA,OAAe+X,GAAS,+BACxB,IAAoB3qB,KAAAoyB,CAAA,CAAAj7B,MAAAk7B,CAAA,EAA6C,WAAAjG,UAAA,EACjEsF,SAAA9e,EAAA8e,QAAA,UAEA,EACA,CAAyB1xB,KAAA,KAAA7I,MAAAk7B,CAAA,EAEzB,WAAAvG,OAAA,EACA4F,SAAA9e,EAAA8e,QAAA,CACAS,YAAAC,EAAAnd,EAAA,CACAxQ,KAAAmO,EAAAnO,IAAA,EAJA,EAOA,CAIAgkB,cAAA,CACA,OAAekC,GAAS,+BACxB,IAAoB3qB,KAAA,CAAQunB,KAAAA,CAAA,CAAM,CAAApwB,MAAAq4B,CAAA,EAAsB,WAAAJ,OAAA,GACxD,GAAAI,EACA,OAAyBxvB,KAAA,KAAA7I,MAAAq4B,CAAA,CACzB,CACA,IAAAhF,EAAA,CAAAjD,MAAAA,EAAA,OAAAA,EAAAiD,OAAA,MACAwH,EAAAxH,EAAAhkB,MAAA,IAAA8rB,SAAAA,EAAAT,WAAA,EAAAS,aAAAA,EAAA92B,MAAA,EACA,OACAwE,KAAA,CACAma,IAAAqQ,EACAwH,KAAAA,CACA,EACA76B,MAAA,KAEA,EACA,CAIAq1B,iCAAA,CACA,IAAA3pB,EAAAiB,EACA,OAAe6mB,GAAS,+BACxB,IAAoB3qB,KAAA,CAAQmnB,QAAAA,CAAA,CAAS,CAAAhwB,MAAAo4B,CAAA,EAAyB,WAAAT,UAAA,GAC9D,GAAAS,EACA,OAAyBvvB,KAAA,KAAA7I,MAAAo4B,CAAA,CACzB,CACA,IAAApI,EACA,OACAnnB,KAAA,CAA4BuyB,aAAA,KAAAC,UAAA,KAAAC,6BAAA,IAC5Bt7B,MAAA,KAEA,CACA,IAAAoU,EAAA,KAAAkkB,UAAA,CAAAtI,EAAA5S,YAAA,EACAge,EAAA,KACAhnB,EAAAmnB,GAAA,EACAH,CAAAA,EAAAhnB,EAAAmnB,GAAA,EAEA,IAAAF,EAAAD,EACAI,EAAA,OAAA7uB,CAAAA,EAAA,OAAAjB,CAAAA,EAAAskB,EAAAI,IAAA,CAAAiD,OAAA,GAAA3nB,KAAA,IAAAA,EAAA,OAAAA,EAAA2D,MAAA,IAAA8rB,aAAAA,EAAA92B,MAAA,IAAAsI,KAAA,IAAAA,EAAAA,EAAA,GACA6uB,EAAAx5B,MAAA,IACAq5B,CAAAA,EAAA,QAEA,IAAAC,EAAAlnB,EAAAqnB,GAAA,KACA,OAAqB5yB,KAAA,CAAQuyB,aAAAA,EAAAC,UAAAA,EAAAC,6BAAAA,CAAA,EAAuDt7B,MAAA,KACpF,EACA,CACA,CEvyCO,MAAA07B,WAAiC1H,GACxC9uB,YAAA9B,CAAA,EACA,MAAAA,EACA,CACA,CCLA,IAAIu4B,GAAyB,SAAA/4B,CAAA,CAAAqH,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAE7B,UAAAD,CAAAA,GAAAA,CAAAA,EAAA1K,OAAA,YAAAI,CAAA,CAAAH,CAAA,EACA,SAAA2K,EAAAhM,CAAA,EAAoC,IAAMiM,EAAAF,EAAA3L,IAAA,CAAAJ,GAAA,CAA+B,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACrF,SAAAwE,EAAAtD,CAAA,EAAmC,IAAMiM,EAAAF,EAAA,MAAA/L,GAAA,CAAmC,MAAAlB,EAAA,CAAYuC,EAAAvC,EAAA,EACxF,SAAAmN,EAAAvK,CAAA,MAJA1B,CAIgC0B,CAAAA,EAAApB,IAAA,CAAAkB,EAAAE,EAAA1B,KAAA,EAAAkM,CAJJlM,CAA5BA,EAIgC0B,EAAA1B,KAAA,YAJJ8L,EAAA9L,EAAA,IAAA8L,EAAA,SAAAtK,CAAA,EAA+DA,EAAAxB,EAAA,EAAiB,EAI5EuD,IAAA,CAAAyI,EAAA1I,EAAA,CAChC2I,EAAA,CAAAF,EAAAA,EAAAI,KAAA,CAAA3H,EAAAqH,GAAA,KAAAzL,IAAA,GACA,EACA,EASA,IAAAusB,GAAA,CACAlsB,QAAa4qB,EACb,EACAmB,GAAA,CACAxe,OAAA,QACA,EACAye,GAAA,CACAgJ,iBAAA,GACAC,eAAA,GACAC,mBAAA,EACA,EACAjJ,GAAA,EAMe,OAAA8Q,GAaf12B,YAAA22B,CAAA,CAAA9R,CAAA,CAAA3mB,CAAA,EACA,IAAAsI,EAAAiB,EAAAC,EAAAM,EAAAgS,EAAAC,EAAA+S,EAAA4J,EAGA,GAFA,KAAAD,WAAA,CAAAA,EACA,KAAA9R,WAAA,CAAAA,EACA,CAAA8R,EACA,wCACA,IAAA9R,EACA,wCACA,IAAAgS,EAA6B7R,GAAkB2R,EAC/C,MAAAG,WAAA,IAA8BD,EAAa,cAAA93B,OAAA,gBAC3C,KAAAg4B,OAAA,IAA0BF,EAAa,UACvC,KAAAG,UAAA,IAA6BH,EAAa,aAC1C,IAAAI,EAAAJ,EAAAhvB,KAAA,kCACA,GAAAovB,EAAA,CACA,IAAAC,EAAAL,EAAAh4B,KAAA,KACA,MAAAs4B,YAAA,IAAmCD,CAAA,IAAY,aAAaA,CAAA,IAAY,GAAGA,CAAA,IAAY,OAGvF,KAAAC,YAAA,IAAmCN,EAAa,eAGhD,IAAAO,EAAA,MAAwC,IAAA5pB,IAAA,KAAAupB,OAAA,EAAAM,QAAA,CAAAx4B,KAAA,SAA6C,aACrFy4B,EAAA,CACAnS,GAAAO,GACAH,SAAAK,GACAP,KAAA5sB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAgDgf,IAAA,CAA2B+I,WAAA0I,CAAA,GAC3EjgC,OAAA0uB,EACA,EACA9b,EAAyBkb,GAAoB/mB,MAAAA,EAAAA,EAAA,EAAsD,CAAAo5B,EACnG,MAAA5I,UAAA,QAAAjnB,CAAAA,EAAA,OAAAjB,CAAAA,EAAAuD,EAAAsb,IAAA,GAAA7e,KAAA,IAAAA,EAAA,OAAAA,EAAAkoB,UAAA,GAAAjnB,KAAA,IAAAA,EAAAA,EAAA,GACA,KAAA9N,OAAA,QAAAqO,CAAAA,EAAA,OAAAN,CAAAA,EAAAqC,EAAA5S,MAAA,GAAAuQ,KAAA,IAAAA,EAAA,OAAAA,EAAA/N,OAAA,GAAAqO,KAAA,IAAAA,EAAAA,EAAA,GACA,KAAAqd,IAAA,MAAAkS,uBAAA,QAAAvd,CAAAA,EAAAjQ,EAAAsb,IAAA,GAAArL,KAAA,IAAAA,EAAAA,EAAA,EAAyG,MAAArgB,OAAA,QAAAsgB,CAAAA,EAAAlQ,EAAA5S,MAAA,GAAA8iB,KAAA,IAAAA,EAAA,OAAAA,EAAA3iB,KAAA,EACzG,KAAAA,KAAA,CAAqBstB,GAAaC,EAAA,KAAA2S,eAAA,CAAA7xB,IAAA,cAAAqnB,CAAAA,EAAAjjB,EAAA5S,MAAA,GAAA61B,KAAA,IAAAA,EAAA,OAAAA,EAAA11B,KAAA,EAClC,KAAAiuB,QAAA,MAAAkS,mBAAA,CAAAh/B,OAAAkO,MAAA,EAAiEhN,QAAA,KAAAA,OAAA,EAAuBoQ,EAAAwb,QAAA,GACxF,KAAAoG,IAAA,KAAwBre,EAAe,GAAIupB,EAAa,WACxDl9B,QAAA,KAAAA,OAAA,CACAuN,OAAA,OAAA0vB,CAAAA,EAAA7sB,EAAAob,EAAA,GAAAyR,KAAA,IAAAA,EAAA,OAAAA,EAAA1vB,MAAA,CACA5P,MAAA,KAAAA,KAAA,GAEA,KAAAogC,oBAAA,EACA,CAIA,IAAAC,WAAA,CACA,WAAmBzxB,EAAe,KAAAixB,YAAA,EAClCx9B,QAAA,KAAAA,OAAA,CACA6L,YAAA,KAAAlO,KAAA,EAEA,CAIA,IAAAowB,SAAA,CACA,WAAmBpD,GAAqB,KAAA0S,UAAA,MAAAr9B,OAAA,MAAArC,KAAA,CACxC,CACA6R,KAAAoE,CAAA,EACA,YAAAoe,IAAA,CAAAxiB,IAAA,CAAAoE,EACA,CAUAE,IAAAC,CAAA,CAAAjI,EAAA,EAAqB,CAAAvH,CAAA,EACrB,YAAAytB,IAAA,CAAAle,GAAA,CAAAC,EAAAjI,EAAAvH,EACA,CAQAkR,QAAAvW,CAAA,CAAAgK,EAAA,CAA2BG,OAAA,GAAY,EACvC,YAAAuiB,QAAA,CAAAnW,OAAA,CAAAvW,EAAAgK,EACA,CAIA8a,aAAA,CACA,YAAA4H,QAAA,CAAA5H,WAAA,EACA,CAOAC,cAAAxO,CAAA,EACA,YAAAmW,QAAA,CAAA3H,aAAA,CAAAxO,EACA,CAIAyO,mBAAA,CACA,YAAA0H,QAAA,CAAA1H,iBAAA,EACA,CACA2Z,iBAAA,CACA,IAAAhxB,EAAAiB,EACA,OAAegvB,GAAS,+BACxB,IAAoB9yB,KAAAA,CAAA,EAAO,WAAA0hB,IAAA,CAAAoN,UAAA,GAC3B,cAAAhrB,CAAAA,EAAA,OAAAjB,CAAAA,EAAA7C,EAAAmnB,OAAA,GAAAtkB,KAAA,IAAAA,EAAA,OAAAA,EAAA0R,YAAA,GAAAzQ,KAAA,IAAAA,EAAAA,EAAA,MAEA,CACA8vB,wBAAA,CAA8B5I,iBAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAAC,mBAAAA,CAAA,CAAAnH,QAAAA,CAAA,CAAAgH,WAAAA,CAAA,CAA4E,CAAA/0B,CAAA,CAAArC,CAAA,EAC1G,IAAAsgC,EAAA,CACAr0B,cAAA,UAAqC,KAAAshB,WAAA,CAAiB,EACtDgT,OAAA,GAAuB,KAAAhT,WAAA,CAAiB,GAExC,WAAmB2R,GAAkB,CACrCn4B,IAAA,KAAA04B,OAAA,CACAp9B,QAAAlB,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAmDixB,GAAAj+B,GACnD+0B,WAAAA,EACAC,iBAAAA,EACAC,eAAAA,EACAC,mBAAAA,EACAnH,QAAAA,EACApwB,MAAAA,CACA,EACA,CACAmgC,oBAAAv5B,CAAA,EACA,WAAmBud,EAAc,KAAAqb,WAAA,CAAAr+B,OAAAkO,MAAA,CAAAlO,OAAAkO,MAAA,IAAiDzI,GAAA,CAAcqY,OAAA9d,OAAAkO,MAAA,EAAwBkxB,OAAA,KAAAhT,WAAA,EAA0B3mB,MAAAA,EAAA,OAAAA,EAAAqY,MAAA,IAClJ,CACAmhB,sBAAA,CAIA,OAHA,KAAArS,IAAA,CAAAyO,iBAAA,EAAA9kB,EAAA8b,IAAA,CACA,KAAAgN,mBAAA,CAAA9oB,EAAA8b,MAAAA,EAAA,OAAAA,EAAA5S,YAAA,UACA,EAEA,CACA4f,oBAAA9oB,CAAA,CAAA5I,CAAA,CAAA2xB,CAAA,EACA,CAAA/oB,oBAAAA,GAAAA,cAAAA,CAAA,GACA,KAAAgpB,kBAAA,GAAA5xB,GAEA,KAAAmf,QAAA,CAAApf,OAAA,CAAAC,MAAAA,EAAAA,EAAA,MACA,KAAA4xB,kBAAA,CAAA5xB,GAEA4I,CAAAA,eAAAA,GAAAA,iBAAAA,CAAA,IAEA,KAAAuW,QAAA,CAAApf,OAAA,MAAA0e,WAAA,EACA,WAAAkT,GACA,KAAA1S,IAAA,CAAAkH,OAAA,GACA,KAAAyL,kBAAA,CAAAv+B,KAAAA,EAEA,CACA,CC5LO,IAAAw+B,GAAA,CAAAtB,EAAA9R,EAAA3mB,IACP,IAAew4B,GAAcC,EAAA9R,EAAA3mB,GCT7B,SAAAg6B,GAAAC,CAAA,EACA,IAAAC,EACA18B,EACA28B,EACAC,EACAC,EACAC,EACA70B,EAEA,OADAqK,IACA,CACAyqB,KAYA,SAAAC,CAAA,EACAh9B,EAAAA,EAAAA,EAAAg9B,EAAAA,CAAA,CACAN,GAAAO,GAAAj9B,IACAA,CAAAA,EAAAA,EAAAL,KAAA,CAAAu9B,GAAA97B,MAAA,GAEAs7B,EAAA,GACA,IAAAt7B,EAAApB,EAAAoB,MAAA,CACA+7B,EAAA,EACAC,EAAA,GACA,KAAAD,EAAA/7B,GAAA,KASAi8B,EARAD,IACA,OAAAp9B,CAAA,CAAAm9B,EAAA,EACA,EAAAA,EAEAC,EAAA,IAEA,IAAAE,EAAA,GACAC,EAAAX,EAEA,QAAAY,EAAAb,EAAyCW,EAAA,GAAAE,EAAAp8B,EAAkC,EAAAo8B,EAE3EH,MADAA,CAAAA,EAAAr9B,CAAA,CAAAw9B,EAAA,GACAD,EAAA,EACAA,EAAAC,EAAAL,EACUE,OAAAA,GACVD,EAAA,GACAE,EAAAE,EAAAL,GACU,OAAAE,GACVC,CAAAA,EAAAE,EAAAL,CAAA,EAGA,GAAAG,EAAA,GACAX,EAAAv7B,EAAA+7B,EACAP,EAAAW,EACA,MAIA,EAFA,EACAX,EAAA,GAEAa,SASAC,CAAA,CAAAF,CAAA,CAAAD,CAAA,CAAAD,CAAA,EACA,GAAAA,IAAAA,EAAA,CACAr1B,EAAA7G,MAAA,KACAq7B,EAAA,CACA57B,KAAA,QACAqc,GAAA2f,EACAvpB,MAAAwpB,GAAA,OACA70B,KAAAA,EAAAtI,KAAA,MAEA,GAEAsI,EAAA,GACA40B,EAAA,QAEAC,EAAA,OACA,MACA,KACAa,EAAAJ,EAAA,EACAK,EAAAF,EAAA/9B,KAAA,CAAA69B,EAAAA,EAAAG,CAAAA,EAAAL,EAAAC,CAAA,GACA9zB,EAAA,EAEAA,EADAk0B,EACAL,EACMI,MAAAA,CAAA,CAAAF,EAAAD,EAAA,GACNA,EAAA,EAEAA,EAAA,EAEA,IAAAJ,EAAAK,EAAA/zB,EACAo0B,EAAAP,EAAA7zB,EACAjM,EAAAkgC,EAAA/9B,KAAA,CAAAw9B,EAAAA,EAAAU,GAAA7gC,QAAA,GACA,GAAA4gC,SAAAA,EACA31B,GAAAzK,EAAA,GAAA2T,MAAA,CAAA3T,EAAA,gBACM,GAAAogC,UAAAA,EACNd,EAAAt/B,OACM,GAAAogC,OAAAA,GAAApgC,EAAAsO,QAAA,SAEA,IAAA8xB,UAAAA,EAAA,CACN,IAAAE,EAAAzxB,SAAA7O,EAAA,IACAyc,OAAAC,KAAA,CAAA4jB,IACArB,EAAA,CACA57B,KAAA,qBACArD,MAAAsgC,CACA,EAEA,OATAjB,EAAAr/B,CASA,EArDAwC,EAAAm9B,EAAAI,EAAAD,GACAH,GAAAG,EAAA,CACA,CACAH,IAAA/7B,EACApB,EAAA,GACMm9B,EAAA,GACNn9B,CAAAA,EAAAA,EAAAL,KAAA,CAAAw9B,EAAA,CAEA,EAzDA7qB,MAAAA,CACA,EACA,SAAAA,GAAA,CACAoqB,EAAA,GACA18B,EAAA,GACA28B,EAAA,EACAC,EAAA,GACAC,EAAA,OACAC,EAAA,OACA70B,EAAA,EACA,CA8FA,CACA,IAAAi1B,GAAA,cACA,SAAAD,GAAAj9B,CAAA,EACA,OAAAk9B,GAAAa,KAAA,EAAAC,EAAAR,IAAAx9B,EAAAi+B,UAAA,CAAAT,KAAAQ,EACA,CCnHO,IAAM71B,GAAgBo0B,GAAa2B,2CAAuCA,QAAQC,GAAG,CAACC,yBAAyB,EAGzGC,GAAe,MAAOC,EAAgB52B,IAAmB,CACpE,IAAM62B,EAAU,IAAIC,YACd1rB,EAAU,IAAIC,YAEdnL,EAAM,MAAMhM,MAAM,6CAA8C,CACpEqC,QAAS,CACP,eAAgB,mBAChB4J,cAAe,CAAC,OAAO,EAAEH,EAAO,CAAC,EAEnCjF,OAAQ,OACR/D,KAAMgD,KAAKoG,SAAS,CAAC,CACnBC,MAAOS,EAAAA,aAAyB,CAChCi2B,SAAU,CACR,CACEC,KAAM,SACNC,QAAS,4SAIX,EACA,CACED,KAAM,OACNC,QAASL,CACX,EACD,CACDM,WAAY,IACZC,YAAa,EACbC,OAAQ,EACV,EACF,GAEA,GAAIl3B,MAAAA,EAAInE,MAAM,CACZ,MAAM,MAAU,+BAAgC,CAGlD,IAAMq7B,EAAS,IAAIC,eAAe,CAChC,MAAMC,MAAMC,CAAU,CAAE,CACtB,IAAMxC,EAAU,GAA4C,CAC1D,GAAInpB,UAAAA,EAAMzS,IAAI,CAAc,CAC1B,IAAMoH,EAAOqL,EAAMrL,IAAI,CAEvB,GAAIA,WAAAA,EAAmB,CACrBg3B,EAAWthB,KAAK,GAChB,MACF,CAAC,GAEG,CACF,IAAMlc,EAAOC,KAAKC,KAAK,CAACsG,GAClBjH,EAAOS,EAAKy9B,OAAO,CAAC,EAAE,CAACC,KAAK,CAACR,OAAO,CACpCS,EAAQb,EAAQpd,MAAM,CAACngB,GAC7Bi+B,EAAWI,OAAO,CAACD,EACrB,CAAE,MAAO9iC,EAAG,CACV2iC,EAAW7/B,KAAK,CAAC9C,EACnB,CACF,CAAC,EAGGgjC,EAAS9C,GAAaC,GAE5B,UAAW,IAAMO,KAASp1B,EAAIlJ,IAAI,CAChC4gC,EAAOvC,IAAI,CAACjqB,EAAQtR,MAAM,CAACw7B,GAE/B,CACF,GAEA,OAAO8B,CACT,wDCzEO,OAAAS,UAAAp7B,MACPG,YAAA,CAAkB+C,KAAAA,CAAA,CAAO,EACzB,yBAAiCA,EAAK;;;;;;;EAOtC,EACA,CACA,CACO,MAAAm4B,UAAAr7B,MACPG,aAAA,CACA;;EAEA,EACA,CACA,CACO,MAAAm7B,UAAAt7B,MACPG,aAAA,CACA;;EAEA,EACA,CACA,CCzBO,SAAAo7B,EAAAC,CAAA,EACP,IAAA1hC,EAAA,IAAAD,QACA,QAAAmH,EAAA3H,EAAA,GAAAT,OAAAqF,OAAA,CAAAu9B,GAAA,CACA,IAAAx9B,EAAA9D,MAAAC,OAAA,CAAAd,GAAAA,EAAA,CACAA,EACA,CACA,QAAAotB,KAAAzoB,EACApE,KAAAA,IAAA6sB,GACA3sB,EAAAG,MAAA,CAAA+G,EAAAylB,EAGA,CACA,OAAA3sB,CACA,CAUU,SAAA2hC,EAAAC,CAAA,EACV,IAEAb,EACAc,EACAC,EACAC,EACAC,EANAC,EAAA,GACAC,EAAA,EAMA,SAAAC,GAAA,CACA,KAAAD,EAAAN,EAAAz+B,MAAA,OAAA/D,IAAA,CAAAwiC,EAAA3nB,MAAA,CAAAioB,KACAA,GAAA,EAEA,OAAAA,EAAAN,EAAAz+B,MAAA,CAMA,KAAA++B,EAAAN,EAAAz+B,MAAA,GAGA,IAFA49B,EAAAmB,EACAF,EAAA,GACAG,KAEA,GAAAN,MADAA,CAAAA,EAAAD,EAAA3nB,MAAA,CAAAioB,EAAA,EACA,CAMA,IAJAJ,EAAAI,EACAA,GAAA,EACAC,IACAJ,EAAAG,EACAA,EAAAN,EAAAz+B,MAAA,EAbA0+B,MADAA,CAAAA,EAAAD,EAAA3nB,MAAA,CAAAioB,EAAA,GACAL,MAAAA,GAAsCA,MAAAA,GActCK,GAAA,CAGAA,CAAAA,EAAAN,EAAAz+B,MAAA,EAAAy+B,MAAAA,EAAA3nB,MAAA,CAAAioB,IAEAF,EAAA,GAEAE,EAAAH,EACAE,EAAAh+B,IAAA,CAAA29B,EAAA7N,SAAA,CAAAgN,EAAAe,IACAf,EAAAmB,GAIAA,EAAAJ,EAAA,CAEA,MACAI,GAAA,CACA,CAEA,EAAAF,GAAAE,GAAAN,EAAAz+B,MAAA,GACA8+B,EAAAh+B,IAAA,CAAA29B,EAAA7N,SAAA,CAAAgN,EAAAa,EAAAz+B,MAAA,EAEA,CACA,OAAA8+B,CACA,CACO,SAAAG,EAAApiC,CAAA,EACP,IAAAiB,EAAA,GACA,GAAAjB,EACA,QAAAkH,EAAA3H,EAAA,GAAAS,EAAAmE,OAAA,GACAlD,CAAA,CAAAiG,EAAA,CAAA3H,EACA,eAAA2H,EAAA7H,WAAA,IACA4B,CAAAA,CAAA,CAAAiG,EAAA,CAAAy6B,EAAApiC,EAAA,CAGA,CACA,OAAA0B,CACA,CAGW,SAAAohC,EAAA39B,CAAA,EACX,IACA,OAAAvF,OAAA,IAAA0U,IAAA1U,OAAAuF,IACA,CAAM,MAAAvD,EAAA,CACN,iCAA6ChC,OAAAuF,GAAY,+FACzD49B,MAAAnhC,CACA,EAAS,CAET,CCnGA,IAAAohC,EAAArkC,OAAA,YACAskC,EAAAtkC,OAAA,eACOukC,EAAAvkC,OAAA,YACP,OAAAwkC,EACA,CAAAD,EAAA,KACAD,EAAA,gBAEA5R,CAAA,GACA+R,YAAA/8B,CAAA,EACA,KAAA28B,EAAA,EACA,MAAAA,EAAA,CAAA5hC,QAAAI,OAAA,CAAA6E,EAAA,CAEA,CACAg9B,wBAAA,CACA,KAAAJ,EAAA,GACA,CACAK,UAAAvhC,CAAA,EACA,KAAAmhC,EAAA,CAAAx+B,IAAA,CAAA3C,EACA,CACA,CACO,MAAAwhC,UAAAJ,EACPr8B,YAAAuW,CAAA,EACA,MAAAA,EAAArW,OAAA,EACA,KAAAw8B,UAAA,CAAAnmB,EAAAxT,IAAA,CAMA,IAAA7C,SAAA,CACA,UAAkB+6B,EAAkB,CACpCl4B,KAAA,KAAA25B,UAAA,EACS,CAMTJ,aAAA,CACA,UAAkBrB,EAAkB,CACpCl4B,KAAA,KAAA25B,UAAA,EACS,CAET,CC5CO,SAASC,EAAmBC,CAAW,CAAEvF,CAAQ,CAAEwF,CAAc,CAAE,CACtE,IAAIC,EACJ,GAAIF,EAIA,IAAK,IAAMG,KAHPF,GACAA,CAAAA,EAAiBA,EAAe7jC,WAAW,IAE5B4jC,GAAY,CAC3B,IAAI3tB,EAAK+tB,EAET,IAAMC,EAAiB,IAA2B,EAA1BhuB,CAAAA,EAAM8tB,EAAKxK,MAAM,EAAY,KAAK,EAAItjB,EAAIpQ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC7F,WAAW,EAAE,CAC7F,GAAIq+B,IAAa4F,GAAkBJ,IAAmBE,EAAKG,aAAa,CAAClkC,WAAW,IAAO,KAA6B,EAA5BgkC,CAAAA,EAAOD,EAAKI,OAAO,EAAY,KAAK,EAAIH,EAAKI,IAAI,CAAC,GAAUC,EAAOrkC,WAAW,KAAO6jC,EAAe,EAAG,CAC/LC,EAAaC,EACb,KAAM,CACT,CAER,OACMD,CACX,CCXW,SAASQ,EAAoBC,CAAK,CAAE,CAC3C,OAAOA,EAAMx+B,OAAO,CAAC,MAAO,KAAO,GACvC,CCJW,SAASy+B,EAAUnc,CAAI,CAAE,CAChC,IAAMoc,EAAYpc,EAAK7oB,OAAO,CAAC,KACzBklC,EAAarc,EAAK7oB,OAAO,CAAC,KAC1BmlC,EAAWD,EAAa,IAAOD,CAAAA,EAAY,GAAKC,EAAaD,CAAAA,SACnE,GAAgBA,EAAY,GACjB,CACHG,SAAUvc,EAAKqM,SAAS,CAAC,EAAGiQ,EAAWD,EAAaD,CAAS,EAC7Dt6B,MAAOw6B,EAAWtc,EAAKqM,SAAS,CAACgQ,EAAYD,EAAY,GAAKA,EAAYhkC,KAAAA,CAAS,EAAI,EAAE,CACzFo6B,KAAM4J,EAAY,GAAKpc,EAAKhmB,KAAK,CAACoiC,GAAa,EAAE,EAGlD,CACHG,SAAUvc,EACVle,MAAO,GACP0wB,KAAM,EACV,CALC,CCVM,SAASgK,EAAcxc,CAAI,CAAEjC,CAAM,CAAE,CAC5C,GAAI,CAACiC,EAAKyc,UAAU,CAAC,MAAQ,CAAC1e,EAC1B,OAAOiC,CACV,CACD,GAAM,CAAEuc,SAAAA,CAAAA,CAAWz6B,MAAAA,CAAAA,CAAQ0wB,KAAAA,CAAAA,CAAO,CAAG2J,EAAUnc,GAC/C,MAAO,CAAC,EAAEjC,EAAO,EAAEwe,EAAS,EAAEz6B,EAAM,EAAE0wB,EAAK,CAAC,CCJrC,SAASkK,EAAc1c,CAAI,CAAE2c,CAAM,CAAE,CAC5C,GAAI,CAAC3c,EAAKyc,UAAU,CAAC,MAAQ,CAACE,EAC1B,OAAO3c,CACV,CACD,GAAM,CAAEuc,SAAAA,CAAAA,CAAWz6B,MAAAA,CAAAA,CAAQ0wB,KAAAA,CAAAA,CAAO,CAAG2J,EAAUnc,GAC/C,MAAO,CAAC,EAAEuc,EAAS,EAAEI,EAAO,EAAE76B,EAAM,EAAE0wB,EAAK,CAAC,CCHrC,SAASoK,EAAc5c,CAAI,CAAEjC,CAAM,CAAE,CAC5C,GAAI,iBAAOiC,EACP,MAAO,EACV,CACD,GAAM,CAAEuc,SAAAA,CAAAA,CAAW,CAAGJ,EAAUnc,GAChC,OAAOuc,IAAaxe,GAAUwe,EAASE,UAAU,CAAC1e,EAAS,IAC/D,CCPW,SAAS8e,EAAU7c,CAAI,CAAEgc,CAAM,CAAEH,CAAa,CAAEiB,CAAY,CAAE,QACrE,GAAcd,IAAWH,GAAkBiB,CAAAA,GAAgB,CAACF,EAAc5c,EAAKroB,WAAW,GAAI,CAAC,CAAC,EAAEqkC,EAAOrkC,WAAW,GAAG,CAAC,GAAK,CAACilC,EAAc5c,EAAKroB,WAAW,GAAI,SACrJ6kC,EAAcxc,EAAM,CAAC,CAAC,EAAEgc,EAAO,CAAC,EAEpChc,CADN,CCLE,SAAS+c,EAAuBC,CAAI,CAAE,CACzC,IAAIT,EAAWM,EAAUG,EAAKT,QAAQ,CAAES,EAAKhB,MAAM,CAAEgB,EAAKC,OAAO,CAAG7kC,KAAAA,EAAY4kC,EAAKnB,aAAa,CAAEmB,EAAKF,YAAY,EAQrH,MAPIE,CAAAA,EAAKC,OAAO,EAAI,CAACD,EAAKE,aAAa,GACnCX,CAAAA,EAAWN,EAAoBM,EAAAA,EAE/BS,EAAKC,OAAO,EACZV,CAAAA,EAAWG,EAAcF,EAAcD,EAAU,CAAC,YAAY,EAAES,EAAKC,OAAO,CAAC,CAAC,EAAGD,MAAAA,EAAKT,QAAQ,CAAW,aAAe,OAAO,GAEnIA,EAAWC,EAAcD,EAAUS,EAAKG,QAAQ,EACzC,CAACH,EAAKC,OAAO,EAAID,EAAKE,aAAa,CAAG,EAAUE,QAAQ,CAAC,KAAsCb,EAA/BG,EAAcH,EAAU,IAAe,CAAGN,EAAoBM,EAAS,CCRvI,SAASc,EAAYC,CAAM,CAAEhlC,CAAO,CAAE,CAC7C,IAAIsV,EACJ,OAAO,IAAuI,EAAtIA,CAAAA,EAAM,CAAClV,MAAMC,OAAO,CAACL,IAAe,EAAfA,EAAkB,KAAK,EAAIA,EAAQilC,IAAI,GAAMjlC,CAAAA,IAAe,EAAfA,EAAkB,KAAK,EAAIA,EAAQilC,IAAI,GAAKD,EAAOtH,QAAQ,EAAY,KAAK,EAAIpoB,EAAIpQ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC7F,WAAW,EAAE,CCClL,SAAS6lC,EAAoBjB,CAAQ,CAAET,CAAO,CAAE,KACnDN,EAEJ,IAAMiC,EAAgBlB,EAAS/+B,KAAK,CAAC,KAUrC,MATCs+B,CAAAA,GAAW,EAAE,EAAEC,IAAI,CAAC,GACjB,EAAI0B,CAAa,CAAC,EAAE,EAAIA,CAAa,CAAC,EAAE,CAAC9lC,WAAW,KAAOqkC,EAAOrkC,WAAW,KACzE6jC,EAAiBQ,EACjByB,EAAcC,MAAM,CAAC,EAAG,GACxBnB,EAAWkB,EAAc7hC,IAAI,CAAC,MAAQ,IAC/B,KAIR,CACH2gC,SAAAA,EACAf,eAAAA,CACJ,CACJ,CClBW,SAASmC,EAAiB3d,CAAI,CAAEjC,CAAM,CAAE,CAC/C,GAAI6e,EAAc5c,EAAMjC,GAAS,CAC7B,IAAM6f,EAAgB5d,EAAKhmB,KAAK,CAAC+jB,EAAOtiB,MAAM,EAC9C,OAAOmiC,EAAcnB,UAAU,CAAC,KAAOmB,EAAgB,CAAC,CAAC,EAAEA,EAAc,CAAC,CAC7E,OACM5d,CACX,CCVO,SAAS6d,EAAoBtB,CAAQ,CAAE1/B,CAAO,CAAE,CACnD,IAAIihC,EACJ,GAAM,CAAEX,SAAAA,CAAAA,CAAWY,KAAAA,CAAAA,CAAOb,cAAAA,CAAAA,CAAgB,CAAG,IAA0C,EAAzCY,CAAAA,EAAcjhC,EAAQmhC,UAAU,EAAYF,EAAc,CAAC,CAAC,CACpGd,EAAO,CACTT,SAAUA,EACVW,cAAeX,MAAAA,EAAmBA,EAASa,QAAQ,CAAC,KAAOF,CAAa,EAM5E,GAJIC,GAAYP,EAAcI,EAAKT,QAAQ,CAAEY,KACzCH,EAAKT,QAAQ,CAAGoB,EAAiBX,EAAKT,QAAQ,CAAEY,GAChDH,EAAKG,QAAQ,CAAGA,GAEhBtgC,CAAsB,IAAtBA,EAAQohC,SAAS,EAAajB,EAAKT,QAAQ,CAACE,UAAU,CAAC,iBAAmBO,EAAKT,QAAQ,CAACa,QAAQ,CAAC,SAAU,CAC3G,IAAM5b,EAAQwb,EAAKT,QAAQ,CAAC7+B,OAAO,CAAC,mBAAoB,IAAIA,OAAO,CAAC,UAAW,IAAIF,KAAK,CAAC,KACnFy/B,EAAUzb,CAAK,CAAC,EAAE,CACxBwb,EAAKT,QAAQ,CAAG/a,UAAAA,CAAK,CAAC,EAAE,CAAe,CAAC,CAAC,EAAEA,EAAMxnB,KAAK,CAAC,GAAG4B,IAAI,CAAC,KAAK,CAAC,CAAG,GAAG,CAC3EohC,EAAKC,OAAO,CAAGA,CACnB,CAAC,GACGc,EAAM,CACN,IAAMG,EAAaV,EAAoBR,EAAKT,QAAQ,CAAEwB,EAAKjC,OAAO,CAClEkB,CAAAA,EAAKhB,MAAM,CAAGkC,IAAkB,EAAlBA,EAAqB,KAAK,EAAIA,EAAW1C,cAAc,CACrEwB,EAAKT,QAAQ,CAAG,CAAC2B,IAAkB,EAAlBA,EAAqB,KAAK,EAAIA,EAAW3B,QAAQ,GAAKS,EAAKT,QAAQ,CACvF,OACMS,CACX,CCtBA,IAAAmB,EAAA,uFACA,SAAAC,EAAAphC,CAAA,CAAAqhC,CAAA,EACA,WAAAlyB,IAAA1U,OAAAuF,GAAAU,OAAA,CAAAygC,EAAA,aAAAE,GAAA5mC,OAAA4mC,GAAA3gC,OAAA,CAAAygC,EAAA,aACA,CACA,IAAAG,EAAA9nC,OAAA,kBACO,OAAA+nC,EACP5/B,YAAA/B,CAAA,CAAA4hC,CAAA,CAAAh9B,CAAA,EACA,IAAA68B,EACAxhC,CACA,kBAAA2hC,GAAA,aAAAA,GAAA,iBAAAA,GACAH,EAAAG,EACA3hC,EAAA2E,GAAA,IAEA3E,EAAA2E,GAAAg9B,GAAA,GAEA,KAAAF,EAAA,EACAthC,IAAAohC,EAAAxhC,EAAAyhC,GAAAxhC,EAAAwhC,IAAA,EACAxhC,QAAAA,EACAsgC,SAAA,EACA,EACA,KAAAsB,UAAA,EACA,CACAA,YAAA,CACA,IAAA7wB,EAAA+tB,EAAA+C,EAAAC,EAAAC,EACA,IAAAC,EAA6BhB,EAAmB,KAAAS,EAAA,CAAAthC,GAAA,CAAAu/B,QAAA,EAChDyB,WAAA,KAAAM,EAAA,CAAAzhC,OAAA,CAAAmhC,UAAA,CACAC,UAAA,EACA,EACA,MAAAK,EAAA,CAAAQ,YAAA,CAAsCxD,EAAkB,MAAA1tB,CAAAA,EAAA,KAAA0wB,EAAA,CAAAzhC,OAAA,CAAAmhC,UAAA,eAAArC,CAAAA,EAAA/tB,EAAAmwB,IAAA,SAAApC,EAAAoD,OAAA,CAAiH1B,EAAW,KAAAiB,EAAA,CAAAthC,GAAA,MAAAshC,EAAA,CAAAzhC,OAAA,CAAAvE,OAAA,GACpL,IAAAujC,EAAA,OAAA6C,CAAAA,EAAA,KAAAJ,EAAA,CAAAQ,YAAA,SAAAJ,EAAA7C,aAAA,UAAA8C,CAAAA,EAAA,KAAAL,EAAA,CAAAzhC,OAAA,CAAAmhC,UAAA,eAAAY,CAAAA,EAAAD,EAAAZ,IAAA,SAAAa,EAAA/C,aAAA,CACA,MAAAyC,EAAA,CAAAthC,GAAA,CAAAu/B,QAAA,CAAAsC,EAAAtC,QAAA,CACA,KAAA+B,EAAA,CAAAzC,aAAA,CAAAA,EACA,KAAAyC,EAAA,CAAAnB,QAAA,CAAA0B,EAAA1B,QAAA,KACA,KAAAmB,EAAA,CAAArB,OAAA,CAAA4B,EAAA5B,OAAA,CACA,KAAAqB,EAAA,CAAAtC,MAAA,CAAA6C,EAAA7C,MAAA,EAAAH,EACA,KAAAyC,EAAA,CAAApB,aAAA,CAAA2B,EAAA3B,aAAA,CAEA8B,gBAAA,CACA,OAAejC,EAAsB,CACrCI,SAAA,KAAAmB,EAAA,CAAAnB,QAAA,CACAF,QAAA,KAAAqB,EAAA,CAAArB,OAAA,CACApB,cAAA,KAAAyC,EAAA,CAAAzhC,OAAA,CAAAoiC,WAAA,CAAA7mC,KAAAA,EAAA,KAAAkmC,EAAA,CAAAzC,aAAA,CACAG,OAAA,KAAAsC,EAAA,CAAAtC,MAAA,CACAO,SAAA,KAAA+B,EAAA,CAAAthC,GAAA,CAAAu/B,QAAA,CACAW,cAAA,KAAAoB,EAAA,CAAApB,aAAA,EAEA,CACAgC,cAAA,CACA,YAAAZ,EAAA,CAAAthC,GAAA,CAAAmiC,MAAA,CAEA,IAAAlC,SAAA,CACA,YAAAqB,EAAA,CAAArB,OAAA,CAEA,IAAAA,QAAAA,CAAA,EACA,KAAAqB,EAAA,CAAArB,OAAA,CAAAA,CACA,CACA,IAAAjB,QAAA,CACA,YAAAsC,EAAA,CAAAtC,MAAA,IACA,CACA,IAAAA,OAAAA,CAAA,EACA,IAAApuB,EAAAwxB,EACA,SAAAd,EAAA,CAAAtC,MAAA,UAAApuB,CAAAA,EAAA,KAAA0wB,EAAA,CAAAzhC,OAAA,CAAAmhC,UAAA,eAAAoB,CAAAA,EAAAxxB,EAAAmwB,IAAA,SAAAqB,EAAAtD,OAAA,CAAA31B,QAAA,CAAA61B,EAAA,EACA,iEAAiFA,EAAO,IAExF,KAAAsC,EAAA,CAAAtC,MAAA,CAAAA,CACA,CACA,IAAAH,eAAA,CACA,YAAAyC,EAAA,CAAAzC,aAAA,CAEA,IAAAiD,cAAA,CACA,YAAAR,EAAA,CAAAQ,YAAA,CAEA,IAAAxoC,cAAA,CACA,YAAAgoC,EAAA,CAAAthC,GAAA,CAAA1G,YAAA,CAEA,IAAAinC,MAAA,CACA,YAAAe,EAAA,CAAAthC,GAAA,CAAAugC,IAAA,CAEA,IAAAA,KAAA1lC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAugC,IAAA,CAAA1lC,CACA,CACA,IAAAm+B,UAAA,CACA,YAAAsI,EAAA,CAAAthC,GAAA,CAAAg5B,QAAA,CAEA,IAAAA,SAAAn+B,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAg5B,QAAA,CAAAn+B,CACA,CACA,IAAAwnC,MAAA,CACA,YAAAf,EAAA,CAAAthC,GAAA,CAAAqiC,IAAA,CAEA,IAAAA,KAAAxnC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAqiC,IAAA,CAAAxnC,CACA,CACA,IAAAynC,UAAA,CACA,YAAAhB,EAAA,CAAAthC,GAAA,CAAAsiC,QAAA,CAEA,IAAAA,SAAAznC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAsiC,QAAA,CAAAznC,CACA,CACA,IAAAguB,MAAA,CACA,IAAA0W,EAAA,KAAAyC,cAAA,GACAG,EAAA,KAAAD,YAAA,GACA,SAAkB,KAAAI,QAAA,CAAc,IAAI,KAAA/B,IAAA,CAAU,EAAEhB,EAAS,EAAE4C,EAAO,EAAE,KAAA3M,IAAA,CAAU,EAE9E,IAAA3M,KAAA7oB,CAAA,EACA,KAAAshC,EAAA,CAAAthC,GAAA,CAAAohC,EAAAphC,GACA,KAAAyhC,UAAA,EACA,CACA,IAAAc,QAAA,CACA,YAAAjB,EAAA,CAAAthC,GAAA,CAAAuiC,MAAA,CAEA,IAAAhD,UAAA,CACA,YAAA+B,EAAA,CAAAthC,GAAA,CAAAu/B,QAAA,CAEA,IAAAA,SAAA1kC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAu/B,QAAA,CAAA1kC,CACA,CACA,IAAA26B,MAAA,CACA,YAAA8L,EAAA,CAAAthC,GAAA,CAAAw1B,IAAA,CAEA,IAAAA,KAAA36B,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAw1B,IAAA,CAAA36B,CACA,CACA,IAAAsnC,QAAA,CACA,YAAAb,EAAA,CAAAthC,GAAA,CAAAmiC,MAAA,CAEA,IAAAA,OAAAtnC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAmiC,MAAA,CAAAtnC,CACA,CACA,IAAA83B,UAAA,CACA,YAAA2O,EAAA,CAAAthC,GAAA,CAAA2yB,QAAA,CAEA,IAAAA,SAAA93B,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAA2yB,QAAA,CAAA93B,CACA,CACA,IAAA2nC,UAAA,CACA,YAAAlB,EAAA,CAAAthC,GAAA,CAAAwiC,QAAA,CAEA,IAAAA,SAAA3nC,CAAA,EACA,KAAAymC,EAAA,CAAAthC,GAAA,CAAAwiC,QAAA,CAAA3nC,CACA,CACA,IAAAslC,UAAA,CACA,YAAAmB,EAAA,CAAAnB,QAAA,CAEA,IAAAA,SAAAtlC,CAAA,EACA,KAAAymC,EAAA,CAAAnB,QAAA,CAAAtlC,EAAA4kC,UAAA,MAAA5kC,EAAA,IAAsEA,EAAM,EAE5ER,UAAA,CACA,YAAAwuB,IAAA,CAEAzH,QAAA,CACA,YAAAyH,IAAA,CAEA,CAAArvB,OAAAipC,GAAA,mCACA,OACA5Z,KAAA,KAAAA,IAAA,CACA0Z,OAAA,KAAAA,MAAA,CACAD,SAAA,KAAAA,QAAA,CACAE,SAAA,KAAAA,QAAA,CACA7P,SAAA,KAAAA,QAAA,CACA4N,KAAA,KAAAA,IAAA,CACAvH,SAAA,KAAAA,QAAA,CACAqJ,KAAA,KAAAA,IAAA,CACA9C,SAAA,KAAAA,QAAA,CACA4C,OAAA,KAAAA,MAAA,CACA7oC,aAAA,KAAAA,YAAA,CACAk8B,KAAA,KAAAA,IAAA,CAEA,CACAv0B,OAAA,CACA,WAAAsgC,EAAA9mC,OAAA,WAAA6mC,EAAA,CAAAzhC,OAAA,CACA,CACA,CChLA,IAAA6iC,EAAA,CACA,SACA,MACA,OACA,CACA,SAAAC,EAAAC,CAAA,EAEA,OADAA,EAAAA,EAAAjoC,WAAA,GACA+nC,EAAAv5B,QAAA,CAAAy5B,GAAAA,EAAAxnC,KAAAA,CAAA,CAEA,SAAAynC,EAAAx7B,CAAA,EACA,IAAAy7B,EAAA,GACA,QAAAtgC,KAAA6E,EACAA,CAAA,CAAA7E,EAAA,EACAsgC,CAAAA,CAAA,CAAAtgC,EAAA,CAAA6E,CAAA,CAAA7E,EAAA,EAGA,OAAAsgC,CACA,CACO,SAAAC,EAAA14B,CAAA,EACP,IAAA24B,EAAA,CACA,SAAA34B,GAAAA,EAAA2Y,IAAA,UAAyC3Y,EAAA2Y,IAAA,CAAO,EAChD,YAAA3Y,GAAAA,EAAA44B,OAAA,aAAkD54B,EAAA44B,OAAA,CAAAC,WAAA,GAAwB,EAC1E,WAAA74B,GAAAA,EAAA84B,MAAA,aAAgD94B,EAAA84B,MAAA,CAAS,EACzD,WAAA94B,GAAAA,EAAA6pB,MAAA,YAA+C7pB,EAAA6pB,MAAA,CAAS,EACxD,WAAA7pB,GAAAA,EAAA+4B,MAAA,WACA,aAAA/4B,GAAAA,EAAAg5B,QAAA,aACA,aAAAh5B,GAAAA,EAAAi5B,QAAA,cAAqDj5B,EAAAi5B,QAAA,CAAW,EAChE,CAAAx3B,MAAA,CAAAC,SACA,SAAc1B,EAAA7P,IAAA,CAAO,GAAGu8B,mBAAA1sB,EAAAxP,KAAA,QAAoC,EAAEmoC,EAAApkC,IAAA,OAAiB,EAIpE,SAAA2kC,EAAAC,CAAA,EACX,IAAAjoC,EAAA,IAAAo1B,IACA,QAAA8S,KAAAD,EAAAhjC,KAAA,QAAuC,CACvC,IAAAijC,EAAA,SACA,IAAAC,EAAAD,EAAAtpC,OAAA,MACAqI,EAAAihC,EAAAzmC,KAAA,GAAA0mC,GACA7oC,EAAA4oC,EAAAzmC,KAAA,CAAA0mC,EAAA,GACAnoC,EAAA6B,GAAA,CAAAoF,EAAA7B,mBAAA9F,GAAA,QACA,CACA,OAAAU,CACA,CAGW,SAAAooC,EAAAC,CAAA,EACX,IAAAA,EACA,MACA,CACA,KAAAppC,EAAAK,EAAA,IAAA4zB,EAAA,CAAA8U,EAAAK,GACA,CAAY1P,OAAAA,CAAA,CAAA+O,QAAAA,CAAA,CAAAY,SAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAA9gB,KAAAA,CAAA,CAAA+gB,SAAAA,CAAA,CAAAX,OAAAA,CAAA,EAAmEhpC,OAAA4pC,WAAA,CAAAvV,EAAAlzB,GAAA,GAAAiH,EAAAylB,EAAA,IAC/EzlB,EAAA7H,WAAA,GACAstB,EACA,GACAub,EAAA,CACAhpC,KAAAA,EACAK,MAAA8F,mBAAA9F,GACAq5B,OAAAA,EACA,GAAA+O,GAAA,CACAA,QAAA,IAAApb,KAAAob,EACA,CAAS,CACT,GAAAY,GAAA,CACAR,SAAA,EACA,CAAS,CACT,oBAAAS,GAAA,CACAX,OAAA7rB,OAAAwsB,EACA,CAAS,CACT9gB,KAAAA,EACA,GAAA+gB,GAAA,CACAT,SAAAX,EAAAoB,EACA,CAAS,CACT,GAAAX,GAAA,CACAA,OAAA,EACA,GAEA,OAAAP,EAAAW,EACA,CCzEW,MAAAS,EACXC,QAAA,IAAAvT,GAAA,aACAwT,CAAA,EACA,KAAA97B,QAAA,CAAA87B,EACA,IAAAvoC,EAAAuoC,EAAAlmC,GAAA,WACA,GAAArC,EAAA,CACA,IAAA0kC,EAA2BiD,EAAiB3nC,GAC5C,QAAApB,EAAAK,EAAA,GAAAylC,EACA,KAAA4D,OAAA,CAAA9mC,GAAA,CAAA5C,EAAA,CACAA,KAAAA,EACAK,MAAAA,CACA,EAEA,EAEA,CAAArB,OAAAwB,QAAA,IACA,YAAAkpC,OAAA,CAAA1qC,OAAAwB,QAAA,GACA,CAGA,IAAAopC,MAAA,CACA,YAAAF,OAAA,CAAAE,IAAA,CAEAnmC,IAAA,GAAAmJ,CAAA,EACA,IAAA5M,EAAA,iBAAA4M,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA5M,IAAA,CACA,YAAA0pC,OAAA,CAAAjmC,GAAA,CAAAzD,EACA,CACA6pC,OAAA,GAAAj9B,CAAA,EACA,IAAAwJ,EACA,IAAA6O,EAAA/jB,MAAAoP,IAAA,MAAAo5B,OAAA,EACA,IAAA98B,EAAA3I,MAAA,CACA,OAAAghB,EAAAlkB,GAAA,GAAAuc,EAAAjd,EAAA,GAAAA,EACA,CACA,IAAAL,EAAA,iBAAA4M,CAAA,IAAAA,CAAA,UAAAwJ,CAAAA,EAAAxJ,CAAA,YAAAwJ,EAAApW,IAAA,CACA,OAAAilB,EAAA3T,MAAA,GAAAw4B,EAAA,GAAAA,IAAA9pC,GAAAe,GAAA,GAAAuc,EAAAjd,EAAA,GAAAA,EACA,CACAqE,IAAA1E,CAAA,EACA,YAAA0pC,OAAA,CAAAhlC,GAAA,CAAA1E,EACA,CACA4C,IAAA,GAAAgK,CAAA,EACA,IAAA5M,EAAAK,EAAA,CAAAuM,IAAAA,EAAA3I,MAAA,EACA2I,CAAA,IAAA5M,IAAA,CACA4M,CAAA,IAAAvM,KAAA,CACA,CAAAuM,CAAA,CACA7L,EAAA,KAAA2oC,OAAA,CAMA,OALA3oC,EAAA6B,GAAA,CAAA5C,EAAA,CACAA,KAAAA,EACAK,MAAAA,CACA,GACA,KAAAwN,QAAA,CAAAjL,GAAA,UAAA1B,MAAAoP,IAAA,CAAAvP,GAAAA,GAAA,GAAAuc,EAAAmQ,EAAA,GAAkE8a,EAAS9a,IAAArpB,IAAA,QAC3E,KAIAmQ,OAAAw1B,CAAA,EACA,IAAAhpC,EAAA,KAAA2oC,OAAA,CACA3nC,EAAA,MAAAZ,OAAA,CAAA4oC,GAAAA,EAAAhpC,GAAA,IAAAA,EAAAwT,MAAA,CAAAvU,IAAAe,EAAAwT,MAAA,CAAAw1B,EAAA,CAEA,OADA,KAAAl8B,QAAA,CAAAjL,GAAA,UAAA1B,MAAAoP,IAAA,CAAAvP,GAAAA,GAAA,GAAAuc,EAAAjd,EAAA,GAAsEkoC,EAASloC,IAAA+D,IAAA,QAC/ErC,CACA,CAGAioC,OAAA,CAEA,OADA,KAAAz1B,MAAA,CAAArT,MAAAoP,IAAA,MAAAo5B,OAAA,CAAA5kC,IAAA,KACA,KAIA,CAAA9F,OAAAipC,GAAA,mCACA,wBAAiC1jC,KAAAoG,SAAA,CAAA/K,OAAA4pC,WAAA,MAAAE,OAAA,GAAiD,EAElF,CCzEA,SAAAxjC,EAAA+jC,CAAA,CAAAnpC,CAAA,EAEA,SAAAT,EAAA,GADAS,EAAAyT,MAAA,eACA01B,GAAA,CACA,IAAAC,EAA2B3B,EAASloC,GACpCS,EAAAG,MAAA,cAAAipC,EACA,CACA,CACA,SAAAC,EAAAnB,EAAA,CACAhpC,KAAA,GACAK,MAAA,EACA,CAAC,EAOD,OANA2oC,EAAAL,MAAA,EACAK,CAAAA,EAAAP,OAAA,KAAApb,KAAAA,KAAAC,GAAA,GAAA0b,IAAAA,EAAAL,MAAA,GAEAK,CAAAA,IAAA,GAAAA,EAAAxgB,IAAA,EAAAwgB,KAAApoC,IAAAooC,EAAAxgB,IAAA,GACAwgB,CAAAA,EAAAxgB,IAAA,MAEAwgB,CACA,CAKW,MAAAoB,EACXV,QAAA,IAAAvT,GAAA,aACAkU,CAAA,EACA,KAAAx8B,QAAA,CAAAw8B,EAEA,IAAAvpC,EAAA,KAAA+M,QAAA,CAAAg8B,MAAA,eACA,QAAAzoC,KAAAN,EAAA,CACA,IAAAglC,EAA2BqD,EAAoB/nC,GAC/C0kC,GACA,KAAA4D,OAAA,CAAA9mC,GAAA,CAAAkjC,EAAA9lC,IAAA,CAAA8lC,EAEA,CACA,CAGAriC,IAAA,GAAAmJ,CAAA,EACA,IAAA5E,EAAA,iBAAA4E,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA5M,IAAA,CACA,YAAA0pC,OAAA,CAAAjmC,GAAA,CAAAuE,EACA,CAGA6hC,OAAA,GAAAj9B,CAAA,EACA,IAAAwJ,EACA,IAAA6O,EAAA/jB,MAAAoP,IAAA,MAAAo5B,OAAA,CAAA1kC,MAAA,IACA,IAAA4H,EAAA3I,MAAA,CACA,OAAAghB,CACA,CACA,IAAAjd,EAAA,iBAAA4E,CAAA,IAAAA,CAAA,UAAAwJ,CAAAA,EAAAxJ,CAAA,YAAAwJ,EAAApW,IAAA,CACA,OAAAilB,EAAA3T,MAAA,IAAAzB,EAAA7P,IAAA,GAAAgI,EACA,CAGApF,IAAA,GAAAgK,CAAA,EACA,IAAA5M,EAAAK,EAAA2oC,EAAA,CAAAp8B,IAAAA,EAAA3I,MAAA,EACA2I,CAAA,IAAA5M,IAAA,CACA4M,CAAA,IAAAvM,KAAA,CACAuM,CAAA,IACA,CAAAA,CAAA,CACA7L,EAAA,KAAA2oC,OAAA,CAOA,OANA3oC,EAAA6B,GAAA,CAAA5C,EAAAmqC,EAAA,CACAnqC,KAAAA,EACAK,MAAAA,EACA,GAAA2oC,CAAA,IAEA9iC,EAAAnF,EAAA,KAAA8M,QAAA,EACA,KAIA0G,OAAA,GAAA3H,CAAA,EACA,IAAA5M,EAAA,iBAAA4M,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA5M,IAAA,CACA,YAAA4C,GAAA,EACA5C,KAAAA,EACAK,MAAA,GACAooC,QAAA,IAAApb,KAAA,EACA,EACA,CACA,CAAAruB,OAAAipC,GAAA,mCACA,yBAAkC1jC,KAAAoG,SAAA,CAAA/K,OAAA4pC,WAAA,MAAAE,OAAA,GAAiD,EAEnF,CEhFO,IAAAY,EAAAtrC,OAAA,mBACA,OAAAurC,UAAAplC,QACPgC,YAAA/B,CAAA,CAAAgC,EAAA,EAAgC,EAChC,IAAA5B,EAAA,iBAAAJ,GAAA,QAAAA,EAAAA,EAAAI,GAAA,CAAAvF,OAAAmF,EAAA,CACQ+9B,EAAW39B,GACnB,MAAAA,EAAA4B,GACA,KAAAkjC,EAAA,EACAE,QAAA,IAAyBf,EAAc,KAAA3oC,OAAA,EACvC2pC,IAAArjC,EAAAqjC,GAAA,KACAC,GAAAtjC,EAAAsjC,EAAA,CACAllC,IAAA,IAAqBuhC,EAAOvhC,EAAA,CAC5B1E,QAAyBoiC,EAAa,KAAApiC,OAAA,EACtC0lC,WAAAp/B,EAAAo/B,UAAA,EAEA,CACA,CACA,CAAAxnC,OAAAipC,GAAA,mCACA,OACAuC,QAAA,KAAAA,OAAA,CACAC,IAAA,KAAAA,GAAA,CACAC,GAAA,KAAAA,EAAA,CACAC,QAAA,KAAAA,OAAA,CACAnlC,IAAA,KAAAA,GAAA,CAEAhE,SAAA,KAAAA,QAAA,CACAopC,MAAA,KAAAA,KAAA,CACAnlC,YAAA,KAAAA,WAAA,CACAolC,YAAA,KAAAA,WAAA,CACA/pC,QAAAlB,OAAA4pC,WAAA,MAAA1oC,OAAA,EACAgqC,UAAA,KAAAA,SAAA,CACAC,UAAA,KAAAA,SAAA,CACAzlC,OAAA,KAAAA,MAAA,CACAI,KAAA,KAAAA,IAAA,CACAkB,SAAA,KAAAA,QAAA,CACAf,SAAA,KAAAA,QAAA,CACAmlC,eAAA,KAAAA,cAAA,CACArlC,OAAA,KAAAA,MAAA,CAEA,CACA,IAAA6kC,SAAA,CACA,YAAAF,EAAA,CAAAE,OAAA,CAEA,IAAAC,KAAA,CACA,YAAAH,EAAA,CAAAG,GAAA,CAEA,IAAAC,IAAA,CACA,YAAAJ,EAAA,CAAAI,EAAA,CAEA,IAAAC,SAAA,CACA,YAAAL,EAAA,CAAA9kC,GAAA,CAMA,IAAA0E,MAAA,CACA,UAAkBm4B,CAAgB,CAMlC,IAAA4I,IAAA,CACA,UAAkB3I,CAAc,CAEhC,IAAA98B,KAAA,CACA,YAAA8kC,EAAA,CAAA9kC,GAAA,CAAA3F,QAAA,EACA,CACA,CCrEA,IAAMqrC,EAASlsC,OAAA,qBACfmsC,EAAA,IAAAj3B,IAAA,CACA,IACA,IACA,IACA,IACA,IACA,EACA,SAAAk3B,EAAAhkC,CAAA,CAAAtG,CAAA,EACA,IAAAsV,EACA,GAAAhP,IAAA,EAAAA,EAAA,aAAAgP,CAAAA,EAAAhP,EAAAC,OAAA,SAAA+O,EAAAtV,OAAA,EACA,IAAAsG,CAAAA,EAAAC,OAAA,CAAAvG,OAAA,YAAAD,OAAA,EACA,8DAEA,IAAAiE,EAAA,GACA,QAAAkD,EAAA3H,EAAA,GAAA+G,EAAAC,OAAA,CAAAvG,OAAA,CACAA,EAAA8B,GAAA,yBAAAoF,EAAA3H,GACAyE,EAAAC,IAAA,CAAAiD,GAEAlH,EAAA8B,GAAA,iCAAAkC,EAAAV,IAAA,MACA,EAEO,MAAAinC,UAAAjlC,SACPe,YAAA5F,CAAA,CAAA6F,EAAA,EAA+B,EAC/B,MAAA7F,EAAA6F,GACA,KAAa8jC,EAAS,EACtBV,QAAA,IAAyBJ,EAAe,KAAAtpC,OAAA,EACxC0E,IAAA4B,EAAA5B,GAAA,KAAgCuhC,EAAO3/B,EAAA5B,GAAA,EACvC1E,QAAyBoiC,EAAa,KAAApiC,OAAA,EACtC0lC,WAAAp/B,EAAAo/B,UAAA,GACa5lC,KAAAA,CAAA,CAEb,CACA,CAAA5B,OAAAipC,GAAA,mCACA,OACAuC,QAAA,KAAAA,OAAA,CACAhlC,IAAA,KAAAA,GAAA,CAEAjE,KAAA,KAAAA,IAAA,CACAC,SAAA,KAAAA,QAAA,CACAV,QAAAlB,OAAA4pC,WAAA,MAAA1oC,OAAA,EACAyF,GAAA,KAAAA,EAAA,CACA+kC,WAAA,KAAAA,UAAA,CACAhlC,OAAA,KAAAA,MAAA,CACAE,WAAA,KAAAA,UAAA,CACA9C,KAAA,KAAAA,IAAA,CAEA,CACA,IAAA8mC,SAAA,CACA,YAAoBU,EAAS,CAAAV,OAAA,CAE7B,OAAAlmC,KAAA/C,CAAA,CAAA6F,CAAA,EAEA,IAAAV,EAAAN,SAAA9B,IAAA,CAAA/C,EAAA6F,GACA,WAAAikC,EAAA3kC,EAAAnF,IAAA,CAAAmF,EACA,CACA,OAAAE,SAAApB,CAAA,CAAA4B,CAAA,EACA,IAAAd,EAAA,iBAAAc,EAAAA,EAAA,CAAAA,IAAA,EAAAA,EAAA,OAAAA,EAAAd,MAAA,OACA,IAAA6kC,EAAAzmC,GAAA,CAAA4B,GACA,oFAEA,IAAAilC,EAAA,iBAAAnkC,EAAAA,EAAA,GACAtG,EAAA,IAAAD,QAAA0qC,IAAA,EAAAA,EAAA,OAAAA,EAAAzqC,OAAA,EAEA,OADAA,EAAA8B,GAAA,YAAgCugC,EAAW39B,IAC3C,IAAA6lC,EAAA,MACA,GAAAE,CAAA,CACAzqC,QAAAA,EACAwF,OAAAA,CACA,EACA,CACA,OAAAklC,QAAAX,CAAA,CAAAzjC,CAAA,EACA,IAAAtG,EAAA,IAAAD,QAAAuG,IAAA,EAAAA,EAAA,OAAAA,EAAAtG,OAAA,EAGA,OAFAA,EAAA8B,GAAA,wBAA4CugC,EAAW0H,IACvDO,EAAAhkC,EAAAtG,GACA,IAAAuqC,EAAA,MACA,GAAAjkC,CAAA,CACAtG,QAAAA,CACA,EACA,CACA,OAAAL,KAAA2G,CAAA,EACA,IAAAtG,EAAA,IAAAD,QAAAuG,IAAA,EAAAA,EAAA,OAAAA,EAAAtG,OAAA,EAGA,OAFAA,EAAA8B,GAAA,0BACAwoC,EAAAhkC,EAAAtG,GACA,IAAAuqC,EAAA,MACA,GAAAjkC,CAAA,CACAtG,QAAAA,CACA,EACA,CACA,CCvFW,SAAS2qC,EAAcjmC,CAAG,CAAEqhC,CAAI,CAAE,CACzC,IAAM6E,EAAU,iBAAO7E,EAAoB,IAAIlyB,IAAIkyB,GAAQA,CAAI,CACzD8E,EAAW,IAAIh3B,IAAInP,EAAKqhC,GACxBkB,EAAS,CAAC,EAAE2D,EAAQ5D,QAAQ,CAAC,EAAE,EAAE4D,EAAQ3F,IAAI,CAAC,CAAC,CACrD,MAAO,CAAC,EAAE4F,EAAS7D,QAAQ,CAAC,EAAE,EAAE6D,EAAS5F,IAAI,CAAC,CAAC,GAAKgC,EAAS4D,EAAS9rC,QAAQ,GAAGqG,OAAO,CAAC6hC,EAAQ,IAAM4D,EAAS9rC,QAAQ,EAAE,CCR9H,IAAA+rC,EAAA,CACA,iBACA,eACA,sBACA,mBACA,CACAC,EAAA,CACA,gBACA,CAMO,SAAAC,EAAAhtC,CAAA,CAAAitC,CAAA,EACP,QAAA/rC,KAAA4rC,EACA9sC,EAAAyV,MAAA,CAAAvU,GAEA,GAAA+rC,EACA,QAAA/rC,KAAA6rC,EACA/sC,EAAAyV,MAAA,CAAAvU,EAEA,CACA,OAAAlB,CACA,CCLO,SAASktC,EAAiBjH,CAAQ,CAAEkH,CAAO,CAAE,CAChD,OAAOA,EAAUlH,EAAS7+B,OAAO,CAAC,cAAe,IAAM6+B,CAAQ,CETnE,MAAAmH,UAA8B3B,EAC9BpjC,YAAAuW,CAAA,EACA,MAAAA,EAAAtY,KAAA,CAAAsY,EAAAtW,IAAA,EACA,KAAAy8B,UAAA,CAAAnmB,EAAAxT,IAAA,CAEA,IAAA7C,SAAA,CACA,UAAkB+6B,EAAkB,CACpCl4B,KAAA,KAAA25B,UAAA,EACS,CAETJ,aAAA,CACA,UAAkBrB,EAAkB,CACpCl4B,KAAA,KAAA25B,UAAA,EACS,CAETF,WAAA,CACA,UAAkBvB,EAAkB,CACpCl4B,KAAA,KAAA25B,UAAA,EACS,CAET,CACA,IAAMsI,EAAiB,CACvB,CDjCmB,MCmCnB,CACA,CDnCsC,yBCqCtC,CACA,CDrCoC,uBCuCpC,CACA,CDvCkC,sBCyClC,CACA,CACO,eAAAC,GAAA1uB,CAAA,EAEP,IAAA2uB,EAAA,SAAAhuC,KAAAiuC,gBAAA,CACA5uB,EAAArW,OAAA,CAAA7B,GAAA,CAAyBwmC,EAAgBtuB,EAAArW,OAAA,CAAA7B,GAAA,KACzC,IAAA+mC,EAAA,IAA2BxF,EAAOrpB,EAAArW,OAAA,CAAA7B,GAAA,EAClC1E,QAAA4c,EAAArW,OAAA,CAAAvG,OAAA,CACA0lC,WAAA9oB,EAAArW,OAAA,CAAAm/B,UAAA,GAGAf,EAAA8G,EAAA9G,OAAA,CACA8G,EAAA9G,OAAA,IACA,IAAA+G,EAAA9uB,EAAArW,OAAA,CAAAvG,OAAA,kBACA0rC,GAAAD,WAAAA,EAAAxH,QAAA,EACAwH,CAAAA,EAAAxH,QAAA,MAEA,IAAA4E,EAA2BpH,EAAe7kB,EAAArW,OAAA,CAAAvG,OAAA,EAE1C,IAAAurC,EACA,QAAAI,KAA4BN,EAC5BxC,EAAAp1B,MAAA,CAAAk4B,EAAA5sC,QAAA,GAAAM,WAAA,GAEA,CAEI2rC,EAAyBS,EAAAztC,YAAA,KAC7B,IAAAuI,EAAA,IAAA6kC,EAAA,CACAhiC,KAAAwT,EAAAxT,IAAA,CACA9E,MAAAnF,OAAAssC,GACAnlC,KAAA,CACA7F,KAAAmc,EAAArW,OAAA,CAAA9F,IAAA,CACAkpC,IAAA/sB,EAAArW,OAAA,CAAAojC,GAAA,CACA3pC,QAAA6oC,EACAe,GAAAhtB,EAAArW,OAAA,CAAAqjC,EAAA,CACAplC,OAAAoY,EAAArW,OAAA,CAAA/B,MAAA,CACAkhC,WAAA9oB,EAAArW,OAAA,CAAAm/B,UAAA,CAEA,GAKAgG,GACA5sC,OAAAmJ,cAAA,CAAA1B,EAAA,YACAqlC,WAAA,GACArsC,MAAA,EACA,GAEA,IAAA8V,EAAA,IAAsBytB,EAAc,CACpCv8B,QAAAA,EACA6C,KAAAwT,EAAAxT,IAAA,GAEAxD,EAAA,MAAAgX,EAAA9T,OAAA,CAAAvC,EAAA8O,GAEA,GAAAzP,GAAA,CAAAA,CAAAA,aAAAN,QAAA,EACA,mEAOA,IAAAolC,EAAA9kC,IAAA,EAAAA,EAAA,OAAAA,EAAA5F,OAAA,CAAA2C,GAAA,yBACA,GAAAiD,GAAA8kC,EAAA,CACA,IAAAmB,EAAA,IAA+B5F,EAAOyE,EAAA,CACtC/D,YAAA,GACA3mC,QAAA4c,EAAArW,OAAA,CAAAvG,OAAA,CACA0lC,WAAA9oB,EAAArW,OAAA,CAAAm/B,UAAA,EAGAmG,CAAAA,EAAA5G,IAAA,GAAA1+B,EAAAsjC,OAAA,CAAA5E,IAAA,GACA4G,EAAAlH,OAAA,CAAAA,GAAAkH,EAAAlH,OAAA,CACA/+B,EAAA5F,OAAA,CAAA8B,GAAA,wBAAA3C,OAAA0sC,KAOAH,GACA9lC,EAAA5F,OAAA,CAAA8B,GAAA,oBAAqD6oC,EAAaxrC,OAAA0sC,GAAA1sC,OAAAssC,IAElE,KAKA3lC,EAAAF,IAAA,EAAAA,EAAA,OAAAA,EAAA5F,OAAA,CAAA2C,GAAA,aACA,GAAAiD,GAAAE,EAAA,CACA,IAAAgmC,EAAA,IAAgC7F,EAAOngC,EAAA,CACvC6gC,YAAA,GACA3mC,QAAA4c,EAAArW,OAAA,CAAAvG,OAAA,CACA0lC,WAAA9oB,EAAArW,OAAA,CAAAm/B,UAAA,GAKA9/B,EAAA,IAAAN,SAAAM,EAAAnF,IAAA,CAAAmF,GAEAkmC,EAAA7G,IAAA,GAAA1+B,EAAAsjC,OAAA,CAAA5E,IAAA,GACA6G,EAAAnH,OAAA,CAAAA,GAAAmH,EAAAnH,OAAA,CACA/+B,EAAA5F,OAAA,CAAA8B,GAAA,YAAA3C,OAAA2sC,KAOAJ,IACA9lC,EAAA5F,OAAA,CAAAyT,MAAA,aACA7N,EAAA5F,OAAA,CAAA8B,GAAA,qBAAsD6oC,EAAaxrC,OAAA2sC,GAAA3sC,OAAAssC,KAEnE,OACA,CACA7lC,SAAAA,GAA8B2kC,EAAA5qC,IAAiB,GAC/CkjC,UAAAliC,QAAAwjB,GAAA,CAAA9O,CAAA,CAAqCotB,EAAe,CACpD,CACA,CACA,SAAAsJ,GAAA3jC,CAAA,EAEA,oDAAyDA,EAAO;wEAChE,EAEA,SAAA4jC,GAAAC,CAAA,EACA,IAAAC,EAAA,IAAAC,MAAA,aAAyC,CACzCxpC,IAAAypC,CAAA,CAAAC,CAAA,EACA,GAAAA,SAAAA,EACA,QACA,OACA,MAAAN,GAAAE,GAAA,EAEAK,WAAA,CACA,YAAAP,GAAAE,GAAA,EAEAvgC,MAAA6gC,CAAA,CAAAC,CAAA,CAAA1gC,CAAA,EACA,sBAAAA,CAAA,IACA,OAAAA,CAAA,IAAAogC,EACA,OACA,MAAAH,GAAAE,GAAA,CAEA,GACA,WAAAE,MAAA,GAAuB,CACvBxpC,IAAA,IAAAupC,CACA,EACA,CACO,SAAAO,IAAA,CAEPxM,UAAoBp3B,EAAAF,CAAM,CAAAs3B,OAAA,GAE1BA,QAAAC,GAAA,CAAsBr3B,EAAAF,CAAM,CAAAs3B,OAAA,CAAAC,GAAA,CACpBr3B,EAAAF,CAAM,CAAAs3B,OAAA,CAAAA,SAIdnhC,OAAAmJ,cAAA,CAAAM,WAAA,wBACAhJ,MAAAysC,GACAJ,WAAA,GACApjC,aAAA,EACA,EACA,iBC1MA,oBAAAD,WACAmkC,EAAAnkC,gBAEA,IACAmkC,EAAgB7jC,EAAQ,IACxB,CAAG,MAAA1H,EAAA,CACH,QAAG,CAEH,GADAurC,GAAA,oBAAApkC,QAAuDokC,CAAAA,EAAApkC,MAAA,EACvD,CAAAokC,EAAsB,+CAEtB,IAXAA,EAaAC,EAAAD,EAAAE,SAAA,EAAAF,EAAAG,YAAA,CACAC,EAAwBjkC,EAAQ,KAMhC,SAAAkkC,EAAAC,CAAA,CAAAC,CAAA,EAiBA,OAdAA,EACA,IAAAN,EAAAK,EAAAC,GAGA,IAAAN,EAAAK,EAWA,CACAL,GACA,yCAAAzsC,OAAA,UAAAmsC,CAAA,EACAvtC,OAAAmJ,cAAA,CAAA8kC,EAAAV,EAAA,CACA1pC,IAAA,WAAqB,OAAAgqC,CAAA,CAAAN,EAAA,CACrB,EACA,GAMAjkC,EAAAtK,OAAA,EACA,aAAA6uC,EAAAI,EAAA,KACA,QAAAD,CACA,iBCrDA1kC,EAAAtK,OAAA,CAAA+K,EAAA,KAAAqkC,OAAmD","sources":["webpack://_N_E/./node_modules/cross-fetch/dist/browser-ponyfill.js","webpack://_N_E/./node_modules/es5-ext/global.js","webpack://_N_E/","webpack://_N_E/./pages/api/search.ts","webpack://_N_E/./types/index.ts","webpack://_N_E/./node_modules/@supabase/functions-js/dist/module/helper.js","webpack://_N_E/./node_modules/@supabase/functions-js/dist/module/types.js","webpack://_N_E/./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/PostgrestFilterBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/PostgrestQueryBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/version.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/constants.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/module/index.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/push.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/index.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/errors.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/StorageClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/errors.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/GoTrueAdminApi.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/local-storage.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/lib/polyfills.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/GoTrueClient.js","webpack://_N_E/./node_modules/@supabase/gotrue-js/dist/module/index.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/index.js","webpack://_N_E/./node_modules/eventsource-parser/dist/index.esm.js","webpack://_N_E/./utils/index.ts","webpack://_N_E/./node_modules/next/dist/esm/server/web/error.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/utils.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/get-hostname.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/next-url.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/cookies/serialize.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/cookies/request-cookies.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/cookies/response-cookies.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/cookies/index.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/request.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/spec-extension/response.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js","webpack://_N_E/./node_modules/next/dist/esm/server/internal-utils.js","webpack://_N_E/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js","webpack://_N_E/./node_modules/next/dist/esm/client/components/app-router-headers.js","webpack://_N_E/./node_modules/next/dist/esm/server/web/adapter.js","webpack://_N_E/./node_modules/websocket/lib/browser.js","webpack://_N_E/./node_modules/websocket/lib/version.js","webpack://_N_E/<anon>"],"sourcesContent":["var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","\n        import { adapter, enhanceGlobals } from 'next/dist/esm/server/web/adapter'\n\n        enhanceGlobals()\n\n        var mod = require(\"private-next-pages/api/search.ts\")\n        var handler = mod.middleware || mod.default;\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/search\" must export a `default` function');\n        }\n\n        export default function (opts) {\n          return adapter({\n              ...opts,\n              page: \"/api/search\",\n              handler,\n          })\n        }\n    ","import { supabaseAdmin } from \"@/utils\";\n\nexport const config = {\n  runtime: \"edge\"\n};\n\nconst handler = async (req: Request): Promise<Response> => {\n  try {\n    const { query, apiKey, matches } = (await req.json()) as {\n      query: string;\n      apiKey: string;\n      matches: number;\n    };\n\n    const input = query.replace(/\\n/g, \" \");\n\n    const res = await fetch(\"https://api.openai.com/v1/embeddings\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        model: \"text-embedding-ada-002\",\n        input\n      })\n    });\n\n    const json = await res.json();\n    const embedding = json.data[0].embedding;\n\n    const { data: chunks, error } = await supabaseAdmin.rpc(\"pg_search\", {\n      query_embedding: embedding,\n      similarity_threshold: 0.01,\n      match_count: matches\n    });\n\n    if (error) {\n      console.error(error);\n      return new Response(\"Error\", { status: 500 });\n    }\n\n    return new Response(JSON.stringify(chunks), { status: 200 });\n  } catch (error) {\n    console.error(error);\n    return new Response(\"Error\", { status: 500 });\n  }\n};\n\nexport default handler;\n","export enum OpenAIModel {\n  DAVINCI_TURBO = \"gpt-3.5-turbo\"\n}\n\nexport type PGEssay = {\n  title: string;\n  url: string;\n  date: string;\n  thanks: string;\n  content: string;\n  length: number;\n  tokens: number;\n  chunks: PGChunk[];\n};\n\nexport type PGChunk = {\n  essay_title: string;\n  essay_url: string;\n  essay_date: string;\n  essay_thanks: string;\n  content: string;\n  content_length: number;\n  content_tokens: number;\n  embedding: number[];\n};\n\nexport type PGJSON = {\n  current_date: string;\n  author: string;\n  url: string;\n  length: number;\n  tokens: number;\n  essays: PGEssay[];\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => __awaiter(void 0, void 0, void 0, function* () { return yield (yield import('cross-fetch')).fetch(...args); });\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\n//# sourceMappingURL=helper.js.map","export class FunctionsError extends Error {\n    constructor(message, name = 'FunctionsError', context) {\n        super(message);\n        super.name = name;\n        this.context = context;\n    }\n}\nexport class FunctionsFetchError extends FunctionsError {\n    constructor(context) {\n        super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context);\n    }\n}\nexport class FunctionsRelayError extends FunctionsError {\n    constructor(context) {\n        super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context);\n    }\n}\nexport class FunctionsHttpError extends FunctionsError {\n    constructor(context) {\n        super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context);\n    }\n}\n//# sourceMappingURL=types.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError, } from './types';\nexport class FunctionsClient {\n    constructor(url, { headers = {}, customFetch, } = {}) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(customFetch);\n    }\n    /**\n     * Updates the authorization header\n     * @param token - the new jwt token sent in the authorisation header\n     */\n    setAuth(token) {\n        this.headers.Authorization = `Bearer ${token}`;\n    }\n    /**\n     * Invokes a function\n     * @param functionName - the name of the function to invoke\n     */\n    invoke(functionName, invokeOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers, body: functionArgs } = invokeOptions;\n                let _headers = {};\n                let body;\n                if (functionArgs &&\n                    ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)) {\n                    if ((typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n                        functionArgs instanceof ArrayBuffer) {\n                        // will work for File as File inherits Blob\n                        // also works for ArrayBuffer as it is the same underlying structure as a Blob\n                        _headers['Content-Type'] = 'application/octet-stream';\n                        body = functionArgs;\n                    }\n                    else if (typeof functionArgs === 'string') {\n                        // plain string\n                        _headers['Content-Type'] = 'text/plain';\n                        body = functionArgs;\n                    }\n                    else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n                        // don't set content-type headers\n                        // Request will automatically add the right boundary value\n                        body = functionArgs;\n                    }\n                    else {\n                        // default, assume this is JSON\n                        _headers['Content-Type'] = 'application/json';\n                        body = JSON.stringify(functionArgs);\n                    }\n                }\n                const response = yield this.fetch(`${this.url}/${functionName}`, {\n                    method: 'POST',\n                    // headers priority is (high to low):\n                    // 1. invoke-level headers\n                    // 2. client-level headers\n                    // 3. default Content-Type header\n                    headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n                    body,\n                }).catch((fetchError) => {\n                    throw new FunctionsFetchError(fetchError);\n                });\n                const isRelayError = response.headers.get('x-relay-error');\n                if (isRelayError && isRelayError === 'true') {\n                    throw new FunctionsRelayError(response);\n                }\n                if (!response.ok) {\n                    throw new FunctionsHttpError(response);\n                }\n                let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n                let data;\n                if (responseType === 'application/json') {\n                    data = yield response.json();\n                }\n                else if (responseType === 'application/octet-stream') {\n                    data = yield response.blob();\n                }\n                else if (responseType === 'multipart/form-data') {\n                    data = yield response.formData();\n                }\n                else {\n                    // default to text\n                    data = yield response.text();\n                }\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=FunctionsClient.js.map","import crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.allowEmpty = builder.allowEmpty;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = crossFetch;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => ({\n                error: {\n                    message: `FetchError: ${fetchError.message}`,\n                    details: '',\n                    hint: '',\n                    code: fetchError.code || '',\n                },\n                data: null,\n                count: null,\n                status: 0,\n                statusText: '',\n            }));\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n//# sourceMappingURL=PostgrestBuilder.js.map","import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order foreign tables, but it doesn't affect the ordering of the\n     * current table.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.foreignTable - Set this to order a foreign table by foreign\n     * columns\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, } = {}) {\n        const key = foreignTable ? `${foreignTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `from` and `to` inclusively.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        this.allowEmpty = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = this.headers['Accept'];\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestTransformBuilder.js.map","import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n    /**\n     * Match only rows where `column` is equal to `value`.\n     *\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    eq(column, value) {\n        this.url.searchParams.append(column, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is not equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    neq(column, value) {\n        this.url.searchParams.append(column, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gt(column, value) {\n        this.url.searchParams.append(column, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gte(column, value) {\n        this.url.searchParams.append(column, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lt(column, value) {\n        this.url.searchParams.append(column, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lte(column, value) {\n        this.url.searchParams.append(column, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(column, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(column, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` IS `value`.\n     *\n     * For non-boolean columns, this is only relevant for checking if the value of\n     * `column` is NULL by setting `value` to `null`.\n     *\n     * For boolean columns, you can also set `value` to `true` or `false` and it\n     * will behave the same way as `.eq()`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    is(column, value) {\n        this.url.searchParams.append(column, `is.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is included in the `values` array.\n     *\n     * @param column - The column to filter on\n     * @param values - The values array to filter with\n     */\n    in(column, values) {\n        const cleanedValues = values\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * `column` contains every element appearing in `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(column, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * every element appearing in `column` is contained by `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is greater than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(column, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or greater than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(column, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is less than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(column, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or less than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(column, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where `column` is\n     * mutually exclusive to `range` and there can be no element between the two\n     * ranges.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(column, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for array and range columns. Match only rows where\n     * `column` and `value` have an element in common.\n     *\n     * @param column - The array or range column to filter on\n     * @param value - The array or range value to filter with\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for text and tsvector columns. Match only rows where\n     * `column` matches the query string in `query`.\n     *\n     * @param column - The text or tsvector column to filter on\n     * @param query - The query text to match with\n     * @param options - Named parameters\n     * @param options.config - The text search configuration to use\n     * @param options.type - Change how the `query` text is interpreted\n     */\n    textSearch(column, query, { config, type } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Match only rows where each column in `query` keys is equal to its\n     * associated value. Shorthand for multiple `.eq()`s.\n     *\n     * @param query - The object to filter with, with column names as keys mapped\n     * to their filter values\n     */\n    match(query) {\n        Object.entries(query).forEach(([column, value]) => {\n            this.url.searchParams.append(column, `eq.${value}`);\n        });\n        return this;\n    }\n    /**\n     * Match only rows which doesn't satisfy the filter.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to be negated to filter with, following\n     * PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy at least one of the filters.\n     *\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure it's properly sanitized.\n     *\n     * It's currently not possible to do an `.or()` filter across multiple tables.\n     *\n     * @param filters - The filters to use, following PostgREST syntax\n     * @param foreignTable - Set this to filter on foreign tables instead of the\n     * current table\n     */\n    or(filters, { foreignTable } = {}) {\n        const key = foreignTable ? `${foreignTable}.or` : 'or';\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy the filter. This is an escape hatch - you\n     * should use the specific filter methods wherever possible.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to filter with, following PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(column, `${operator}.${value}`);\n        return this;\n    }\n}\n//# sourceMappingURL=PostgrestFilterBuilder.js.map","import PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, { head = false, count, } = {}) {\n        const method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    insert(values, { count, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [];\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    upsert(values, { onConflict, ignoreDuplicates = false, count, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, { count, } = {}) {\n        const method = 'PATCH';\n        const prefersHeaders = [];\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({ count, } = {}) {\n        const method = 'DELETE';\n        const prefersHeaders = [];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\n//# sourceMappingURL=PostgrestQueryBuilder.js.map","export const version = '1.4.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` };\n//# sourceMappingURL=constants.js.map","import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head) {\n            method = 'HEAD';\n            Object.entries(args).forEach(([name, value]) => {\n                url.searchParams.append(name, `${value}`);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url,\n            headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\n//# sourceMappingURL=PostgrestClient.js.map","export { default as PostgrestClient } from './PostgrestClient';\nexport { default as PostgrestQueryBuilder } from './PostgrestQueryBuilder';\nexport { default as PostgrestFilterBuilder } from './PostgrestFilterBuilder';\nexport { default as PostgrestTransformBuilder } from './PostgrestTransformBuilder';\nexport { default as PostgrestBuilder } from './PostgrestBuilder';\n//# sourceMappingURL=index.js.map","export const version = '2.6.0';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` };\nexport const VSN = '1.0.0';\nexport const DEFAULT_TIMEOUT = 10000;\nexport const WS_CLOSE_NORMAL = 1000;\nexport var SOCKET_STATES;\n(function (SOCKET_STATES) {\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\n})(SOCKET_STATES || (SOCKET_STATES = {}));\nexport var CHANNEL_STATES;\n(function (CHANNEL_STATES) {\n    CHANNEL_STATES[\"closed\"] = \"closed\";\n    CHANNEL_STATES[\"errored\"] = \"errored\";\n    CHANNEL_STATES[\"joined\"] = \"joined\";\n    CHANNEL_STATES[\"joining\"] = \"joining\";\n    CHANNEL_STATES[\"leaving\"] = \"leaving\";\n})(CHANNEL_STATES || (CHANNEL_STATES = {}));\nexport var CHANNEL_EVENTS;\n(function (CHANNEL_EVENTS) {\n    CHANNEL_EVENTS[\"close\"] = \"phx_close\";\n    CHANNEL_EVENTS[\"error\"] = \"phx_error\";\n    CHANNEL_EVENTS[\"join\"] = \"phx_join\";\n    CHANNEL_EVENTS[\"reply\"] = \"phx_reply\";\n    CHANNEL_EVENTS[\"leave\"] = \"phx_leave\";\n    CHANNEL_EVENTS[\"access_token\"] = \"access_token\";\n})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));\nexport var TRANSPORTS;\n(function (TRANSPORTS) {\n    TRANSPORTS[\"websocket\"] = \"websocket\";\n})(TRANSPORTS || (TRANSPORTS = {}));\nexport var CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\n    CONNECTION_STATE[\"Open\"] = \"open\";\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\n//# sourceMappingURL=constants.js.map","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map","import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n        this.rateLimited = false;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        const status = this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n            join_ref: this.channel._joinRef(),\n        });\n        if (status === 'rate limited') {\n            this.rateLimited = true;\n        }\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket._makeRef();\n        this.refEvent = this.channel._replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        this.channel._on(this.refEvent, {}, callback);\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel._trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        this.channel._off(this.refEvent, {});\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map","/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\n//# sourceMappingURL=transformers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    /**\n     * listen to Postgres changes.\n     */\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence }, } = this.params;\n            this._onError((e) => callback && callback('CHANNEL_ERROR', e));\n            this._onClose(() => callback && callback('CLOSED'));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n            };\n            if (this.socket.accessToken) {\n                accessTokenPayload.access_token = this.socket.accessToken;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', ({ postgres_changes: serverPostgresFilters, }) => {\n                var _a;\n                this.socket.accessToken &&\n                    this.socket.setAuth(this.socket.accessToken);\n                if (serverPostgresFilters === undefined) {\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback &&\n                                callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback &&\n                    callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback && callback('TIMED_OUT');\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    track(payload, opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.send({\n                type: 'presence',\n                event: 'track',\n                payload,\n            }, opts.timeout || this.timeout);\n        });\n    }\n    untrack(opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.send({\n                type: 'presence',\n                event: 'untrack',\n            }, opts);\n        });\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    send(payload, opts = {}) {\n        return new Promise((resolve) => {\n            var _a, _b, _c;\n            const push = this._push(payload.type, payload, opts.timeout || this.timeout);\n            if (push.rateLimited) {\n                resolve('rate limited');\n            }\n            if (payload.type === 'broadcast' &&\n                !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                resolve('ok');\n            }\n            push.receive('ok', () => resolve('ok'));\n            push.receive('timeout', () => resolve('timed out'));\n        });\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n//# sourceMappingURL=RealtimeChannel.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE, } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessToken = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.transport = w3cwebsocket;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.eventsPerSecondLimitMs = 100;\n        this.inThrottle = false;\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.transport)\n            this.transport = options.transport;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const eventsPerSecond = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.eventsPerSecond;\n        if (eventsPerSecond)\n            this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond);\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n            this.disconnect();\n            this.connect();\n        }), this.reconnectAfterMs);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    removeChannel(channel) {\n        return channel.unsubscribe().then((status) => {\n            if (this.channels.length === 0) {\n                this.disconnect();\n            }\n            return status;\n        });\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    removeAllChannels() {\n        return Promise.all(this.channels.map((channel) => channel.unsubscribe())).then((values) => {\n            this.disconnect();\n            return values;\n        });\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        if (!this.isConnected()) {\n            this.connect();\n        }\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        let callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n                const isThrottled = this._throttle(callback)();\n                if (isThrottled) {\n                    return 'rate limited';\n                }\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * @param token A JWT string.\n     */\n    setAuth(token) {\n        this.accessToken = token;\n        this.channels.forEach((channel) => {\n            token && channel.updateJoinPayload({ access_token: token });\n            if (channel.joinedOnce && channel._isJoined()) {\n                channel._push(CHANNEL_EVENTS.access_token, { access_token: token });\n            }\n        });\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Returns the URL of the websocket.\n     *\n     * @internal\n     */\n    _endPointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if ((ref && ref === this.pendingHeartbeatRef) ||\n                event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    _onConnOpen() {\n        this.log('transport', `connected to ${this._endPointURL()}`);\n        this._flushSendBuffer();\n        this.reconnectTimer.reset();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    /** @internal */\n    _flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /** @internal */\n    _sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth(this.accessToken);\n    }\n    /** @internal */\n    _throttle(callback, eventsPerSecondLimitMs = this.eventsPerSecondLimitMs) {\n        return () => {\n            if (this.inThrottle)\n                return true;\n            callback();\n            if (eventsPerSecondLimitMs > 0) {\n                this.inThrottle = true;\n                setTimeout(() => {\n                    this.inThrottle = false;\n                }, eventsPerSecondLimitMs);\n            }\n            return false;\n        };\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map","import RealtimeClient from './RealtimeClient';\nimport RealtimeChannel, { REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_SUBSCRIBE_STATES, } from './RealtimeChannel';\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS, } from './RealtimePresence';\nexport { RealtimePresence, RealtimeChannel, RealtimeClient, REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_PRESENCE_LISTEN_EVENTS, REALTIME_SUBSCRIBE_STATES, };\n//# sourceMappingURL=index.js.map","export class StorageError extends Error {\n    constructor(message) {\n        super(message);\n        this.__isStorageError = true;\n        this.name = 'StorageError';\n    }\n}\nexport function isStorageError(error) {\n    return typeof error === 'object' && error !== null && '__isStorageError' in error;\n}\nexport class StorageApiError extends StorageError {\n    constructor(message, status) {\n        super(message);\n        this.name = 'StorageApiError';\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class StorageUnknownError extends StorageError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'StorageUnknownError';\n        this.originalError = originalError;\n    }\n}\n//# sourceMappingURL=errors.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => __awaiter(void 0, void 0, void 0, function* () { return yield (yield import('cross-fetch')).fetch(...args); });\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n        return (yield import('cross-fetch')).Response;\n    }\n    return Response;\n});\n//# sourceMappingURL=helpers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject) => __awaiter(void 0, void 0, void 0, function* () {\n    const Res = yield resolveResponse();\n    if (error instanceof Res) {\n        error.json().then((err) => {\n            reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n        });\n    }\n    else {\n        reject(new StorageUnknownError(_getErrorMessage(error), error));\n    }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers);\n    params.body = JSON.stringify(body);\n    return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fetcher(url, _getRequestParams(method, options, parameters, body))\n                .then((result) => {\n                if (!result.ok)\n                    throw result;\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\n                    return result;\n                return result.json();\n            })\n                .then((data) => resolve(data))\n                .catch((error) => handleError(error, reject));\n        });\n    });\n}\nexport function get(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'GET', url, options, parameters);\n    });\n}\nexport function post(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n    });\n}\nexport function put(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n    });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n    });\n}\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, {\n                    method,\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    copy(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map","// generated by genversion\nexport const version = '2.3.0';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` };\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = { public: false }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, { id, name: id, public: options.public }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map","import StorageFileApi from './packages/StorageFileApi';\nimport StorageBucketApi from './packages/StorageBucketApi';\nexport class StorageClient extends StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        super(url, headers, fetch);\n    }\n    /**\n     * Perform file operation in a bucket.\n     *\n     * @param id The bucket id to operate on.\n     */\n    from(id) {\n        return new StorageFileApi(this.url, this.headers, id, this.fetch);\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","export const version = '2.8.0';\n//# sourceMappingURL=version.js.map","// constants.ts\nimport { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js/${version}` };\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport crossFetch, { Headers as CrossFetchHeaders } from 'cross-fetch';\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = crossFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return CrossFetchHeaders;\n    }\n    return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n//# sourceMappingURL=fetch.js.map","export function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, '');\n}\nexport const isBrowser = () => typeof window !== 'undefined';\nexport function applySettingDefaults(options, defaults) {\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    return {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions),\n    };\n}\n//# sourceMappingURL=helpers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function expiresAt(expiresIn) {\n    const timeNow = Math.round(Date.now() / 1000);\n    return timeNow + expiresIn;\n}\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport const isBrowser = () => typeof document !== 'undefined';\nconst localStorageWriteTests = {\n    tested: false,\n    writable: false,\n};\n/**\n * Checks whether localStorage is supported on this browser.\n */\nexport const supportsLocalStorage = () => {\n    if (!isBrowser()) {\n        return false;\n    }\n    try {\n        if (typeof globalThis.localStorage !== 'object') {\n            return false;\n        }\n    }\n    catch (e) {\n        // DOM exception when accessing `localStorage`\n        return false;\n    }\n    if (localStorageWriteTests.tested) {\n        return localStorageWriteTests.writable;\n    }\n    const randomKey = `lswt-${Math.random()}${Math.random()}`;\n    try {\n        globalThis.localStorage.setItem(randomKey, randomKey);\n        globalThis.localStorage.removeItem(randomKey);\n        localStorageWriteTests.tested = true;\n        localStorageWriteTests.writable = true;\n    }\n    catch (e) {\n        // localStorage can't be written to\n        // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\n        localStorageWriteTests.tested = true;\n        localStorageWriteTests.writable = false;\n    }\n    return localStorageWriteTests.writable;\n};\nexport function getParameterByName(name, url) {\n    var _a;\n    if (!url)\n        url = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href) || '';\n    // eslint-disable-next-line no-useless-escape\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'), results = regex.exec(url);\n    if (!results)\n        return null;\n    if (!results[2])\n        return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => __awaiter(void 0, void 0, void 0, function* () { return yield (yield import('cross-fetch')).fetch(...args); });\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const looksLikeFetchResponse = (maybeResponse) => {\n    return (typeof maybeResponse === 'object' &&\n        maybeResponse !== null &&\n        'status' in maybeResponse &&\n        'ok' in maybeResponse &&\n        'json' in maybeResponse &&\n        typeof maybeResponse.json === 'function');\n};\n// Storage helpers\nexport const setItemAsync = (storage, key, data) => __awaiter(void 0, void 0, void 0, function* () {\n    yield storage.setItem(key, JSON.stringify(data));\n});\nexport const getItemAsync = (storage, key) => __awaiter(void 0, void 0, void 0, function* () {\n    const value = yield storage.getItem(key);\n    if (!value) {\n        return null;\n    }\n    try {\n        return JSON.parse(value);\n    }\n    catch (_a) {\n        return value;\n    }\n});\nexport const removeItemAsync = (storage, key) => __awaiter(void 0, void 0, void 0, function* () {\n    yield storage.removeItem(key);\n});\nexport function decodeBase64URL(value) {\n    const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let base64 = '';\n    let chr1, chr2, chr3;\n    let enc1, enc2, enc3, enc4;\n    let i = 0;\n    value = value.replace('-', '+').replace('_', '/');\n    while (i < value.length) {\n        enc1 = key.indexOf(value.charAt(i++));\n        enc2 = key.indexOf(value.charAt(i++));\n        enc3 = key.indexOf(value.charAt(i++));\n        enc4 = key.indexOf(value.charAt(i++));\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n        base64 = base64 + String.fromCharCode(chr1);\n        if (enc3 != 64 && chr2 != 0) {\n            base64 = base64 + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64 && chr3 != 0) {\n            base64 = base64 + String.fromCharCode(chr3);\n        }\n    }\n    return base64;\n}\n/**\n * A deferred represents some asynchronous work that is not yet finished, which\n * may or may not culminate in a value.\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\n */\nexport class Deferred {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\n        ;\n        this.promise = new Deferred.promiseConstructor((res, rej) => {\n            // eslint-disable-next-line @typescript-eslint/no-extra-semi\n            ;\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n}\nDeferred.promiseConstructor = Promise;\n// Taken from: https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript-without-using-a-library\nexport function decodeJWTPayload(token) {\n    // Regex checks for base64url format\n    const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n        throw new Error('JWT is not valid: not a JWT structure');\n    }\n    if (!base64UrlRegex.test(parts[1])) {\n        throw new Error('JWT is not valid: payload is not in base64url format');\n    }\n    const base64Url = parts[1];\n    return JSON.parse(decodeBase64URL(base64Url));\n}\n/**\n * Creates a promise that resolves to null after some time.\n */\nexport function sleep(time) {\n    return new Promise((accept) => {\n        setTimeout(() => accept(null), time);\n    });\n}\n/**\n * Converts the provided async function into a retryable function. Each result\n * or thrown error is sent to the isRetryable function which should return true\n * if the function should run again.\n */\nexport function retryable(fn, isRetryable) {\n    const promise = new Promise((accept, reject) => {\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\n        ;\n        (() => __awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < Infinity; attempt++) {\n                try {\n                    const result = yield fn(attempt);\n                    if (!isRetryable(attempt, null, result)) {\n                        accept(result);\n                        return;\n                    }\n                }\n                catch (e) {\n                    if (!isRetryable(attempt, e)) {\n                        reject(e);\n                        return;\n                    }\n                }\n            }\n        }))();\n    });\n    return promise;\n}\n//# sourceMappingURL=helpers.js.map","export class AuthError extends Error {\n    constructor(message, status) {\n        super(message);\n        this.__isAuthError = true;\n        this.name = 'AuthError';\n        this.status = status;\n    }\n}\nexport function isAuthError(error) {\n    return typeof error === 'object' && error !== null && '__isAuthError' in error;\n}\nexport class AuthApiError extends AuthError {\n    constructor(message, status) {\n        super(message, status);\n        this.name = 'AuthApiError';\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport function isAuthApiError(error) {\n    return isAuthError(error) && error.name === 'AuthApiError';\n}\nexport class AuthUnknownError extends AuthError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'AuthUnknownError';\n        this.originalError = originalError;\n    }\n}\nexport class CustomAuthError extends AuthError {\n    constructor(message, name, status) {\n        super(message);\n        this.name = name;\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class AuthSessionMissingError extends CustomAuthError {\n    constructor() {\n        super('Auth session missing!', 'AuthSessionMissingError', 400);\n    }\n}\nexport class AuthInvalidCredentialsError extends CustomAuthError {\n    constructor(message) {\n        super(message, 'AuthInvalidCredentialsError', 400);\n    }\n}\nexport class AuthImplicitGrantRedirectError extends CustomAuthError {\n    constructor(message, details = null) {\n        super(message, 'AuthImplicitGrantRedirectError', 500);\n        this.details = null;\n        this.details = details;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            details: this.details,\n        };\n    }\n}\nexport class AuthRetryableFetchError extends CustomAuthError {\n    constructor(message, status) {\n        super(message, 'AuthRetryableFetchError', status);\n    }\n}\n//# sourceMappingURL=errors.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { expiresAt, looksLikeFetchResponse } from './helpers';\nimport { AuthApiError, AuthRetryableFetchError, AuthUnknownError } from './errors';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject) => __awaiter(void 0, void 0, void 0, function* () {\n    const NETWORK_ERROR_CODES = [502, 503, 504];\n    if (!looksLikeFetchResponse(error)) {\n        reject(new AuthRetryableFetchError(_getErrorMessage(error), 0));\n    }\n    else if (NETWORK_ERROR_CODES.includes(error.status)) {\n        // status in 500...599 range - server had an error, request might be retryed.\n        reject(new AuthRetryableFetchError(_getErrorMessage(error), error.status));\n    }\n    else {\n        // got a response from server that is not in the 500...599 range - should not retry\n        error\n            .json()\n            .then((err) => {\n            reject(new AuthApiError(_getErrorMessage(err), error.status || 500));\n        })\n            .catch((e) => {\n            // not a valid json response\n            reject(new AuthUnknownError(_getErrorMessage(e), e));\n        });\n    }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json;charset=UTF-8' }, options === null || options === void 0 ? void 0 : options.headers);\n    params.body = JSON.stringify(body);\n    return Object.assign(Object.assign({}, params), parameters);\n};\nexport function _request(fetcher, method, url, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);\n        if (options === null || options === void 0 ? void 0 : options.jwt) {\n            headers['Authorization'] = `Bearer ${options.jwt}`;\n        }\n        const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};\n        if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n            qs['redirect_to'] = options.redirectTo;\n        }\n        const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : '';\n        const data = yield _handleRequest(fetcher, method, url + queryString, { headers, noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson }, {}, options === null || options === void 0 ? void 0 : options.body);\n        return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };\n    });\n}\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fetcher(url, _getRequestParams(method, options, parameters, body))\n                .then((result) => {\n                if (!result.ok)\n                    throw result;\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\n                    return result;\n                return result.json();\n            })\n                .then((data) => resolve(data))\n                .catch((error) => handleError(error, reject));\n        });\n    });\n}\nexport function _sessionResponse(data) {\n    var _a;\n    let session = null;\n    if (hasSession(data)) {\n        session = Object.assign({}, data);\n        session.expires_at = expiresAt(data.expires_in);\n    }\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n    return { data: { session, user }, error: null };\n}\nexport function _userResponse(data) {\n    var _a;\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n    return { data: { user }, error: null };\n}\nexport function _ssoResponse(data) {\n    return { data, error: null };\n}\nexport function _generateLinkResponse(data) {\n    const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, [\"action_link\", \"email_otp\", \"hashed_token\", \"redirect_to\", \"verification_type\"]);\n    const properties = {\n        action_link,\n        email_otp,\n        hashed_token,\n        redirect_to,\n        verification_type,\n    };\n    const user = Object.assign({}, rest);\n    return {\n        data: {\n            properties,\n            user,\n        },\n        error: null,\n    };\n}\nexport function _noResolveJsonResponse(data) {\n    return data;\n}\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data) {\n    return data.access_token && data.refresh_token && data.expires_in;\n}\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse, } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n    constructor({ url = '', headers = {}, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(fetch);\n        this.mfa = {\n            listFactors: this._listFactors.bind(this),\n            deleteFactor: this._deleteFactor.bind(this),\n        };\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     */\n    signOut(jwt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield _request(this.fetch, 'POST', `${this.url}/logout`, {\n                    headers: this.headers,\n                    jwt,\n                    noResolveJson: true,\n                });\n                return { data: null, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n     * @param options.data Optional user metadata\n     */\n    inviteUserByEmail(email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'POST', `${this.url}/invite`, {\n                    body: { email, data: options.data },\n                    headers: this.headers,\n                    redirectTo: options.redirectTo,\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */\n    generateLink(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { options } = params, rest = __rest(params, [\"options\"]);\n                const body = Object.assign(Object.assign({}, rest), options);\n                if ('newEmail' in rest) {\n                    // replace newEmail with new_email in request body\n                    body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n                    delete body['newEmail'];\n                }\n                return yield _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n                    body: body,\n                    headers: this.headers,\n                    xform: _generateLinkResponse,\n                    redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return {\n                        data: {\n                            properties: null,\n                            user: null,\n                        },\n                        error,\n                    };\n                }\n                throw error;\n            }\n        });\n    }\n    // User Admin API\n    /**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    createUser(attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n                    body: attributes,\n                    headers: this.headers,\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n     */\n    listUsers(params) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const pagination = { nextPage: null, lastPage: 0, total: 0 };\n                const response = yield _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                    query: {\n                        page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n                        per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '',\n                    },\n                    xform: _noResolveJsonResponse,\n                });\n                if (response.error)\n                    throw response.error;\n                const users = yield response.json();\n                const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n                const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n                if (links.length > 0) {\n                    links.forEach((link) => {\n                        const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n                        const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n                        pagination[`${rel}Page`] = page;\n                    });\n                    pagination.total = parseInt(total);\n                }\n                return { data: Object.assign(Object.assign({}, users), pagination), error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { users: [] }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    getUserById(uid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n                    headers: this.headers,\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    updateUserById(uid, attributes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n                    body: attributes,\n                    headers: this.headers,\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\n     * Defaults to false for backward compatibility.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    deleteUser(id, shouldSoftDelete = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n                    headers: this.headers,\n                    body: {\n                        should_soft_delete: shouldSoftDelete,\n                    },\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _listFactors(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data, error } = yield _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n                    headers: this.headers,\n                    xform: (factors) => {\n                        return { data: { factors }, error: null };\n                    },\n                });\n                return { data, error };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _deleteFactor(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n                    headers: this.headers,\n                });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=GoTrueAdminApi.js.map","// Generated by genversion.\nexport const version = '2.12.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const GOTRUE_URL = 'http://localhost:9999';\nexport const STORAGE_KEY = 'supabase.auth.token';\nexport const AUDIENCE = '';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` };\nexport const EXPIRY_MARGIN = 10; // in seconds\nexport const NETWORK_FAILURE = {\n    MAX_RETRIES: 10,\n    RETRY_INTERVAL: 2, // in deciseconds\n};\n//# sourceMappingURL=constants.js.map","import { supportsLocalStorage } from './helpers';\nconst localStorageAdapter = {\n    getItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return null;\n        }\n        return globalThis.localStorage.getItem(key);\n    },\n    setItem: (key, value) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.setItem(key, value);\n    },\n    removeItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.removeItem(key);\n    },\n};\nexport default localStorageAdapter;\n//# sourceMappingURL=local-storage.js.map","/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n    if (typeof globalThis === 'object')\n        return;\n    try {\n        Object.defineProperty(Object.prototype, '__magic__', {\n            get: function () {\n                return this;\n            },\n            configurable: true,\n        });\n        // @ts-expect-error 'Allow access to magic'\n        __magic__.globalThis = __magic__;\n        // @ts-expect-error 'Allow access to magic'\n        delete Object.prototype.__magic__;\n    }\n    catch (e) {\n        if (typeof self !== 'undefined') {\n            // @ts-expect-error 'Allow access to globals'\n            self.globalThis = self;\n        }\n    }\n}\n//# sourceMappingURL=polyfills.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthInvalidCredentialsError, AuthRetryableFetchError, AuthSessionMissingError, AuthUnknownError, isAuthApiError, isAuthError, } from './lib/errors';\nimport { _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, getParameterByName, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid, retryable, sleep, } from './lib/helpers';\nimport localStorageAdapter from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\nconst DEFAULT_OPTIONS = {\n    url: GOTRUE_URL,\n    storageKey: STORAGE_KEY,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    headers: DEFAULT_HEADERS,\n};\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000;\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3;\nexport default class GoTrueClient {\n    /**\n     * Create a new client for use in the browser.\n     */\n    constructor(options) {\n        this.stateChangeEmitters = new Map();\n        this.autoRefreshTicker = null;\n        this.visibilityChangedCallback = null;\n        this.refreshingDeferred = null;\n        /**\n         * Keeps track of the async client initialization.\n         * When null or not yet resolved the auth state is `unknown`\n         * Once resolved the the auth state is known and it's save to call any further client methods.\n         * Keep extra care to never reject or throw uncaught errors\n         */\n        this.initializePromise = null;\n        this.detectSessionInUrl = true;\n        /**\n         * Used to broadcast state change events to other tabs listening.\n         */\n        this.broadcastChannel = null;\n        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        this.inMemorySession = null;\n        this.storageKey = settings.storageKey;\n        this.autoRefreshToken = settings.autoRefreshToken;\n        this.persistSession = settings.persistSession;\n        this.storage = settings.storage || localStorageAdapter;\n        this.admin = new GoTrueAdminApi({\n            url: settings.url,\n            headers: settings.headers,\n            fetch: settings.fetch,\n        });\n        this.url = settings.url;\n        this.headers = settings.headers;\n        this.fetch = resolveFetch(settings.fetch);\n        this.detectSessionInUrl = settings.detectSessionInUrl;\n        this.mfa = {\n            verify: this._verify.bind(this),\n            enroll: this._enroll.bind(this),\n            unenroll: this._unenroll.bind(this),\n            challenge: this._challenge.bind(this),\n            listFactors: this._listFactors.bind(this),\n            challengeAndVerify: this._challengeAndVerify.bind(this),\n            getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n        };\n        if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n            this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n            this.broadcastChannel.addEventListener('message', (event) => {\n                this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n            });\n        }\n        this.initialize();\n    }\n    /**\n     * Initializes the client session either from the url or from storage.\n     * This method is automatically called when instantiating the client, but should also be called\n     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n     */\n    initialize() {\n        if (!this.initializePromise) {\n            this.initializePromise = this._initialize();\n        }\n        return this.initializePromise;\n    }\n    /**\n     * IMPORTANT:\n     * 1. Never throw in this method, as it is called from the constructor\n     * 2. Never return a session from this method as it would be cached over\n     *    the whole lifetime of the client\n     */\n    _initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.initializePromise) {\n                return this.initializePromise;\n            }\n            try {\n                if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n                    const { data, error } = yield this._getSessionFromUrl();\n                    if (error) {\n                        // failed login attempt via url,\n                        // remove old session as in verifyOtp, signUp and signInWith*\n                        yield this._removeSession();\n                        return { error };\n                    }\n                    const { session, redirectType } = data;\n                    yield this._saveSession(session);\n                    this._notifyAllSubscribers('SIGNED_IN', session);\n                    if (redirectType === 'recovery') {\n                        this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n                    }\n                    return { error: null };\n                }\n                // no login attempt via callback url try to recover session from storage\n                yield this._recoverAndRefresh();\n                return { error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { error };\n                }\n                return {\n                    error: new AuthUnknownError('Unexpected error during initialization', error),\n                };\n            }\n            finally {\n                yield this._handleVisibilityChange();\n            }\n        });\n    }\n    /**\n     * Creates a new user.\n     *\n     * Be aware that if a user account exists in the system you may get back an\n     * error message that attempts to hide this information from the user.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    signUp(credentials) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._removeSession();\n                let res;\n                if ('email' in credentials) {\n                    const { email, password, options } = credentials;\n                    res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n                        headers: this.headers,\n                        redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                        body: {\n                            email,\n                            password,\n                            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                        xform: _sessionResponse,\n                    });\n                }\n                else if ('phone' in credentials) {\n                    const { phone, password, options } = credentials;\n                    res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n                        headers: this.headers,\n                        body: {\n                            phone,\n                            password,\n                            data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                        xform: _sessionResponse,\n                    });\n                }\n                else {\n                    throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n                }\n                const { data, error } = res;\n                if (error || !data) {\n                    return { data: { user: null, session: null }, error: error };\n                }\n                const session = data.session;\n                const user = data.user;\n                if (data.session) {\n                    yield this._saveSession(data.session);\n                    this._notifyAllSubscribers('SIGNED_IN', session);\n                }\n                return { data: { user, session }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Log in an existing user with an email and password or phone and password.\n     *\n     * Be aware that you may get back an error message that will not distingish\n     * between the cases where the account does not exist or that the\n     * email/phone and password combination is wrong or that the account can only\n     * be accessed via social login.\n     */\n    signInWithPassword(credentials) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._removeSession();\n                let res;\n                if ('email' in credentials) {\n                    const { email, password, options } = credentials;\n                    res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n                        headers: this.headers,\n                        body: {\n                            email,\n                            password,\n                            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                        xform: _sessionResponse,\n                    });\n                }\n                else if ('phone' in credentials) {\n                    const { phone, password, options } = credentials;\n                    res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n                        headers: this.headers,\n                        body: {\n                            phone,\n                            password,\n                            data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                        xform: _sessionResponse,\n                    });\n                }\n                else {\n                    throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n                }\n                const { data, error } = res;\n                if (error || !data)\n                    return { data: { user: null, session: null }, error };\n                if (data.session) {\n                    yield this._saveSession(data.session);\n                    this._notifyAllSubscribers('SIGNED_IN', data.session);\n                }\n                return { data, error };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Log in an existing user via a third-party provider.\n     */\n    signInWithOAuth(credentials) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._removeSession();\n            return this._handleProviderSignIn(credentials.provider, {\n                redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n                scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n                queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n                skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect,\n            });\n        });\n    }\n    /**\n     * Allows signing in with an ID token issued by certain supported providers.\n     * The ID token is verified for validity and a new session is established.\n     *\n     * @experimental\n     */\n    signInWithIdToken(credentials) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._removeSession();\n            try {\n                const { options, provider, token, nonce } = credentials;\n                const res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n                    headers: this.headers,\n                    body: {\n                        provider,\n                        id_token: token,\n                        nonce,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                    xform: _sessionResponse,\n                });\n                const { data, error } = res;\n                if (error || !data)\n                    return { data: { user: null, session: null }, error };\n                if (data.session) {\n                    yield this._saveSession(data.session);\n                    this._notifyAllSubscribers('SIGNED_IN', data.session);\n                }\n                return { data, error };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Log in a user using magiclink or a one-time password (OTP).\n     *\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or, that the account\n     * can only be accessed via social login.\n     */\n    signInWithOtp(credentials) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._removeSession();\n                if ('email' in credentials) {\n                    const { email, options } = credentials;\n                    const { error } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n                        headers: this.headers,\n                        body: {\n                            email,\n                            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                            create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                        redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                    });\n                    return { data: { user: null, session: null }, error };\n                }\n                if ('phone' in credentials) {\n                    const { phone, options } = credentials;\n                    const { error } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n                        headers: this.headers,\n                        body: {\n                            phone,\n                            data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n                            create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n                            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        },\n                    });\n                    return { data: { user: null, session: null }, error };\n                }\n                throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Log in a user given a User supplied OTP received via mobile.\n     */\n    verifyOtp(params) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._removeSession();\n                const { data, error } = yield _request(this.fetch, 'POST', `${this.url}/verify`, {\n                    headers: this.headers,\n                    body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: (_a = params.options) === null || _a === void 0 ? void 0 : _a.captchaToken } }),\n                    redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,\n                    xform: _sessionResponse,\n                });\n                if (error) {\n                    throw error;\n                }\n                if (!data) {\n                    throw 'An error occurred on token verification.';\n                }\n                const session = data.session;\n                const user = data.user;\n                if (session === null || session === void 0 ? void 0 : session.access_token) {\n                    yield this._saveSession(session);\n                    this._notifyAllSubscribers('SIGNED_IN', session);\n                }\n                return { data: { user, session }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Attempts a single-sign on using an enterprise Identity Provider. A\n     * successful SSO attempt will redirect the current page to the identity\n     * provider authorization page. The redirect URL is implementation and SSO\n     * protocol specific.\n     *\n     * You can use it by providing a SSO domain. Typically you can extract this\n     * domain by asking users for their email address. If this domain is\n     * registered on the Auth instance the redirect will use that organization's\n     * currently active SSO Identity Provider for the login.\n     *\n     * If you have built an organization-specific login page, you can use the\n     * organization's SSO Identity Provider UUID directly instead.\n     *\n     * This API is experimental and availability is conditional on correct\n     * settings on the Auth service.\n     *\n     * @experimental\n     */\n    signInWithSSO(params) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this._removeSession();\n                return yield _request(this.fetch, 'POST', `${this.url}/sso`, {\n                    body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, ('providerId' in params ? { provider_id: params.providerId } : null)), ('domain' in params ? { domain: params.domain } : null)), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined }), (((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken)\n                        ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n                        : null)), { skip_http_redirect: true }),\n                    headers: this.headers,\n                    xform: _ssoResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Returns the session, refreshing it if necessary.\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n     */\n    getSession() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // make sure we've read the session from the url if there is one\n            // save to just await, as long we make sure _initialize() never throws\n            yield this.initializePromise;\n            let currentSession = null;\n            if (this.persistSession) {\n                const maybeSession = yield getItemAsync(this.storage, this.storageKey);\n                if (maybeSession !== null) {\n                    if (this._isValidSession(maybeSession)) {\n                        currentSession = maybeSession;\n                    }\n                    else {\n                        yield this._removeSession();\n                    }\n                }\n            }\n            else {\n                currentSession = this.inMemorySession;\n            }\n            if (!currentSession) {\n                return { data: { session: null }, error: null };\n            }\n            const hasExpired = currentSession.expires_at\n                ? currentSession.expires_at <= Date.now() / 1000\n                : false;\n            if (!hasExpired) {\n                return { data: { session: currentSession }, error: null };\n            }\n            const { session, error } = yield this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n                return { data: { session: null }, error };\n            }\n            return { data: { session }, error: null };\n        });\n    }\n    /**\n     * Gets the current user details if there is an existing session.\n     * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n     */\n    getUser(jwt) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!jwt) {\n                    const { data, error } = yield this.getSession();\n                    if (error) {\n                        throw error;\n                    }\n                    // Default to Authorization header if there is no existing session\n                    jwt = (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n                }\n                return yield _request(this.fetch, 'GET', `${this.url}/user`, {\n                    headers: this.headers,\n                    jwt: jwt,\n                    xform: _userResponse,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates user data for a logged in user.\n     */\n    updateUser(attributes, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data: sessionData, error: sessionError } = yield this.getSession();\n                if (sessionError) {\n                    throw sessionError;\n                }\n                if (!sessionData.session) {\n                    throw new AuthSessionMissingError();\n                }\n                const session = sessionData.session;\n                const { data, error: userError } = yield _request(this.fetch, 'PUT', `${this.url}/user`, {\n                    headers: this.headers,\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                    body: attributes,\n                    jwt: session.access_token,\n                    xform: _userResponse,\n                });\n                if (userError)\n                    throw userError;\n                session.user = data.user;\n                yield this._saveSession(session);\n                this._notifyAllSubscribers('USER_UPDATED', session);\n                return { data: { user: session.user }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Decodes a JWT (without performing any validation).\n     */\n    _decodeJWT(jwt) {\n        return decodeJWTPayload(jwt);\n    }\n    /**\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\n     * @param currentSession The current session that minimally contains an access token and refresh token.\n     */\n    setSession(currentSession) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!currentSession.access_token || !currentSession.refresh_token) {\n                    throw new AuthSessionMissingError();\n                }\n                const timeNow = Date.now() / 1000;\n                let expiresAt = timeNow;\n                let hasExpired = true;\n                let session = null;\n                const payload = decodeJWTPayload(currentSession.access_token);\n                if (payload.exp) {\n                    expiresAt = payload.exp;\n                    hasExpired = expiresAt <= timeNow;\n                }\n                if (hasExpired) {\n                    const { session: refreshedSession, error } = yield this._callRefreshToken(currentSession.refresh_token);\n                    if (error) {\n                        return { data: { user: null, session: null }, error: error };\n                    }\n                    if (!refreshedSession) {\n                        return { data: { user: null, session: null }, error: null };\n                    }\n                    session = refreshedSession;\n                }\n                else {\n                    const { data, error } = yield this.getUser(currentSession.access_token);\n                    if (error) {\n                        throw error;\n                    }\n                    session = {\n                        access_token: currentSession.access_token,\n                        refresh_token: currentSession.refresh_token,\n                        user: data.user,\n                        token_type: 'bearer',\n                        expires_in: expiresAt - timeNow,\n                        expires_at: expiresAt,\n                    };\n                    yield this._saveSession(session);\n                    this._notifyAllSubscribers('SIGNED_IN', session);\n                }\n                return { data: { user: session.user, session }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { session: null, user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Returns a new session, regardless of expiry status.\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n     * If the current session's refresh token is invalid, an error will be thrown.\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\n     */\n    refreshSession(currentSession) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!currentSession) {\n                    const { data, error } = yield this.getSession();\n                    if (error) {\n                        throw error;\n                    }\n                    currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n                }\n                if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n                    throw new AuthSessionMissingError();\n                }\n                const { session, error } = yield this._callRefreshToken(currentSession.refresh_token);\n                if (error) {\n                    return { data: { user: null, session: null }, error: error };\n                }\n                if (!session) {\n                    return { data: { user: null, session: null }, error: null };\n                }\n                return { data: { user: session.user, session }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { user: null, session: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Gets the session data from a URL string\n     */\n    _getSessionFromUrl() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!isBrowser())\n                    throw new AuthImplicitGrantRedirectError('No browser detected.');\n                if (!this._isImplicitGrantFlow()) {\n                    throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n                }\n                const error_description = getParameterByName('error_description');\n                if (error_description) {\n                    const error_code = getParameterByName('error_code');\n                    if (!error_code)\n                        throw new AuthImplicitGrantRedirectError('No error_code detected.');\n                    const error = getParameterByName('error');\n                    if (!error)\n                        throw new AuthImplicitGrantRedirectError('No error detected.');\n                    throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code });\n                }\n                const provider_token = getParameterByName('provider_token');\n                const provider_refresh_token = getParameterByName('provider_refresh_token');\n                const access_token = getParameterByName('access_token');\n                if (!access_token)\n                    throw new AuthImplicitGrantRedirectError('No access_token detected.');\n                const expires_in = getParameterByName('expires_in');\n                if (!expires_in)\n                    throw new AuthImplicitGrantRedirectError('No expires_in detected.');\n                const refresh_token = getParameterByName('refresh_token');\n                if (!refresh_token)\n                    throw new AuthImplicitGrantRedirectError('No refresh_token detected.');\n                const token_type = getParameterByName('token_type');\n                if (!token_type)\n                    throw new AuthImplicitGrantRedirectError('No token_type detected.');\n                const timeNow = Math.round(Date.now() / 1000);\n                const expires_at = timeNow + parseInt(expires_in);\n                const { data, error } = yield this.getUser(access_token);\n                if (error)\n                    throw error;\n                const user = data.user;\n                const session = {\n                    provider_token,\n                    provider_refresh_token,\n                    access_token,\n                    expires_in: parseInt(expires_in),\n                    expires_at,\n                    refresh_token,\n                    token_type,\n                    user,\n                };\n                const redirectType = getParameterByName('type');\n                // Remove tokens from URL\n                window.location.hash = '';\n                return { data: { session, redirectType }, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { session: null, redirectType: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n     */\n    _isImplicitGrantFlow() {\n        return (isBrowser() &&\n            (Boolean(getParameterByName('access_token')) ||\n                Boolean(getParameterByName('error_description'))));\n    }\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n     * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n     *\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n     */\n    signOut() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data, error: sessionError } = yield this.getSession();\n            if (sessionError) {\n                return { error: sessionError };\n            }\n            const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n            if (accessToken) {\n                const { error } = yield this.admin.signOut(accessToken);\n                if (error) {\n                    // ignore 404s since user might not exist anymore\n                    // ignore 401s since an invalid or expired JWT should sign out the current session\n                    if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n                        return { error };\n                    }\n                }\n            }\n            yield this._removeSession();\n            this._notifyAllSubscribers('SIGNED_OUT', null);\n            return { error: null };\n        });\n    }\n    /**\n     * Receive a notification every time an auth event happens.\n     * @param callback A callback function to be invoked when an auth event happens.\n     */\n    onAuthStateChange(callback) {\n        const id = uuid();\n        const subscription = {\n            id,\n            callback,\n            unsubscribe: () => {\n                this.stateChangeEmitters.delete(id);\n            },\n        };\n        this.stateChangeEmitters.set(id, subscription);\n        return { data: { subscription } };\n    }\n    /**\n     * Sends a password reset request to an email address.\n     * @param email The email address of the user.\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n     */\n    resetPasswordForEmail(email, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield _request(this.fetch, 'POST', `${this.url}/recover`, {\n                    body: { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n                    headers: this.headers,\n                    redirectTo: options.redirectTo,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    _refreshAccessToken(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const startedAt = Date.now();\n                // will attempt to refresh the token with exponential backoff\n                return yield retryable((attempt) => __awaiter(this, void 0, void 0, function* () {\n                    yield sleep(attempt * 200); // 0, 200, 400, 800, ...\n                    return yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n                        body: { refresh_token: refreshToken },\n                        headers: this.headers,\n                        xform: _sessionResponse,\n                    });\n                }), (attempt, _, result) => result &&\n                    result.error &&\n                    result.error instanceof AuthRetryableFetchError &&\n                    // retryable only if the request can be sent before the backoff overflows the tick duration\n                    Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION);\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: { session: null, user: null }, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _isValidSession(maybeSession) {\n        const isValidSession = typeof maybeSession === 'object' &&\n            maybeSession !== null &&\n            'access_token' in maybeSession &&\n            'refresh_token' in maybeSession &&\n            'expires_at' in maybeSession;\n        return isValidSession;\n    }\n    _handleProviderSignIn(provider, options = {}) {\n        const url = this._getUrlForProvider(provider, {\n            redirectTo: options.redirectTo,\n            scopes: options.scopes,\n            queryParams: options.queryParams,\n        });\n        // try to open on the browser\n        if (isBrowser() && !options.skipBrowserRedirect) {\n            window.location.assign(url);\n        }\n        return { data: { provider, url }, error: null };\n    }\n    /**\n     * Recovers the session from LocalStorage and refreshes\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n    _recoverAndRefresh() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const currentSession = yield getItemAsync(this.storage, this.storageKey);\n                if (!this._isValidSession(currentSession)) {\n                    if (currentSession !== null) {\n                        yield this._removeSession();\n                    }\n                    return;\n                }\n                const timeNow = Math.round(Date.now() / 1000);\n                if (((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN) {\n                    if (this.autoRefreshToken && currentSession.refresh_token) {\n                        const { error } = yield this._callRefreshToken(currentSession.refresh_token);\n                        if (error) {\n                            console.log(error.message);\n                            yield this._removeSession();\n                        }\n                    }\n                    else {\n                        yield this._removeSession();\n                    }\n                }\n                else {\n                    if (this.persistSession) {\n                        yield this._saveSession(currentSession);\n                    }\n                    this._notifyAllSubscribers('SIGNED_IN', currentSession);\n                }\n            }\n            catch (err) {\n                console.error(err);\n                return;\n            }\n        });\n    }\n    _callRefreshToken(refreshToken) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            // refreshing is already in progress\n            if (this.refreshingDeferred) {\n                return this.refreshingDeferred.promise;\n            }\n            try {\n                this.refreshingDeferred = new Deferred();\n                if (!refreshToken) {\n                    throw new AuthSessionMissingError();\n                }\n                const { data, error } = yield this._refreshAccessToken(refreshToken);\n                if (error)\n                    throw error;\n                if (!data.session)\n                    throw new AuthSessionMissingError();\n                yield this._saveSession(data.session);\n                this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n                const result = { session: data.session, error: null };\n                this.refreshingDeferred.resolve(result);\n                return result;\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    const result = { session: null, error };\n                    (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n                    return result;\n                }\n                (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n                throw error;\n            }\n            finally {\n                this.refreshingDeferred = null;\n            }\n        });\n    }\n    _notifyAllSubscribers(event, session, broadcast = true) {\n        if (this.broadcastChannel && broadcast) {\n            this.broadcastChannel.postMessage({ event, session });\n        }\n        this.stateChangeEmitters.forEach((x) => x.callback(event, session));\n    }\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n    _saveSession(session) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.persistSession) {\n                this.inMemorySession = session;\n            }\n            if (this.persistSession && session.expires_at) {\n                yield this._persistSession(session);\n            }\n        });\n    }\n    _persistSession(currentSession) {\n        return setItemAsync(this.storage, this.storageKey, currentSession);\n    }\n    _removeSession() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.persistSession) {\n                yield removeItemAsync(this.storage, this.storageKey);\n            }\n            else {\n                this.inMemorySession = null;\n            }\n        });\n    }\n    /**\n     * Removes any registered visibilitychange callback.\n     *\n     * {@see #startAutoRefresh}\n     * {@see #stopAutoRefresh}\n     */\n    _removeVisibilityChangedCallback() {\n        const callback = this.visibilityChangedCallback;\n        this.visibilityChangedCallback = null;\n        try {\n            if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n                window.removeEventListener('visibilitychange', callback);\n            }\n        }\n        catch (e) {\n            console.error('removing visibilitychange callback failed', e);\n        }\n    }\n    /**\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\n     * within the library.\n     */\n    _startAutoRefresh() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._stopAutoRefresh();\n            const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);\n            this.autoRefreshTicker = ticker;\n            if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n                // ticker is a NodeJS Timeout object that has an `unref` method\n                // https://nodejs.org/api/timers.html#timeoutunref\n                // When auto refresh is used in NodeJS (like for testing) the\n                // `setInterval` is preventing the process from being marked as\n                // finished and tests run endlessly. This can be prevented by calling\n                // `unref()` on the returned object.\n                ticker.unref();\n            }\n            // run the tick immediately\n            yield this._autoRefreshTokenTick();\n        });\n    }\n    /**\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\n     * within the library.\n     */\n    _stopAutoRefresh() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ticker = this.autoRefreshTicker;\n            this.autoRefreshTicker = null;\n            if (ticker) {\n                clearInterval(ticker);\n            }\n        });\n    }\n    /**\n     * Starts an auto-refresh process in the background. The session is checked\n     * every few seconds. Close to the time of expiration a process is started to\n     * refresh the session. If refreshing fails it will be retried for as long as\n     * necessary.\n     *\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n     * to call this function, it will be called for you.\n     *\n     * On browsers the refresh process works only when the tab/window is in the\n     * foreground to conserve resources as well as prevent race conditions and\n     * flooding auth with requests. If you call this method any managed\n     * visibility change callback will be removed and you must manage visibility\n     * changes on your own.\n     *\n     * On non-browser platforms the refresh process works *continuously* in the\n     * background, which may not be desireable. You should hook into your\n     * platform's foreground indication mechanism and call these methods\n     * appropriately to conserve resources.\n     *\n     * {@see #stopAutoRefresh}\n     */\n    startAutoRefresh() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._removeVisibilityChangedCallback();\n            yield this._startAutoRefresh();\n        });\n    }\n    /**\n     * Stops an active auto refresh process running in the background (if any).\n     *\n     * If you call this method any managed visibility change callback will be\n     * removed and you must manage visibility changes on your own.\n     *\n     * See {@link #startAutoRefresh} for more details.\n     */\n    stopAutoRefresh() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._removeVisibilityChangedCallback();\n            yield this._stopAutoRefresh();\n        });\n    }\n    /**\n     * Runs the auto refresh token tick.\n     */\n    _autoRefreshTokenTick() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const now = Date.now();\n            try {\n                const { data: { session }, } = yield this.getSession();\n                if (!session || !session.refresh_token || !session.expires_at) {\n                    return;\n                }\n                // session will expire in this many ticks (or has already expired if <= 0)\n                const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION);\n                if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n                    yield this._callRefreshToken(session.refresh_token);\n                }\n            }\n            catch (e) {\n                console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n            }\n        });\n    }\n    /**\n     * Registers callbacks on the browser / platform, which in-turn run\n     * algorithms when the browser window/tab are in foreground. On non-browser\n     * platforms it assumes always foreground.\n     */\n    _handleVisibilityChange() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n                if (this.autoRefreshToken) {\n                    // in non-browser environments the refresh token ticker runs always\n                    this.startAutoRefresh();\n                }\n                return false;\n            }\n            try {\n                this.visibilityChangedCallback = () => __awaiter(this, void 0, void 0, function* () { return yield this._onVisibilityChanged(false); });\n                window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n                // now immediately call the visbility changed callback to setup with the\n                // current visbility state\n                yield this._onVisibilityChanged(true); // initial call\n            }\n            catch (error) {\n                console.error('_handleVisibilityChange', error);\n            }\n        });\n    }\n    /**\n     * Callback registered with `window.addEventListener('visibilitychange')`.\n     */\n    _onVisibilityChanged(isInitial) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (document.visibilityState === 'visible') {\n                if (!isInitial) {\n                    // initial visibility change setup is handled in another flow under #initialize()\n                    yield this.initializePromise;\n                    yield this._recoverAndRefresh();\n                }\n                if (this.autoRefreshToken) {\n                    // in browser environments the refresh token ticker runs only on focused tabs\n                    // which prevents race conditions\n                    this._startAutoRefresh();\n                }\n            }\n            else if (document.visibilityState === 'hidden') {\n                if (this.autoRefreshToken) {\n                    this._stopAutoRefresh();\n                }\n            }\n        });\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n     */\n    _getUrlForProvider(provider, options) {\n        const urlParams = [`provider=${encodeURIComponent(provider)}`];\n        if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n            urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.scopes) {\n            urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.queryParams) {\n            const query = new URLSearchParams(options.queryParams);\n            urlParams.push(query.toString());\n        }\n        return `${this.url}/authorize?${urlParams.join('&')}`;\n    }\n    _unenroll(params) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data: sessionData, error: sessionError } = yield this.getSession();\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                return yield _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#enroll}\n     */\n    _enroll(params) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data: sessionData, error: sessionError } = yield this.getSession();\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                const { data, error } = yield _request(this.fetch, 'POST', `${this.url}/factors`, {\n                    body: {\n                        friendly_name: params.friendlyName,\n                        factor_type: params.factorType,\n                        issuer: params.issuer,\n                    },\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n                if (error) {\n                    return { data: null, error };\n                }\n                if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {\n                    data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n                }\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#verify}\n     */\n    _verify(params) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data: sessionData, error: sessionError } = yield this.getSession();\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                const { data, error } = yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n                    body: { code: params.code, challenge_id: params.challengeId },\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n                if (error) {\n                    return { data: null, error };\n                }\n                yield this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1000) + data.expires_in }, data));\n                this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n                return { data, error };\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#challenge}\n     */\n    _challenge(params) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { data: sessionData, error: sessionError } = yield this.getSession();\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                return yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#challengeAndVerify}\n     */\n    _challengeAndVerify(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data: challengeData, error: challengeError } = yield this._challenge({\n                factorId: params.factorId,\n            });\n            if (challengeError) {\n                return { data: null, error: challengeError };\n            }\n            return yield this._verify({\n                factorId: params.factorId,\n                challengeId: challengeData.id,\n                code: params.code,\n            });\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#listFactors}\n     */\n    _listFactors() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data: { user }, error: userError, } = yield this.getUser();\n            if (userError) {\n                return { data: null, error: userError };\n            }\n            const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n            const totp = factors.filter((factor) => factor.factor_type === 'totp' && factor.status === 'verified');\n            return {\n                data: {\n                    all: factors,\n                    totp,\n                },\n                error: null,\n            };\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n     */\n    _getAuthenticatorAssuranceLevel() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data: { session }, error: sessionError, } = yield this.getSession();\n            if (sessionError) {\n                return { data: null, error: sessionError };\n            }\n            if (!session) {\n                return {\n                    data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n                    error: null,\n                };\n            }\n            const payload = this._decodeJWT(session.access_token);\n            let currentLevel = null;\n            if (payload.aal) {\n                currentLevel = payload.aal;\n            }\n            let nextLevel = currentLevel;\n            const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n            if (verifiedFactors.length > 0) {\n                nextLevel = 'aal2';\n            }\n            const currentAuthenticationMethods = payload.amr || [];\n            return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };\n        });\n    }\n}\n//# sourceMappingURL=GoTrueClient.js.map","import GoTrueAdminApi from './GoTrueAdminApi';\nimport GoTrueClient from './GoTrueClient';\nexport { GoTrueAdminApi, GoTrueClient };\nexport * from './lib/types';\nexport * from './lib/errors';\n//# sourceMappingURL=index.js.map","import { GoTrueClient } from '@supabase/gotrue-js';\nexport class SupabaseAuthClient extends GoTrueClient {\n    constructor(options) {\n        super(options);\n    }\n}\n//# sourceMappingURL=SupabaseAuthClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nconst DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nconst DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n        if (isPlatform) {\n            const urlParts = _supabaseUrl.split('.');\n            this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n        }\n        else {\n            this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        }\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n        this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n        this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n            fetch: this.fetch,\n        });\n        this._listenForAuthEvents();\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param args  The parameters to pass to the function call.\n     * @param options.head   When set to true, no data will be returned.\n     * @param options.count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc(fn, args = {}, options) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            fetch,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n        });\n        return data;\n    }\n    _handleTokenChanged(event, token, source) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            // Token has changed\n            this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n            // Token is removed\n            this.realtime.setAuth(this.supabaseKey);\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map","import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/gotrue-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};\n//# sourceMappingURL=index.js.map","function createParser(onParse) {\n  let isFirstChunk;\n  let buffer;\n  let startingPosition;\n  let startingFieldLength;\n  let eventId;\n  let eventName;\n  let data;\n  reset();\n  return {\n    feed,\n    reset\n  };\n  function reset() {\n    isFirstChunk = true;\n    buffer = \"\";\n    startingPosition = 0;\n    startingFieldLength = -1;\n    eventId = void 0;\n    eventName = void 0;\n    data = \"\";\n  }\n  function feed(chunk) {\n    buffer = buffer ? buffer + chunk : chunk;\n    if (isFirstChunk && hasBom(buffer)) {\n      buffer = buffer.slice(BOM.length);\n    }\n    isFirstChunk = false;\n    const length = buffer.length;\n    let position = 0;\n    let discardTrailingNewline = false;\n    while (position < length) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === \"\\n\") {\n          ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineLength = -1;\n      let fieldLength = startingFieldLength;\n      let character;\n      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {\n        character = buffer[index];\n        if (character === \":\" && fieldLength < 0) {\n          fieldLength = index - position;\n        } else if (character === \"\\r\") {\n          discardTrailingNewline = true;\n          lineLength = index - position;\n        } else if (character === \"\\n\") {\n          lineLength = index - position;\n        }\n      }\n      if (lineLength < 0) {\n        startingPosition = length - position;\n        startingFieldLength = fieldLength;\n        break;\n      } else {\n        startingPosition = 0;\n        startingFieldLength = -1;\n      }\n      parseEventStreamLine(buffer, position, fieldLength, lineLength);\n      position += lineLength + 1;\n    }\n    if (position === length) {\n      buffer = \"\";\n    } else if (position > 0) {\n      buffer = buffer.slice(position);\n    }\n  }\n  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        onParse({\n          type: \"event\",\n          id: eventId,\n          event: eventName || void 0,\n          data: data.slice(0, -1)\n          // remove trailing newline\n        });\n\n        data = \"\";\n        eventId = void 0;\n      }\n      eventName = void 0;\n      return;\n    }\n    const noValue = fieldLength < 0;\n    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n    let step = 0;\n    if (noValue) {\n      step = lineLength;\n    } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n      step = fieldLength + 2;\n    } else {\n      step = fieldLength + 1;\n    }\n    const position = index + step;\n    const valueLength = lineLength - step;\n    const value = lineBuffer.slice(position, position + valueLength).toString();\n    if (field === \"data\") {\n      data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n    } else if (field === \"event\") {\n      eventName = value;\n    } else if (field === \"id\" && !value.includes(\"\\0\")) {\n      eventId = value;\n    } else if (field === \"retry\") {\n      const retry = parseInt(value, 10);\n      if (!Number.isNaN(retry)) {\n        onParse({\n          type: \"reconnect-interval\",\n          value: retry\n        });\n      }\n    }\n  }\n}\nconst BOM = [239, 187, 191];\nfunction hasBom(buffer) {\n  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);\n}\nexport { createParser };\n//# sourceMappingURL=index.esm.js.map\n","import { OpenAIModel } from \"@/types\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { createParser, ParsedEvent, ReconnectInterval } from \"eventsource-parser\";\n\nexport const supabaseAdmin = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);\n\n\nexport const OpenAIStream = async (prompt: string, apiKey: string) => {\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  const res = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      model: OpenAIModel.DAVINCI_TURBO,\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a helpful assistant that accurately answers queries using Paul Graham's essays. \" +\n              \"Use the text provided to form your answer, but avoid copying word-for-word from the essays. \" +\n              \"Try to use your own words when possible. Keep your answer under 5 sentences. \" +\n              \"Be accurate, helpful, concise, and clear.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 150,\n      temperature: 0.0,\n      stream: true\n    })\n  });\n\n  if (res.status !== 200) {\n    throw new Error(\"OpenAI API returned an error\");\n  }\n\n  const stream = new ReadableStream({\n    async start(controller) {\n      const onParse = (event: ParsedEvent | ReconnectInterval) => {\n        if (event.type === \"event\") {\n          const data = event.data;\n\n          if (data === \"[DONE]\") {\n            controller.close();\n            return;\n          }\n\n          try {\n            const json = JSON.parse(data);\n            const text = json.choices[0].delta.content;\n            const queue = encoder.encode(text);\n            controller.enqueue(queue);\n          } catch (e) {\n            controller.error(e);\n          }\n        }\n      };\n\n      const parser = createParser(onParse);\n\n      for await (const chunk of res.body as any) {\n        parser.feed(decoder.decode(chunk));\n      }\n    }\n  });\n\n  return stream;\n};\n\n/*\nexport async function OpenAIStream(input: string): Promise<ReadableStream<Uint8Array>> {\n  const response = await fetch(`http://127.0.0.1:8000/api/prompt_c?input=${encodeURIComponent(input)}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch from Django endpoint\");\n  }\n  return response.body!;\n}\n*/\n\n\n\n","export class PageSignatureError extends Error {\n    constructor({ page  }){\n        super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n    }\n}\nexport class RemovedPageError extends Error {\n    constructor(){\n        super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n    }\n}\nexport class RemovedUAError extends Error {\n    constructor(){\n        super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n    }\n}\n\n//# sourceMappingURL=error.js.map","export function fromNodeHeaders(object) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(object)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (v !== undefined) {\n                headers.append(key, v);\n            }\n        }\n    }\n    return headers;\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ export function splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nexport function toNodeHeaders(headers) {\n    const result = {};\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            result[key] = value;\n            if (key.toLowerCase() === \"set-cookie\") {\n                result[key] = splitCookiesString(value);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Validate the correctness of a user-provided URL.\n */ export function validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n}\n\n//# sourceMappingURL=utils.js.map","import { PageSignatureError } from \"../error\";\nconst responseSymbol = Symbol(\"response\");\nconst passThroughSymbol = Symbol(\"passThrough\");\nexport const waitUntilSymbol = Symbol(\"waitUntil\");\nclass FetchEvent {\n    [waitUntilSymbol] = [];\n    [passThroughSymbol] = false;\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(_request){}\n    respondWith(response) {\n        if (!this[responseSymbol]) {\n            this[responseSymbol] = Promise.resolve(response);\n        }\n    }\n    passThroughOnException() {\n        this[passThroughSymbol] = true;\n    }\n    waitUntil(promise) {\n        this[waitUntilSymbol].push(promise);\n    }\n}\nexport class NextFetchEvent extends FetchEvent {\n    constructor(params){\n        super(params.request);\n        this.sourcePage = params.page;\n    }\n    /**\n   * @deprecated The `request` is now the first parameter and the API is now async.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    /**\n   * @deprecated Using `respondWith` is no longer needed.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\n\n//# sourceMappingURL=fetch-event.js.map","export function detectDomainLocale(domainItems, hostname, detectedLocale) {\n    let domainItem;\n    if (domainItems) {\n        if (detectedLocale) {\n            detectedLocale = detectedLocale.toLowerCase();\n        }\n        for (const item of domainItems){\n            var ref, ref1;\n            // remove port if present\n            const domainHostname = (ref = item.domain) == null ? void 0 : ref.split(':')[0].toLowerCase();\n            if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((ref1 = item.locales) == null ? void 0 : ref1.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n                domainItem = item;\n                break;\n            }\n        }\n    }\n    return domainItem;\n}\n\n//# sourceMappingURL=detect-domain-locale.js.map","/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ export function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, '') || '/';\n}\n\n//# sourceMappingURL=remove-trailing-slash.js.map","/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ export function parsePath(path) {\n    const hashIndex = path.indexOf('#');\n    const queryIndex = path.indexOf('?');\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : '',\n            hash: hashIndex > -1 ? path.slice(hashIndex) : ''\n        };\n    }\n    return {\n        pathname: path,\n        query: '',\n        hash: ''\n    };\n}\n\n//# sourceMappingURL=parse-path.js.map","import { parsePath } from './parse-path';\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */ export function addPathPrefix(path, prefix) {\n    if (!path.startsWith('/') || !prefix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${prefix}${pathname}${query}${hash}`;\n}\n\n//# sourceMappingURL=add-path-prefix.js.map","import { parsePath } from './parse-path';\n/**\n * Similarly to `addPathPrefix`, this function adds a suffix at the end on the\n * provided path. It also works only for paths ensuring the argument starts\n * with a slash.\n */ export function addPathSuffix(path, suffix) {\n    if (!path.startsWith('/') || !suffix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${pathname}${suffix}${query}${hash}`;\n}\n\n//# sourceMappingURL=add-path-suffix.js.map","import { parsePath } from './parse-path';\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */ export function pathHasPrefix(path, prefix) {\n    if (typeof path !== 'string') {\n        return false;\n    }\n    const { pathname  } = parsePath(path);\n    return pathname === prefix || pathname.startsWith(prefix + '/');\n}\n\n//# sourceMappingURL=path-has-prefix.js.map","import { addPathPrefix } from './add-path-prefix';\nimport { pathHasPrefix } from './path-has-prefix';\n/**\n * For a given path and a locale, if the locale is given, it will prefix the\n * locale. The path shouldn't be an API path. If a default locale is given the\n * prefix will be omitted if the locale is already the default locale.\n */ export function addLocale(path, locale, defaultLocale, ignorePrefix) {\n    if (locale && locale !== defaultLocale && (ignorePrefix || !pathHasPrefix(path.toLowerCase(), `/${locale.toLowerCase()}`) && !pathHasPrefix(path.toLowerCase(), '/api'))) {\n        return addPathPrefix(path, `/${locale}`);\n    }\n    return path;\n}\n\n//# sourceMappingURL=add-locale.js.map","import { removeTrailingSlash } from './remove-trailing-slash';\nimport { addPathPrefix } from './add-path-prefix';\nimport { addPathSuffix } from './add-path-suffix';\nimport { addLocale } from './add-locale';\nexport function formatNextPathnameInfo(info) {\n    let pathname = addLocale(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = removeTrailingSlash(pathname);\n    }\n    if (info.buildId) {\n        pathname = addPathSuffix(addPathPrefix(pathname, `/_next/data/${info.buildId}`), info.pathname === '/' ? 'index.json' : '.json');\n    }\n    pathname = addPathPrefix(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith('/') ? addPathSuffix(pathname, '/') : pathname : removeTrailingSlash(pathname);\n}\n\n//# sourceMappingURL=format-next-pathname-info.js.map","/**\n * Takes an object with a hostname property (like a parsed URL) and some\n * headers that may contain Host and returns the preferred hostname.\n * @param parsed An object containing a hostname property.\n * @param headers A dictionary with headers containing a `host`.\n */ export function getHostname(parsed, headers) {\n    var ref;\n    return (ref = !Array.isArray(headers == null ? void 0 : headers.host) && (headers == null ? void 0 : headers.host) || parsed.hostname) == null ? void 0 : ref.split(':')[0].toLowerCase();\n}\n\n//# sourceMappingURL=get-hostname.js.map","/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */ export function normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split('/');\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join('/') || '/';\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n}\n\n//# sourceMappingURL=normalize-locale-path.js.map","import { pathHasPrefix } from './path-has-prefix';\n/**\n * Given a path and a prefix it will remove the prefix when it exists in the\n * given path. It ensures it matches exactly without containing extra chars\n * and if the prefix is not there it will be noop.\n * @param path The path to remove the prefix from.\n * @param prefix The prefix to be removed.\n */ export function removePathPrefix(path, prefix) {\n    if (pathHasPrefix(path, prefix)) {\n        const withoutPrefix = path.slice(prefix.length);\n        return withoutPrefix.startsWith('/') ? withoutPrefix : `/${withoutPrefix}`;\n    }\n    return path;\n}\n\n//# sourceMappingURL=remove-path-prefix.js.map","import { normalizeLocalePath } from '../../i18n/normalize-locale-path';\nimport { removePathPrefix } from './remove-path-prefix';\nimport { pathHasPrefix } from './path-has-prefix';\nexport function getNextPathnameInfo(pathname, options) {\n    var _nextConfig;\n    const { basePath , i18n , trailingSlash  } = (_nextConfig = options.nextConfig) != null ? _nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== '/' ? pathname.endsWith('/') : trailingSlash\n    };\n    if (basePath && pathHasPrefix(info.pathname, basePath)) {\n        info.pathname = removePathPrefix(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith('/_next/data/') && info.pathname.endsWith('.json')) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, '').replace(/\\.json$/, '').split('/');\n        const buildId = paths[0];\n        info.pathname = paths[1] !== 'index' ? `/${paths.slice(1).join('/')}` : '/';\n        info.buildId = buildId;\n    }\n    if (i18n) {\n        const pathLocale = normalizeLocalePath(info.pathname, i18n.locales);\n        info.locale = pathLocale == null ? void 0 : pathLocale.detectedLocale;\n        info.pathname = (pathLocale == null ? void 0 : pathLocale.pathname) || info.pathname;\n    }\n    return info;\n}\n\n//# sourceMappingURL=get-next-pathname-info.js.map","import { detectDomainLocale } from \"../../shared/lib/i18n/detect-domain-locale\";\nimport { formatNextPathnameInfo } from \"../../shared/lib/router/utils/format-next-pathname-info\";\nimport { getHostname } from \"../../shared/lib/get-hostname\";\nimport { getNextPathnameInfo } from \"../../shared/lib/router/utils/get-next-pathname-info\";\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nexport class NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyzeUrl();\n    }\n    analyzeUrl() {\n        var ref, ref1, ref2, ref3, ref4;\n        const pathnameInfo = getNextPathnameInfo(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE\n        });\n        this[Internal].domainLocale = detectDomainLocale((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref1 = ref.i18n) == null ? void 0 : ref1.domains, getHostname(this[Internal].url, this[Internal].options.headers));\n        const defaultLocale = ((ref2 = this[Internal].domainLocale) == null ? void 0 : ref2.defaultLocale) || ((ref3 = this[Internal].options.nextConfig) == null ? void 0 : (ref4 = ref3.i18n) == null ? void 0 : ref4.defaultLocale);\n        this[Internal].url.pathname = pathnameInfo.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = pathnameInfo.basePath ?? \"\";\n        this[Internal].buildId = pathnameInfo.buildId;\n        this[Internal].locale = pathnameInfo.locale ?? defaultLocale;\n        this[Internal].trailingSlash = pathnameInfo.trailingSlash;\n    }\n    formatPathname() {\n        return formatNextPathnameInfo({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var ref, ref5;\n        if (!this[Internal].locale || !((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref5 = ref.i18n) == null ? void 0 : ref5.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyzeUrl();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n}\n\n//# sourceMappingURL=next-url.js.map","const SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : undefined;\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nexport function serialize(c) {\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && c.expires && `Expires=${c.expires.toUTCString()}`,\n        \"maxAge\" in c && c.maxAge && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`, \n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent(c.value ?? \"\")}; ${attrs.join(\"; \")}`;\n}\n/**\n * Parse a `Cookie` or `Set-Cookie header value\n */ export function parseCookieString(cookie) {\n    const map = new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const splitIndex = pair.indexOf(\"=\");\n        const key = pair.slice(0, splitIndex);\n        const value = pair.slice(splitIndex + 1);\n        map.set(key, decodeURIComponent(value ?? \"true\"));\n    }\n    return map;\n}\n/**\n * Parse a `Set-Cookie` header value\n */ export function parseSetCookieString(setCookie) {\n    if (!setCookie) {\n        return undefined;\n    }\n    const [[name, value], ...attributes] = parseCookieString(setCookie);\n    const { domain , expires , httponly , maxage , path , samesite , secure  } = Object.fromEntries(attributes.map(([key, v])=>[\n            key.toLowerCase(),\n            v\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\n\n//# sourceMappingURL=serialize.js.map","import { parseCookieString, serialize } from \"./serialize\";\n/**\n * A class for manipulating {@link Request} cookies (`Cookie` header).\n */ export class RequestCookies {\n    _parsed = new Map();\n    constructor(requestHeaders){\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookieString(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, v])=>serialize(v)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(/** Name or names of the cookies to be deleted  */ names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>serialize(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=request-cookies.js.map","import { parseSetCookieString, serialize } from \"./serialize\";\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = serialize(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1000);\n    }\n    if (cookie.path === null || cookie.path === undefined) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\n/**\n * A class for manipulating {@link Response} cookies (`Set-Cookie` header).\n * Loose implementation of the experimental [Cookie Store API](https://wicg.github.io/cookie-store/#dictdef-cookie)\n * The main difference is `ResponseCookies` methods do not return a Promise.\n */ export class ResponseCookies {\n    _parsed = new Map();\n    constructor(responseHeaders){\n        this._headers = responseHeaders;\n        // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        const headers = this._headers.getAll(\"set-cookie\");\n        for (const header of headers){\n            const parsed = parseSetCookieString(header);\n            if (parsed) {\n                this._parsed.set(parsed.name, parsed);\n            }\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter((c)=>c.name === key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this.set({\n            name,\n            value: \"\",\n            expires: new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=response-cookies.js.map","export { RequestCookies } from \"./request-cookies\";\nexport { ResponseCookies } from \"./response-cookies\";\n\n//# sourceMappingURL=index.js.map","import { NextURL } from \"../next-url\";\nimport { toNodeHeaders, validateURL } from \"../utils\";\nimport { RemovedUAError, RemovedPageError } from \"../error\";\nimport { RequestCookies } from \"./cookies\";\nexport const INTERNALS = Symbol(\"internal request\");\nexport class NextRequest extends Request {\n    constructor(input, init = {}){\n        const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n        validateURL(url);\n        super(url, init);\n        this[INTERNALS] = {\n            cookies: new RequestCookies(this.headers),\n            geo: init.geo || {},\n            ip: init.ip,\n            url: new NextURL(url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            })\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            geo: this.geo,\n            ip: this.ip,\n            nextUrl: this.nextUrl,\n            url: this.url,\n            // rest of props come from Request\n            bodyUsed: this.bodyUsed,\n            cache: this.cache,\n            credentials: this.credentials,\n            destination: this.destination,\n            headers: Object.fromEntries(this.headers),\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            method: this.method,\n            mode: this.mode,\n            redirect: this.redirect,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            signal: this.signal\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    get geo() {\n        return this[INTERNALS].geo;\n    }\n    get ip() {\n        return this[INTERNALS].ip;\n    }\n    get nextUrl() {\n        return this[INTERNALS].url;\n    }\n    /**\n   * @deprecated\n   * `page` has been deprecated in favour of `URLPattern`.\n   * Read more: https://nextjs.org/docs/messages/middleware-request-page\n   */ get page() {\n        throw new RemovedPageError();\n    }\n    /**\n   * @deprecated\n   * `ua` has been removed in favour of \\`userAgent\\` function.\n   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n   */ get ua() {\n        throw new RemovedUAError();\n    }\n    get url() {\n        return this[INTERNALS].url.toString();\n    }\n}\n\n//# sourceMappingURL=request.js.map","import { NextURL } from \"../next-url\";\nimport { toNodeHeaders, validateURL } from \"../utils\";\nimport { ResponseCookies } from \"./cookies\";\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var ref;\n    if (init == null ? void 0 : (ref = init.request) == null ? void 0 : ref.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nexport class NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new ResponseCookies(this.headers),\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\n\n//# sourceMappingURL=response.js.map","/**\n * Given a URL as a string and a base URL it will make the URL relative\n * if the parsed protocol and host is the same as the one in the base\n * URL. Otherwise it returns the same URL string.\n */ export function relativizeURL(url, base) {\n    const baseURL = typeof base === 'string' ? new URL(base) : base;\n    const relative = new URL(url, base);\n    const origin = `${baseURL.protocol}//${baseURL.host}`;\n    return `${relative.protocol}//${relative.host}` === origin ? relative.toString().replace(origin, '') : relative.toString();\n}\n\n//# sourceMappingURL=relativize-url.js.map","const INTERNAL_QUERY_NAMES = [\n    \"__nextFallback\",\n    \"__nextLocale\",\n    \"__nextDefaultLocale\",\n    \"__nextIsNotFound\", \n];\nconst EXTENDED_INTERNAL_QUERY_NAMES = [\n    \"__nextDataReq\"\n];\nexport function stripInternalQueries(query) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        delete query[name];\n    }\n}\nexport function stripInternalSearchParams(searchParams, extended) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        searchParams.delete(name);\n    }\n    if (extended) {\n        for (const name of EXTENDED_INTERNAL_QUERY_NAMES){\n            searchParams.delete(name);\n        }\n    }\n    return searchParams;\n}\n\n//# sourceMappingURL=internal-utils.js.map","// remove (name) from pathname as it's not considered for routing\nexport function normalizeAppPath(pathname) {\n    return pathname.split('/').reduce((acc, segment, index, segments)=>{\n        // Empty segments are ignored.\n        if (!segment) {\n            return acc;\n        }\n        if (segment.startsWith('(') && segment.endsWith(')')) {\n            return acc;\n        }\n        if (segment.startsWith('@')) {\n            return acc;\n        }\n        if (segment === 'page' && index === segments.length - 1) {\n            return acc;\n        }\n        return acc + `/${segment}`;\n    }, '');\n}\nexport function normalizeRscPath(pathname, enabled) {\n    return enabled ? pathname.replace(/\\.rsc($|\\?)/, '') : pathname;\n}\n\n//# sourceMappingURL=app-paths.js.map","export const RSC = 'RSC';\nexport const NEXT_ROUTER_STATE_TREE = 'Next-Router-State-Tree';\nexport const NEXT_ROUTER_PREFETCH = 'Next-Router-Prefetch';\nexport const FETCH_CACHE_HEADER = 'x-vercel-sc-headers';\nexport const RSC_VARY_HEADER = `${RSC}, ${NEXT_ROUTER_STATE_TREE}, ${NEXT_ROUTER_PREFETCH}`;\nexport const FLIGHT_PARAMETERS = [\n    [\n        RSC\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH\n    ], \n];\n\n//# sourceMappingURL=app-router-headers.js.map","import { PageSignatureError } from \"./error\";\nimport { fromNodeHeaders } from \"./utils\";\nimport { NextFetchEvent } from \"./spec-extension/fetch-event\";\nimport { NextRequest } from \"./spec-extension/request\";\nimport { NextResponse } from \"./spec-extension/response\";\nimport { relativizeURL } from \"../../shared/lib/router/utils/relativize-url\";\nimport { waitUntilSymbol } from \"./spec-extension/fetch-event\";\nimport { NextURL } from \"./next-url\";\nimport { stripInternalSearchParams } from \"../internal-utils\";\nimport { normalizeRscPath } from \"../../shared/lib/router/utils/app-paths\";\nimport { FETCH_CACHE_HEADER, NEXT_ROUTER_PREFETCH, NEXT_ROUTER_STATE_TREE, RSC } from \"../../client/components/app-router-headers\";\nclass NextRequestHint extends NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst FLIGHT_PARAMETERS = [\n    [\n        RSC\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH\n    ],\n    [\n        FETCH_CACHE_HEADER\n    ], \n];\nexport async function adapter(params) {\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    params.request.url = normalizeRscPath(params.request.url, true);\n    const requestUrl = new NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isDataReq = params.request.headers[\"x-nextjs-data\"];\n    if (isDataReq && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = fromNodeHeaders(params.request.headers);\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of FLIGHT_PARAMETERS){\n            requestHeaders.delete(param.toString().toLowerCase());\n        }\n    }\n    // Strip internal query parameters off the request.\n    stripInternalSearchParams(requestUrl.searchParams, true);\n    const request = new NextRequestHint({\n        page: params.page,\n        input: String(requestUrl),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isDataReq) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    const event = new NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response = await params.handler(request, event);\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite) {\n        const rewriteUrl = new NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ if (isDataReq) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizeURL(String(rewriteUrl), String(requestUrl)));\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect) {\n        const redirectURL = new NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isDataReq) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", relativizeURL(String(redirectURL), String(requestUrl)));\n        }\n    }\n    return {\n        response: response || NextResponse.next(),\n        waitUntil: Promise.all(event[waitUntilSymbol])\n    };\n}\nfunction getUnsupportedModuleErrorMessage(module) {\n    // warning: if you change these messages, you must adjust how react-dev-overlay's middleware detects modules not found\n    return `The edge runtime does not support Node.js '${module}' module.\nLearn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`;\n}\nfunction __import_unsupported(moduleName) {\n    const proxy = new Proxy(function() {}, {\n        get (_obj, prop) {\n            if (prop === \"then\") {\n                return {};\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        construct () {\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        apply (_target, _this, args) {\n            if (typeof args[0] === \"function\") {\n                return args[0](proxy);\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        }\n    });\n    return new Proxy({}, {\n        get: ()=>proxy\n    });\n}\nexport function enhanceGlobals() {\n    // The condition is true when the \"process\" module is provided\n    if (process !== global.process) {\n        // prefer local process but global.process has correct \"env\"\n        process.env = global.process.env;\n        global.process = process;\n    }\n    // to allow building code that import but does not use node.js modules,\n    // webpack will expect this function to exist in global scope\n    Object.defineProperty(globalThis, \"__import_unsupported\", {\n        value: __import_unsupported,\n        enumerable: false,\n        configurable: false\n    });\n}\n\n//# sourceMappingURL=adapter.js.map","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["self","global","__self__","F","fetch","DOMException","prototype","exports","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","Object","toString","call","normalizeName","name","String","test","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","Headers","headers","map","forEach","append","Array","isArray","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","Uint8Array","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","type","rejected","then","text","readAsText","readArrayBufferAsText","chars","length","i","fromCharCode","join","decode","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","Request","input","options","method","upcased","url","credentials","mode","signal","toUpperCase","referrer","form","trim","split","bytes","replace","decodeURIComponent","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","location","err","message","Error","stack","create","constructor","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","preProcessedHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","ponyfill","ctx","module","naiveFallback","window","globalThis","configurable","__global__","next_dist_esm_server_web_adapter__WEBPACK_IMPORTED_MODULE_0__","g","mod","__webpack_require__","handler","middleware","default","__WEBPACK_DEFAULT_EXPORT__","opts","V","page","config","runtime","req","query","apiKey","matches","res","Authorization","stringify","model","embedding","data","chunks","supabaseAdmin","query_embedding","similarity_threshold","match_count","console","OpenAIModel","DAVINCI_TURBO","SOCKET_STATES","CHANNEL_STATES","CHANNEL_EVENTS","TRANSPORTS","CONNECTION_STATE","REALTIME_PRESENCE_LISTEN_EVENTS","PostgresTypes","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","__awaiter","_arguments","P","generator","fulfilled","step","adopt","apply","resolveFetch","_fetch","customFetch","args","t","bind","FunctionsError","context","FunctionsFetchError","FunctionsRelayError","FunctionsHttpError","FunctionsClient_awaiter","FunctionsClient","setAuth","token","invoke","functionName","invokeOptions","_a","functionArgs","_headers","assign","catch","fetchError","isRelayError","PostgrestBuilder","builder","shouldThrowOnError","schema","allowEmpty","browser_ponyfill_default","throwOnError","onfulfilled","onrejected","includes","_b","_c","count","countHeader","match","contentRange","parseInt","_d","details","postgrestResponse","hint","code","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","c","order","column","ascending","nullsFirst","foreignTable","existingOrder","limit","range","from","to","keyOffset","keyLimit","abortSignal","single","maybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","filter","Boolean","forMediatype","rollback","returns","PostgrestFilterBuilder","eq","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","cleanedValues","s","contains","containedBy","rangeGt","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","typePart","configPart","not","operator","or","filters","PostgrestQueryBuilder","head","insert","prefersHeaders","unshift","reduce","acc","x","concat","uniqueColumns","Set","upsert","onConflict","ignoreDuplicates","update","delete","DEFAULT_HEADERS","PostgrestClient","relation","URL","rpc","fn","constants_DEFAULT_HEADERS","Timer","timerCalc","timer","tries","reset","clearTimeout","scheduleTimeout","setTimeout","Serializer","HEADER_LENGTH","rawPayload","_binaryDecode","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","topic","event","ref","payload","Push","channel","timeout","sent","timeoutTimer","receivedResp","recHooks","refEvent","rateLimited","resend","_cancelRefEvent","_hasReceived","startTimeout","socket","join_ref","_joinRef","updatePayload","receive","_makeRef","_replyEventName","_cancelTimeout","_matchReceive","_on","trigger","_trigger","destroy","_off","h","RealtimePresence","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","syncState","newState","syncDiff","inPendingSyncState","currentPresences","newPresences","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","joinedPresenceRefs","curPresences","presenceRefsToRemove","func","metas","presence","convertChangeData","record","skipTypes","rec_key","convertColumn","columnName","find","colType","convertCell","noop","charAt","dataType","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","val","RealtimeChannel_awaiter","RealtimeChannel","params","bindings","closed","joinedOnce","pushBuffer","broadcast","ack","joinPush","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","joined","pushEvent","_onClose","_remove","_onError","_isLeaving","_isClosed","reason","errored","_isJoining","reply","subscribe","accessTokenPayload","postgres_changes","r","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","clientPostgresBindings","bindingsLen","newPostgresBindings","clientPostgresBinding","table","serverPostgresFilter","id","unsubscribe","presenceState","track","untrack","on","_push","leaving","onClose","close","leavePush","leave","_canPush","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","handledPayload","_e","_f","bindId","bindEvent","ids","postgresChanges","commit_timestamp","errors","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","isEqual","obj1","obj2","k","isConnected","_leaveOpenTopic","records","old_record","RealtimeClient_awaiter","RealtimeClient_noop","RealtimeClient","endPoint","channels","transport","browser","w3cwebsocket","heartbeatIntervalMs","heartbeatTimer","pendingHeartbeatRef","logger","conn","sendBuffer","serializer","stateChangeCallbacks","eventsPerSecondLimitMs","inThrottle","websocket","eventsPerSecond","Math","floor","encode","reconnectTimer","disconnect","connect","_endPointURL","binaryType","onopen","_onConnOpen","_onConnError","onmessage","_onConnMessage","onclose","_onConnClose","clearInterval","getChannels","removeChannel","removeAllChannels","all","kind","msg","connectionState","connecting","Connecting","Open","closing","Closing","Closed","chan","isThrottled","_throttle","newRef","dupChannel","_appendParams","vsn","rawMessage","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","prefix","StorageError","__isStorageError","isStorageError","StorageApiError","toJSON","StorageUnknownError","originalError","helpers_awaiter","helpers_resolveFetch","resolveResponse","fetch_awaiter","_getErrorMessage","error_description","handleError","Res","_getRequestParams","parameters","_handleRequest","fetcher","noResolveJson","post","put","remove","StorageFileApi_awaiter","DEFAULT_SEARCH_OPTIONS","sortBy","DEFAULT_FILE_OPTIONS","cacheControl","contentType","StorageFileApi","bucketId","uploadOrUpdate","path","fileBody","fileOptions","cleanPath","_removeEmptyFolders","_path","_getFinalPath","upload","move","fromPath","toPath","sourceKey","destinationKey","copy","Key","createSignedUrl","expiresIn","transform","downloadQueryParam","download","signedUrl","encodeURI","signedURL","createSignedUrls","paths","datum","wantsTransformation","transformationQuery","transformOptsToQueryString","queryString","getPublicUrl","_queryString","publicUrl","prefixes","list","width","height","resize","quality","lib_constants_DEFAULT_HEADERS","StorageBucketApi_awaiter","StorageBucketApi","listBuckets","getBucket","createBucket","public","updateBucket","emptyBucket","deleteBucket","StorageClient","module_lib_constants_DEFAULT_HEADERS","lib_fetch_awaiter","fetch_resolveFetch","resolveHeadersConstructor","browser_ponyfill","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","stripTrailingSlash","applySettingDefaults","defaults","db","dbOptions","auth","authOptions","realtime","realtimeOptions","globalOptions","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","DEFAULT_GLOBAL_OPTIONS","lib_helpers_awaiter","expiresAt","timeNow","round","Date","now","helpers_uuid","random","v","helpers_isBrowser","document","localStorageWriteTests","tested","writable","supportsLocalStorage","localStorage","randomKey","setItem","removeItem","getParameterByName","href","regex","results","exec","lib_helpers_resolveFetch","looksLikeFetchResponse","maybeResponse","setItemAsync","storage","getItemAsync","getItem","removeItemAsync","decodeBase64URL","chr1","chr2","chr3","enc1","enc2","enc3","enc4","base64","Deferred","promiseConstructor","rej","decodeJWTPayload","base64UrlRegex","base64Url","sleep","accept","retryable","isRetryable","attempt","Infinity","AuthError","__isAuthError","isAuthError","AuthApiError","isAuthApiError","AuthUnknownError","CustomAuthError","AuthSessionMissingError","AuthInvalidCredentialsError","AuthImplicitGrantRedirectError","AuthRetryableFetchError","module_lib_fetch_awaiter","__rest","p","getOwnPropertySymbols","propertyIsEnumerable","fetch_getErrorMessage","fetch_handleError","NETWORK_ERROR_CODES","fetch_getRequestParams","_request","jwt","qs","redirectTo","fetch_handleRequest","xform","_sessionResponse","session","hasSession","expires_at","expires_in","user","_userResponse","_ssoResponse","_generateLinkResponse","action_link","email_otp","hashed_token","redirect_to","verification_type","rest","properties","_noResolveJsonResponse","refresh_token","GoTrueAdminApi_awaiter","GoTrueAdminApi_rest","GoTrueAdminApi","mfa","listFactors","_listFactors","deleteFactor","_deleteFactor","signOut","inviteUserByEmail","email","generateLink","new_email","newEmail","createUser","attributes","listUsers","_g","pagination","nextPage","lastPage","total","per_page","perPage","users","links","link","substring","rel","getUserById","uid","updateUserById","deleteUser","shouldSoftDelete","should_soft_delete","userId","factors","dist_module_lib_constants_DEFAULT_HEADERS","localStorageAdapter","GoTrueClient_awaiter","polyfillGlobalThis","__magic__","DEFAULT_OPTIONS","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","GoTrueClient","stateChangeEmitters","Map","autoRefreshTicker","visibilityChangedCallback","refreshingDeferred","initializePromise","broadcastChannel","inMemorySession","admin","verify","_verify","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","BroadcastChannel","_notifyAllSubscribers","initialize","_initialize","_isImplicitGrantFlow","_getSessionFromUrl","_removeSession","redirectType","_saveSession","_recoverAndRefresh","_handleVisibilityChange","signUp","password","emailRedirectTo","gotrue_meta_security","captcha_token","captchaToken","phone","signInWithPassword","signInWithOAuth","_handleProviderSignIn","provider","scopes","queryParams","skipBrowserRedirect","signInWithIdToken","nonce","id_token","signInWithOtp","create_user","shouldCreateUser","verifyOtp","signInWithSSO","provider_id","providerId","domain","skip_http_redirect","getSession","currentSession","maybeSession","_isValidSession","hasExpired","_callRefreshToken","getUser","updateUser","sessionData","sessionError","userError","_decodeJWT","setSession","exp","refreshedSession","token_type","refreshSession","error_code","provider_token","provider_refresh_token","hash","onAuthStateChange","subscription","resetPasswordForEmail","_refreshAccessToken","refreshToken","startedAt","_getUrlForProvider","postMessage","_persistSession","_removeVisibilityChangedCallback","_startAutoRefresh","_stopAutoRefresh","ticker","_autoRefreshTokenTick","unref","startAutoRefresh","stopAutoRefresh","expiresInTicks","_onVisibilityChanged","isInitial","visibilityState","urlParams","encodeURIComponent","factorId","friendly_name","friendlyName","factor_type","factorType","issuer","totp","qr_code","challenge_id","challengeId","challengeData","challengeError","factor","currentLevel","nextLevel","currentAuthenticationMethods","aal","verifiedFactors","amr","SupabaseAuthClient","SupabaseClient_awaiter","SupabaseClient","supabaseUrl","_h","_supabaseUrl","realtimeUrl","authUrl","storageUrl","isPlatform","urlParts","functionsUrl","defaultStorageKey","hostname","DEFAULTS","_initSupabaseAuthClient","_getAccessToken","_initRealtimeClient","_listenForAuthEvents","functions","authHeaders","apikey","_handleTokenChanged","source","changedAccessToken","createClient","createParser","onParse","isFirstChunk","startingPosition","startingFieldLength","eventId","eventName","feed","chunk","hasBom","BOM","position","discardTrailingNewline","character","lineLength","fieldLength","index","parseEventStreamLine","lineBuffer","noValue","field","valueLength","retry","every","charCode","charCodeAt","process","env","SUPABASE_SERVICE_ROLE_KEY","OpenAIStream","prompt","encoder","TextEncoder","messages","role","content","max_tokens","temperature","stream","ReadableStream","start","controller","choices","delta","queue","enqueue","parser","PageSignatureError","RemovedPageError","RemovedUAError","fromNodeHeaders","object","splitCookiesString","cookiesString","ch","lastComma","nextStart","cookiesSeparatorFound","cookiesStrings","pos","skipWhitespace","toNodeHeaders","validateURL","cause","responseSymbol","passThroughSymbol","waitUntilSymbol","FetchEvent","respondWith","passThroughOnException","waitUntil","NextFetchEvent","sourcePage","detectDomainLocale","domainItems","detectedLocale","domainItem","item","ref1","domainHostname","defaultLocale","locales","some","locale","removeTrailingSlash","route","parsePath","hashIndex","queryIndex","hasQuery","pathname","addPathPrefix","startsWith","addPathSuffix","suffix","pathHasPrefix","addLocale","ignorePrefix","formatNextPathnameInfo","info","buildId","trailingSlash","basePath","endsWith","getHostname","parsed","host","normalizeLocalePath","pathnameParts","splice","removePathPrefix","withoutPrefix","getNextPathnameInfo","_nextConfig","i18n","nextConfig","parseData","pathLocale","REGEX_LOCALHOST_HOSTNAME","parseURL","base","Internal","NextURL","baseOrOpts","analyzeUrl","ref2","ref3","ref4","pathnameInfo","domainLocale","domains","formatPathname","forceLocale","formatSearch","search","ref5","port","protocol","origin","username","for","SAME_SITE","parseSameSite","string","compact","newT","serialize","attrs","expires","toUTCString","maxAge","secure","httpOnly","sameSite","parseCookieString","cookie","pair","splitIndex","parseSetCookieString","setCookie","httponly","maxage","samesite","fromEntries","RequestCookies","_parsed","requestHeaders","size","getAll","n","names","clear","bag","serialized","normalizeCookie","ResponseCookies","responseHeaders","INTERNALS","NextRequest","cookies","geo","ip","nextUrl","cache","destination","integrity","keepalive","referrerPolicy","ua","response_INTERNALS","REDIRECTS","handleMiddlewareField","NextResponse","redirected","initObj","rewrite","relativizeURL","baseURL","relative","INTERNAL_QUERY_NAMES","EXTENDED_INTERNAL_QUERY_NAMES","stripInternalSearchParams","extended","normalizeRscPath","enabled","NextRequestHint","adapter_FLIGHT_PARAMETERS","adapter","isEdgeRendering","__BUILD_MANIFEST","requestUrl","isDataReq","param","enumerable","rewriteUrl","redirectURL","getUnsupportedModuleErrorMessage","__import_unsupported","moduleName","proxy","Proxy","_obj","prop","construct","_target","_this","enhanceGlobals","_globalThis","NativeWebSocket","WebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","protocols","version"],"sourceRoot":""}